
pushpak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00003782  00003816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800242  00800242  00003958  2**0
                  ALLOC
  3 .debug_aranges 00000498  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008b7  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000048d4  00000000  00000000  000046a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000020bb  00000000  00000000  00008f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002bf2  00000000  00000000  0000b036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  0000dc28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d58  00000000  00000000  0000e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000f010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000fa2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__vector_24>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	d4 0f       	add	r29, r20
      7e:	1d 1a       	sub	r1, r29
      80:	0d 1b       	sub	r16, r29

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf ef       	ldi	r28, 0xFF	; 255
      88:	d0 e1       	ldi	r29, 0x10	; 16
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	12 e0       	ldi	r17, 0x02	; 2
      90:	a0 e0       	ldi	r26, 0x00	; 0
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	e2 e8       	ldi	r30, 0x82	; 130
      96:	f7 e3       	ldi	r31, 0x37	; 55
      98:	02 c0       	rjmp	.+4      	; 0x9e <.do_copy_data_start>

0000009a <.do_copy_data_loop>:
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0

0000009e <.do_copy_data_start>:
      9e:	a2 34       	cpi	r26, 0x42	; 66
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <.do_copy_data_loop>

000000a4 <__do_clear_bss>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a2 e4       	ldi	r26, 0x42	; 66
      a8:	b2 e0       	ldi	r27, 0x02	; 2
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a6 36       	cpi	r26, 0x66	; 102
      b0:	b1 07       	cpc	r27, r17
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>

000000b4 <__do_global_ctors>:
      b4:	10 e0       	ldi	r17, 0x00	; 0
      b6:	c2 e8       	ldi	r28, 0x82	; 130
      b8:	d0 e0       	ldi	r29, 0x00	; 0
      ba:	04 c0       	rjmp	.+8      	; 0xc4 <.do_global_ctors_start>

000000bc <.do_global_ctors_loop>:
      bc:	22 97       	sbiw	r28, 0x02	; 2
      be:	fe 01       	movw	r30, r28
      c0:	0e 94 bb 1b 	call	0x3776	; 0x3776 <__tablejump__>

000000c4 <.do_global_ctors_start>:
      c4:	cc 37       	cpi	r28, 0x7C	; 124
      c6:	d1 07       	cpc	r29, r17
      c8:	c9 f7       	brne	.-14     	; 0xbc <.do_global_ctors_loop>
      ca:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <main>
      ce:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__fixunssfsi>:
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	7b 01       	movw	r14, r22
      e0:	8c 01       	movw	r16, r24
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	5f e4       	ldi	r21, 0x4F	; 79
      ea:	0e 94 17 04 	call	0x82e	; 0x82e <__gesf2>
      ee:	88 23       	and	r24, r24
      f0:	8c f0       	brlt	.+34     	; 0x114 <__fixunssfsi+0x3e>
      f2:	c8 01       	movw	r24, r16
      f4:	b7 01       	movw	r22, r14
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	5f e4       	ldi	r21, 0x4F	; 79
      fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__subsf3>
     102:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
     106:	9b 01       	movw	r18, r22
     108:	ac 01       	movw	r20, r24
     10a:	20 50       	subi	r18, 0x00	; 0
     10c:	30 40       	sbci	r19, 0x00	; 0
     10e:	40 40       	sbci	r20, 0x00	; 0
     110:	50 48       	sbci	r21, 0x80	; 128
     112:	06 c0       	rjmp	.+12     	; 0x120 <__fixunssfsi+0x4a>
     114:	c8 01       	movw	r24, r16
     116:	b7 01       	movw	r22, r14
     118:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
     11c:	9b 01       	movw	r18, r22
     11e:	ac 01       	movw	r20, r24
     120:	b9 01       	movw	r22, r18
     122:	ca 01       	movw	r24, r20
     124:	1f 91       	pop	r17
     126:	0f 91       	pop	r16
     128:	ff 90       	pop	r15
     12a:	ef 90       	pop	r14
     12c:	08 95       	ret

0000012e <_fpadd_parts>:
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	ed e9       	ldi	r30, 0x9D	; 157
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__>
     13a:	dc 01       	movw	r26, r24
     13c:	2b 01       	movw	r4, r22
     13e:	fa 01       	movw	r30, r20
     140:	9c 91       	ld	r25, X
     142:	92 30       	cpi	r25, 0x02	; 2
     144:	08 f4       	brcc	.+2      	; 0x148 <_fpadd_parts+0x1a>
     146:	39 c1       	rjmp	.+626    	; 0x3ba <_fpadd_parts+0x28c>
     148:	eb 01       	movw	r28, r22
     14a:	88 81       	ld	r24, Y
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	08 f4       	brcc	.+2      	; 0x152 <_fpadd_parts+0x24>
     150:	33 c1       	rjmp	.+614    	; 0x3b8 <_fpadd_parts+0x28a>
     152:	94 30       	cpi	r25, 0x04	; 4
     154:	69 f4       	brne	.+26     	; 0x170 <_fpadd_parts+0x42>
     156:	84 30       	cpi	r24, 0x04	; 4
     158:	09 f0       	breq	.+2      	; 0x15c <_fpadd_parts+0x2e>
     15a:	2f c1       	rjmp	.+606    	; 0x3ba <_fpadd_parts+0x28c>
     15c:	11 96       	adiw	r26, 0x01	; 1
     15e:	9c 91       	ld	r25, X
     160:	11 97       	sbiw	r26, 0x01	; 1
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	98 17       	cp	r25, r24
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x3c>
     168:	28 c1       	rjmp	.+592    	; 0x3ba <_fpadd_parts+0x28c>
     16a:	a6 e2       	ldi	r26, 0x26	; 38
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	25 c1       	rjmp	.+586    	; 0x3ba <_fpadd_parts+0x28c>
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	09 f4       	brne	.+2      	; 0x176 <_fpadd_parts+0x48>
     174:	21 c1       	rjmp	.+578    	; 0x3b8 <_fpadd_parts+0x28a>
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	a9 f4       	brne	.+42     	; 0x1a4 <_fpadd_parts+0x76>
     17a:	92 30       	cpi	r25, 0x02	; 2
     17c:	09 f0       	breq	.+2      	; 0x180 <_fpadd_parts+0x52>
     17e:	1d c1       	rjmp	.+570    	; 0x3ba <_fpadd_parts+0x28c>
     180:	9a 01       	movw	r18, r20
     182:	ad 01       	movw	r20, r26
     184:	88 e0       	ldi	r24, 0x08	; 8
     186:	ea 01       	movw	r28, r20
     188:	09 90       	ld	r0, Y+
     18a:	ae 01       	movw	r20, r28
     18c:	e9 01       	movw	r28, r18
     18e:	09 92       	st	Y+, r0
     190:	9e 01       	movw	r18, r28
     192:	81 50       	subi	r24, 0x01	; 1
     194:	c1 f7       	brne	.-16     	; 0x186 <_fpadd_parts+0x58>
     196:	e2 01       	movw	r28, r4
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	11 96       	adiw	r26, 0x01	; 1
     19c:	9c 91       	ld	r25, X
     19e:	89 23       	and	r24, r25
     1a0:	81 83       	std	Z+1, r24	; 0x01
     1a2:	08 c1       	rjmp	.+528    	; 0x3b4 <_fpadd_parts+0x286>
     1a4:	92 30       	cpi	r25, 0x02	; 2
     1a6:	09 f4       	brne	.+2      	; 0x1aa <_fpadd_parts+0x7c>
     1a8:	07 c1       	rjmp	.+526    	; 0x3b8 <_fpadd_parts+0x28a>
     1aa:	12 96       	adiw	r26, 0x02	; 2
     1ac:	2d 90       	ld	r2, X+
     1ae:	3c 90       	ld	r3, X
     1b0:	13 97       	sbiw	r26, 0x03	; 3
     1b2:	eb 01       	movw	r28, r22
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	14 96       	adiw	r26, 0x04	; 4
     1ba:	ad 90       	ld	r10, X+
     1bc:	bd 90       	ld	r11, X+
     1be:	cd 90       	ld	r12, X+
     1c0:	dc 90       	ld	r13, X
     1c2:	17 97       	sbiw	r26, 0x07	; 7
     1c4:	ec 80       	ldd	r14, Y+4	; 0x04
     1c6:	fd 80       	ldd	r15, Y+5	; 0x05
     1c8:	0e 81       	ldd	r16, Y+6	; 0x06
     1ca:	1f 81       	ldd	r17, Y+7	; 0x07
     1cc:	91 01       	movw	r18, r2
     1ce:	28 1b       	sub	r18, r24
     1d0:	39 0b       	sbc	r19, r25
     1d2:	b9 01       	movw	r22, r18
     1d4:	37 ff       	sbrs	r19, 7
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <_fpadd_parts+0xb2>
     1d8:	66 27       	eor	r22, r22
     1da:	77 27       	eor	r23, r23
     1dc:	62 1b       	sub	r22, r18
     1de:	73 0b       	sbc	r23, r19
     1e0:	60 32       	cpi	r22, 0x20	; 32
     1e2:	71 05       	cpc	r23, r1
     1e4:	0c f0       	brlt	.+2      	; 0x1e8 <_fpadd_parts+0xba>
     1e6:	61 c0       	rjmp	.+194    	; 0x2aa <_fpadd_parts+0x17c>
     1e8:	12 16       	cp	r1, r18
     1ea:	13 06       	cpc	r1, r19
     1ec:	6c f5       	brge	.+90     	; 0x248 <_fpadd_parts+0x11a>
     1ee:	37 01       	movw	r6, r14
     1f0:	48 01       	movw	r8, r16
     1f2:	06 2e       	mov	r0, r22
     1f4:	04 c0       	rjmp	.+8      	; 0x1fe <_fpadd_parts+0xd0>
     1f6:	96 94       	lsr	r9
     1f8:	87 94       	ror	r8
     1fa:	77 94       	ror	r7
     1fc:	67 94       	ror	r6
     1fe:	0a 94       	dec	r0
     200:	d2 f7       	brpl	.-12     	; 0x1f6 <_fpadd_parts+0xc8>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	04 c0       	rjmp	.+8      	; 0x214 <_fpadd_parts+0xe6>
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	44 1f       	adc	r20, r20
     212:	55 1f       	adc	r21, r21
     214:	6a 95       	dec	r22
     216:	d2 f7       	brpl	.-12     	; 0x20c <_fpadd_parts+0xde>
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	30 40       	sbci	r19, 0x00	; 0
     21c:	40 40       	sbci	r20, 0x00	; 0
     21e:	50 40       	sbci	r21, 0x00	; 0
     220:	2e 21       	and	r18, r14
     222:	3f 21       	and	r19, r15
     224:	40 23       	and	r20, r16
     226:	51 23       	and	r21, r17
     228:	21 15       	cp	r18, r1
     22a:	31 05       	cpc	r19, r1
     22c:	41 05       	cpc	r20, r1
     22e:	51 05       	cpc	r21, r1
     230:	21 f0       	breq	.+8      	; 0x23a <_fpadd_parts+0x10c>
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	79 01       	movw	r14, r18
     23c:	8a 01       	movw	r16, r20
     23e:	e6 28       	or	r14, r6
     240:	f7 28       	or	r15, r7
     242:	08 29       	or	r16, r8
     244:	19 29       	or	r17, r9
     246:	3c c0       	rjmp	.+120    	; 0x2c0 <_fpadd_parts+0x192>
     248:	23 2b       	or	r18, r19
     24a:	d1 f1       	breq	.+116    	; 0x2c0 <_fpadd_parts+0x192>
     24c:	26 0e       	add	r2, r22
     24e:	37 1e       	adc	r3, r23
     250:	35 01       	movw	r6, r10
     252:	46 01       	movw	r8, r12
     254:	06 2e       	mov	r0, r22
     256:	04 c0       	rjmp	.+8      	; 0x260 <_fpadd_parts+0x132>
     258:	96 94       	lsr	r9
     25a:	87 94       	ror	r8
     25c:	77 94       	ror	r7
     25e:	67 94       	ror	r6
     260:	0a 94       	dec	r0
     262:	d2 f7       	brpl	.-12     	; 0x258 <_fpadd_parts+0x12a>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	04 c0       	rjmp	.+8      	; 0x276 <_fpadd_parts+0x148>
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	44 1f       	adc	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	d2 f7       	brpl	.-12     	; 0x26e <_fpadd_parts+0x140>
     27a:	21 50       	subi	r18, 0x01	; 1
     27c:	30 40       	sbci	r19, 0x00	; 0
     27e:	40 40       	sbci	r20, 0x00	; 0
     280:	50 40       	sbci	r21, 0x00	; 0
     282:	2a 21       	and	r18, r10
     284:	3b 21       	and	r19, r11
     286:	4c 21       	and	r20, r12
     288:	5d 21       	and	r21, r13
     28a:	21 15       	cp	r18, r1
     28c:	31 05       	cpc	r19, r1
     28e:	41 05       	cpc	r20, r1
     290:	51 05       	cpc	r21, r1
     292:	21 f0       	breq	.+8      	; 0x29c <_fpadd_parts+0x16e>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	59 01       	movw	r10, r18
     29e:	6a 01       	movw	r12, r20
     2a0:	a6 28       	or	r10, r6
     2a2:	b7 28       	or	r11, r7
     2a4:	c8 28       	or	r12, r8
     2a6:	d9 28       	or	r13, r9
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <_fpadd_parts+0x192>
     2aa:	82 15       	cp	r24, r2
     2ac:	93 05       	cpc	r25, r3
     2ae:	2c f0       	brlt	.+10     	; 0x2ba <_fpadd_parts+0x18c>
     2b0:	1c 01       	movw	r2, r24
     2b2:	aa 24       	eor	r10, r10
     2b4:	bb 24       	eor	r11, r11
     2b6:	65 01       	movw	r12, r10
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <_fpadd_parts+0x192>
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
     2be:	87 01       	movw	r16, r14
     2c0:	11 96       	adiw	r26, 0x01	; 1
     2c2:	9c 91       	ld	r25, X
     2c4:	d2 01       	movw	r26, r4
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	8c 91       	ld	r24, X
     2ca:	98 17       	cp	r25, r24
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <_fpadd_parts+0x1a2>
     2ce:	45 c0       	rjmp	.+138    	; 0x35a <_fpadd_parts+0x22c>
     2d0:	99 23       	and	r25, r25
     2d2:	39 f0       	breq	.+14     	; 0x2e2 <_fpadd_parts+0x1b4>
     2d4:	a8 01       	movw	r20, r16
     2d6:	97 01       	movw	r18, r14
     2d8:	2a 19       	sub	r18, r10
     2da:	3b 09       	sbc	r19, r11
     2dc:	4c 09       	sbc	r20, r12
     2de:	5d 09       	sbc	r21, r13
     2e0:	06 c0       	rjmp	.+12     	; 0x2ee <_fpadd_parts+0x1c0>
     2e2:	a6 01       	movw	r20, r12
     2e4:	95 01       	movw	r18, r10
     2e6:	2e 19       	sub	r18, r14
     2e8:	3f 09       	sbc	r19, r15
     2ea:	40 0b       	sbc	r20, r16
     2ec:	51 0b       	sbc	r21, r17
     2ee:	57 fd       	sbrc	r21, 7
     2f0:	08 c0       	rjmp	.+16     	; 0x302 <_fpadd_parts+0x1d4>
     2f2:	11 82       	std	Z+1, r1	; 0x01
     2f4:	33 82       	std	Z+3, r3	; 0x03
     2f6:	22 82       	std	Z+2, r2	; 0x02
     2f8:	24 83       	std	Z+4, r18	; 0x04
     2fa:	35 83       	std	Z+5, r19	; 0x05
     2fc:	46 83       	std	Z+6, r20	; 0x06
     2fe:	57 83       	std	Z+7, r21	; 0x07
     300:	1d c0       	rjmp	.+58     	; 0x33c <_fpadd_parts+0x20e>
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	81 83       	std	Z+1, r24	; 0x01
     306:	33 82       	std	Z+3, r3	; 0x03
     308:	22 82       	std	Z+2, r2	; 0x02
     30a:	88 27       	eor	r24, r24
     30c:	99 27       	eor	r25, r25
     30e:	dc 01       	movw	r26, r24
     310:	82 1b       	sub	r24, r18
     312:	93 0b       	sbc	r25, r19
     314:	a4 0b       	sbc	r26, r20
     316:	b5 0b       	sbc	r27, r21
     318:	84 83       	std	Z+4, r24	; 0x04
     31a:	95 83       	std	Z+5, r25	; 0x05
     31c:	a6 83       	std	Z+6, r26	; 0x06
     31e:	b7 83       	std	Z+7, r27	; 0x07
     320:	0d c0       	rjmp	.+26     	; 0x33c <_fpadd_parts+0x20e>
     322:	22 0f       	add	r18, r18
     324:	33 1f       	adc	r19, r19
     326:	44 1f       	adc	r20, r20
     328:	55 1f       	adc	r21, r21
     32a:	24 83       	std	Z+4, r18	; 0x04
     32c:	35 83       	std	Z+5, r19	; 0x05
     32e:	46 83       	std	Z+6, r20	; 0x06
     330:	57 83       	std	Z+7, r21	; 0x07
     332:	82 81       	ldd	r24, Z+2	; 0x02
     334:	93 81       	ldd	r25, Z+3	; 0x03
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	93 83       	std	Z+3, r25	; 0x03
     33a:	82 83       	std	Z+2, r24	; 0x02
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	35 81       	ldd	r19, Z+5	; 0x05
     340:	46 81       	ldd	r20, Z+6	; 0x06
     342:	57 81       	ldd	r21, Z+7	; 0x07
     344:	da 01       	movw	r26, r20
     346:	c9 01       	movw	r24, r18
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	a1 09       	sbc	r26, r1
     34c:	b1 09       	sbc	r27, r1
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	af 4f       	sbci	r26, 0xFF	; 255
     354:	bf 43       	sbci	r27, 0x3F	; 63
     356:	28 f3       	brcs	.-54     	; 0x322 <_fpadd_parts+0x1f4>
     358:	0b c0       	rjmp	.+22     	; 0x370 <_fpadd_parts+0x242>
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	33 82       	std	Z+3, r3	; 0x03
     35e:	22 82       	std	Z+2, r2	; 0x02
     360:	ea 0c       	add	r14, r10
     362:	fb 1c       	adc	r15, r11
     364:	0c 1d       	adc	r16, r12
     366:	1d 1d       	adc	r17, r13
     368:	e4 82       	std	Z+4, r14	; 0x04
     36a:	f5 82       	std	Z+5, r15	; 0x05
     36c:	06 83       	std	Z+6, r16	; 0x06
     36e:	17 83       	std	Z+7, r17	; 0x07
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	80 83       	st	Z, r24
     374:	24 81       	ldd	r18, Z+4	; 0x04
     376:	35 81       	ldd	r19, Z+5	; 0x05
     378:	46 81       	ldd	r20, Z+6	; 0x06
     37a:	57 81       	ldd	r21, Z+7	; 0x07
     37c:	57 ff       	sbrs	r21, 7
     37e:	1a c0       	rjmp	.+52     	; 0x3b4 <_fpadd_parts+0x286>
     380:	c9 01       	movw	r24, r18
     382:	aa 27       	eor	r26, r26
     384:	97 fd       	sbrc	r25, 7
     386:	a0 95       	com	r26
     388:	ba 2f       	mov	r27, r26
     38a:	81 70       	andi	r24, 0x01	; 1
     38c:	90 70       	andi	r25, 0x00	; 0
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	56 95       	lsr	r21
     394:	47 95       	ror	r20
     396:	37 95       	ror	r19
     398:	27 95       	ror	r18
     39a:	82 2b       	or	r24, r18
     39c:	93 2b       	or	r25, r19
     39e:	a4 2b       	or	r26, r20
     3a0:	b5 2b       	or	r27, r21
     3a2:	84 83       	std	Z+4, r24	; 0x04
     3a4:	95 83       	std	Z+5, r25	; 0x05
     3a6:	a6 83       	std	Z+6, r26	; 0x06
     3a8:	b7 83       	std	Z+7, r27	; 0x07
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
     3ac:	93 81       	ldd	r25, Z+3	; 0x03
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	df 01       	movw	r26, r30
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <_fpadd_parts+0x28c>
     3b8:	d2 01       	movw	r26, r4
     3ba:	cd 01       	movw	r24, r26
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	e2 e1       	ldi	r30, 0x12	; 18
     3c2:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__>

000003c6 <__subsf3>:
     3c6:	a0 e2       	ldi	r26, 0x20	; 32
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	e9 ee       	ldi	r30, 0xE9	; 233
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x18>
     3d2:	69 83       	std	Y+1, r22	; 0x01
     3d4:	7a 83       	std	Y+2, r23	; 0x02
     3d6:	8b 83       	std	Y+3, r24	; 0x03
     3d8:	9c 83       	std	Y+4, r25	; 0x04
     3da:	2d 83       	std	Y+5, r18	; 0x05
     3dc:	3e 83       	std	Y+6, r19	; 0x06
     3de:	4f 83       	std	Y+7, r20	; 0x07
     3e0:	58 87       	std	Y+8, r21	; 0x08
     3e2:	e9 e0       	ldi	r30, 0x09	; 9
     3e4:	ee 2e       	mov	r14, r30
     3e6:	f1 2c       	mov	r15, r1
     3e8:	ec 0e       	add	r14, r28
     3ea:	fd 1e       	adc	r15, r29
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	b7 01       	movw	r22, r14
     3f2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     3f6:	8e 01       	movw	r16, r28
     3f8:	0f 5e       	subi	r16, 0xEF	; 239
     3fa:	1f 4f       	sbci	r17, 0xFF	; 255
     3fc:	ce 01       	movw	r24, r28
     3fe:	05 96       	adiw	r24, 0x05	; 5
     400:	b8 01       	movw	r22, r16
     402:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     406:	8a 89       	ldd	r24, Y+18	; 0x12
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	89 27       	eor	r24, r25
     40c:	8a 8b       	std	Y+18, r24	; 0x12
     40e:	c7 01       	movw	r24, r14
     410:	b8 01       	movw	r22, r16
     412:	ae 01       	movw	r20, r28
     414:	47 5e       	subi	r20, 0xE7	; 231
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	0e 94 97 00 	call	0x12e	; 0x12e <_fpadd_parts>
     41c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__pack_f>
     420:	a0 96       	adiw	r28, 0x20	; 32
     422:	e6 e0       	ldi	r30, 0x06	; 6
     424:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x18>

00000428 <__addsf3>:
     428:	a0 e2       	ldi	r26, 0x20	; 32
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	ea e1       	ldi	r30, 0x1A	; 26
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x18>
     434:	69 83       	std	Y+1, r22	; 0x01
     436:	7a 83       	std	Y+2, r23	; 0x02
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	9c 83       	std	Y+4, r25	; 0x04
     43c:	2d 83       	std	Y+5, r18	; 0x05
     43e:	3e 83       	std	Y+6, r19	; 0x06
     440:	4f 83       	std	Y+7, r20	; 0x07
     442:	58 87       	std	Y+8, r21	; 0x08
     444:	f9 e0       	ldi	r31, 0x09	; 9
     446:	ef 2e       	mov	r14, r31
     448:	f1 2c       	mov	r15, r1
     44a:	ec 0e       	add	r14, r28
     44c:	fd 1e       	adc	r15, r29
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	b7 01       	movw	r22, r14
     454:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     458:	8e 01       	movw	r16, r28
     45a:	0f 5e       	subi	r16, 0xEF	; 239
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	ce 01       	movw	r24, r28
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	b8 01       	movw	r22, r16
     464:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     468:	c7 01       	movw	r24, r14
     46a:	b8 01       	movw	r22, r16
     46c:	ae 01       	movw	r20, r28
     46e:	47 5e       	subi	r20, 0xE7	; 231
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	0e 94 97 00 	call	0x12e	; 0x12e <_fpadd_parts>
     476:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__pack_f>
     47a:	a0 96       	adiw	r28, 0x20	; 32
     47c:	e6 e0       	ldi	r30, 0x06	; 6
     47e:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x18>

00000482 <__mulsf3>:
     482:	a0 e2       	ldi	r26, 0x20	; 32
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e7 e4       	ldi	r30, 0x47	; 71
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__>
     48e:	69 83       	std	Y+1, r22	; 0x01
     490:	7a 83       	std	Y+2, r23	; 0x02
     492:	8b 83       	std	Y+3, r24	; 0x03
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	2d 83       	std	Y+5, r18	; 0x05
     498:	3e 83       	std	Y+6, r19	; 0x06
     49a:	4f 83       	std	Y+7, r20	; 0x07
     49c:	58 87       	std	Y+8, r21	; 0x08
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	be 01       	movw	r22, r28
     4a4:	67 5f       	subi	r22, 0xF7	; 247
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     4ac:	ce 01       	movw	r24, r28
     4ae:	05 96       	adiw	r24, 0x05	; 5
     4b0:	be 01       	movw	r22, r28
     4b2:	6f 5e       	subi	r22, 0xEF	; 239
     4b4:	7f 4f       	sbci	r23, 0xFF	; 255
     4b6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     4ba:	99 85       	ldd	r25, Y+9	; 0x09
     4bc:	92 30       	cpi	r25, 0x02	; 2
     4be:	88 f0       	brcs	.+34     	; 0x4e2 <__mulsf3+0x60>
     4c0:	89 89       	ldd	r24, Y+17	; 0x11
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	c8 f0       	brcs	.+50     	; 0x4f8 <__mulsf3+0x76>
     4c6:	94 30       	cpi	r25, 0x04	; 4
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <__mulsf3+0x4e>
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	51 f4       	brne	.+20     	; 0x4e2 <__mulsf3+0x60>
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__mulsf3+0x56>
     4d0:	84 30       	cpi	r24, 0x04	; 4
     4d2:	29 f4       	brne	.+10     	; 0x4de <__mulsf3+0x5c>
     4d4:	92 30       	cpi	r25, 0x02	; 2
     4d6:	81 f4       	brne	.+32     	; 0x4f8 <__mulsf3+0x76>
     4d8:	86 e2       	ldi	r24, 0x26	; 38
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	c6 c0       	rjmp	.+396    	; 0x66a <__mulsf3+0x1e8>
     4de:	92 30       	cpi	r25, 0x02	; 2
     4e0:	49 f4       	brne	.+18     	; 0x4f4 <__mulsf3+0x72>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4e6:	8a 89       	ldd	r24, Y+18	; 0x12
     4e8:	98 13       	cpse	r25, r24
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	2a 87       	std	Y+10, r18	; 0x0a
     4ee:	ce 01       	movw	r24, r28
     4f0:	09 96       	adiw	r24, 0x09	; 9
     4f2:	bb c0       	rjmp	.+374    	; 0x66a <__mulsf3+0x1e8>
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	49 f4       	brne	.+18     	; 0x50a <__mulsf3+0x88>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4fc:	8a 89       	ldd	r24, Y+18	; 0x12
     4fe:	98 13       	cpse	r25, r24
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	2a 8b       	std	Y+18, r18	; 0x12
     504:	ce 01       	movw	r24, r28
     506:	41 96       	adiw	r24, 0x11	; 17
     508:	b0 c0       	rjmp	.+352    	; 0x66a <__mulsf3+0x1e8>
     50a:	2d 84       	ldd	r2, Y+13	; 0x0d
     50c:	3e 84       	ldd	r3, Y+14	; 0x0e
     50e:	4f 84       	ldd	r4, Y+15	; 0x0f
     510:	58 88       	ldd	r5, Y+16	; 0x10
     512:	6d 88       	ldd	r6, Y+21	; 0x15
     514:	7e 88       	ldd	r7, Y+22	; 0x16
     516:	8f 88       	ldd	r8, Y+23	; 0x17
     518:	98 8c       	ldd	r9, Y+24	; 0x18
     51a:	ee 24       	eor	r14, r14
     51c:	ff 24       	eor	r15, r15
     51e:	87 01       	movw	r16, r14
     520:	aa 24       	eor	r10, r10
     522:	bb 24       	eor	r11, r11
     524:	65 01       	movw	r12, r10
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	e0 e0       	ldi	r30, 0x00	; 0
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	c1 01       	movw	r24, r2
     534:	81 70       	andi	r24, 0x01	; 1
     536:	90 70       	andi	r25, 0x00	; 0
     538:	89 2b       	or	r24, r25
     53a:	e9 f0       	breq	.+58     	; 0x576 <__mulsf3+0xf4>
     53c:	e6 0c       	add	r14, r6
     53e:	f7 1c       	adc	r15, r7
     540:	08 1d       	adc	r16, r8
     542:	19 1d       	adc	r17, r9
     544:	9a 01       	movw	r18, r20
     546:	ab 01       	movw	r20, r22
     548:	2a 0d       	add	r18, r10
     54a:	3b 1d       	adc	r19, r11
     54c:	4c 1d       	adc	r20, r12
     54e:	5d 1d       	adc	r21, r13
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e6 14       	cp	r14, r6
     55a:	f7 04       	cpc	r15, r7
     55c:	08 05       	cpc	r16, r8
     55e:	19 05       	cpc	r17, r9
     560:	20 f4       	brcc	.+8      	; 0x56a <__mulsf3+0xe8>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a0 e0       	ldi	r26, 0x00	; 0
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	ba 01       	movw	r22, r20
     56c:	a9 01       	movw	r20, r18
     56e:	48 0f       	add	r20, r24
     570:	59 1f       	adc	r21, r25
     572:	6a 1f       	adc	r22, r26
     574:	7b 1f       	adc	r23, r27
     576:	aa 0c       	add	r10, r10
     578:	bb 1c       	adc	r11, r11
     57a:	cc 1c       	adc	r12, r12
     57c:	dd 1c       	adc	r13, r13
     57e:	97 fe       	sbrs	r9, 7
     580:	08 c0       	rjmp	.+16     	; 0x592 <__mulsf3+0x110>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	a8 2a       	or	r10, r24
     58c:	b9 2a       	or	r11, r25
     58e:	ca 2a       	or	r12, r26
     590:	db 2a       	or	r13, r27
     592:	31 96       	adiw	r30, 0x01	; 1
     594:	e0 32       	cpi	r30, 0x20	; 32
     596:	f1 05       	cpc	r31, r1
     598:	49 f0       	breq	.+18     	; 0x5ac <__mulsf3+0x12a>
     59a:	66 0c       	add	r6, r6
     59c:	77 1c       	adc	r7, r7
     59e:	88 1c       	adc	r8, r8
     5a0:	99 1c       	adc	r9, r9
     5a2:	56 94       	lsr	r5
     5a4:	47 94       	ror	r4
     5a6:	37 94       	ror	r3
     5a8:	27 94       	ror	r2
     5aa:	c3 cf       	rjmp	.-122    	; 0x532 <__mulsf3+0xb0>
     5ac:	fa 85       	ldd	r31, Y+10	; 0x0a
     5ae:	ea 89       	ldd	r30, Y+18	; 0x12
     5b0:	2b 89       	ldd	r18, Y+19	; 0x13
     5b2:	3c 89       	ldd	r19, Y+20	; 0x14
     5b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b8:	28 0f       	add	r18, r24
     5ba:	39 1f       	adc	r19, r25
     5bc:	2e 5f       	subi	r18, 0xFE	; 254
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	17 c0       	rjmp	.+46     	; 0x5f0 <__mulsf3+0x16e>
     5c2:	ca 01       	movw	r24, r20
     5c4:	81 70       	andi	r24, 0x01	; 1
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <__mulsf3+0x162>
     5cc:	16 95       	lsr	r17
     5ce:	07 95       	ror	r16
     5d0:	f7 94       	ror	r15
     5d2:	e7 94       	ror	r14
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e8       	ldi	r27, 0x80	; 128
     5dc:	e8 2a       	or	r14, r24
     5de:	f9 2a       	or	r15, r25
     5e0:	0a 2b       	or	r16, r26
     5e2:	1b 2b       	or	r17, r27
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	57 95       	ror	r21
     5ea:	47 95       	ror	r20
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	77 fd       	sbrc	r23, 7
     5f2:	e7 cf       	rjmp	.-50     	; 0x5c2 <__mulsf3+0x140>
     5f4:	0c c0       	rjmp	.+24     	; 0x60e <__mulsf3+0x18c>
     5f6:	44 0f       	add	r20, r20
     5f8:	55 1f       	adc	r21, r21
     5fa:	66 1f       	adc	r22, r22
     5fc:	77 1f       	adc	r23, r23
     5fe:	17 fd       	sbrc	r17, 7
     600:	41 60       	ori	r20, 0x01	; 1
     602:	ee 0c       	add	r14, r14
     604:	ff 1c       	adc	r15, r15
     606:	00 1f       	adc	r16, r16
     608:	11 1f       	adc	r17, r17
     60a:	21 50       	subi	r18, 0x01	; 1
     60c:	30 40       	sbci	r19, 0x00	; 0
     60e:	40 30       	cpi	r20, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	59 07       	cpc	r21, r25
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	69 07       	cpc	r22, r25
     618:	90 e4       	ldi	r25, 0x40	; 64
     61a:	79 07       	cpc	r23, r25
     61c:	60 f3       	brcs	.-40     	; 0x5f6 <__mulsf3+0x174>
     61e:	2b 8f       	std	Y+27, r18	; 0x1b
     620:	3c 8f       	std	Y+28, r19	; 0x1c
     622:	db 01       	movw	r26, r22
     624:	ca 01       	movw	r24, r20
     626:	8f 77       	andi	r24, 0x7F	; 127
     628:	90 70       	andi	r25, 0x00	; 0
     62a:	a0 70       	andi	r26, 0x00	; 0
     62c:	b0 70       	andi	r27, 0x00	; 0
     62e:	80 34       	cpi	r24, 0x40	; 64
     630:	91 05       	cpc	r25, r1
     632:	a1 05       	cpc	r26, r1
     634:	b1 05       	cpc	r27, r1
     636:	61 f4       	brne	.+24     	; 0x650 <__mulsf3+0x1ce>
     638:	47 fd       	sbrc	r20, 7
     63a:	0a c0       	rjmp	.+20     	; 0x650 <__mulsf3+0x1ce>
     63c:	e1 14       	cp	r14, r1
     63e:	f1 04       	cpc	r15, r1
     640:	01 05       	cpc	r16, r1
     642:	11 05       	cpc	r17, r1
     644:	29 f0       	breq	.+10     	; 0x650 <__mulsf3+0x1ce>
     646:	40 5c       	subi	r20, 0xC0	; 192
     648:	5f 4f       	sbci	r21, 0xFF	; 255
     64a:	6f 4f       	sbci	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	40 78       	andi	r20, 0x80	; 128
     650:	1a 8e       	std	Y+26, r1	; 0x1a
     652:	fe 17       	cp	r31, r30
     654:	11 f0       	breq	.+4      	; 0x65a <__mulsf3+0x1d8>
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	8a 8f       	std	Y+26, r24	; 0x1a
     65a:	4d 8f       	std	Y+29, r20	; 0x1d
     65c:	5e 8f       	std	Y+30, r21	; 0x1e
     65e:	6f 8f       	std	Y+31, r22	; 0x1f
     660:	78 a3       	std	Y+32, r23	; 0x20
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	89 8f       	std	Y+25, r24	; 0x19
     666:	ce 01       	movw	r24, r28
     668:	49 96       	adiw	r24, 0x19	; 25
     66a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e2 e1       	ldi	r30, 0x12	; 18
     672:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__>

00000676 <__divsf3>:
     676:	a8 e1       	ldi	r26, 0x18	; 24
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__prologue_saves__+0x10>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	b9 e0       	ldi	r27, 0x09	; 9
     694:	eb 2e       	mov	r14, r27
     696:	f1 2c       	mov	r15, r1
     698:	ec 0e       	add	r14, r28
     69a:	fd 1e       	adc	r15, r29
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	b7 01       	movw	r22, r14
     6a2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     6a6:	8e 01       	movw	r16, r28
     6a8:	0f 5e       	subi	r16, 0xEF	; 239
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	ce 01       	movw	r24, r28
     6ae:	05 96       	adiw	r24, 0x05	; 5
     6b0:	b8 01       	movw	r22, r16
     6b2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     6b6:	29 85       	ldd	r18, Y+9	; 0x09
     6b8:	22 30       	cpi	r18, 0x02	; 2
     6ba:	08 f4       	brcc	.+2      	; 0x6be <__divsf3+0x48>
     6bc:	7e c0       	rjmp	.+252    	; 0x7ba <__divsf3+0x144>
     6be:	39 89       	ldd	r19, Y+17	; 0x11
     6c0:	32 30       	cpi	r19, 0x02	; 2
     6c2:	10 f4       	brcc	.+4      	; 0x6c8 <__divsf3+0x52>
     6c4:	b8 01       	movw	r22, r16
     6c6:	7c c0       	rjmp	.+248    	; 0x7c0 <__divsf3+0x14a>
     6c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ca:	9a 89       	ldd	r25, Y+18	; 0x12
     6cc:	89 27       	eor	r24, r25
     6ce:	8a 87       	std	Y+10, r24	; 0x0a
     6d0:	24 30       	cpi	r18, 0x04	; 4
     6d2:	11 f0       	breq	.+4      	; 0x6d8 <__divsf3+0x62>
     6d4:	22 30       	cpi	r18, 0x02	; 2
     6d6:	31 f4       	brne	.+12     	; 0x6e4 <__divsf3+0x6e>
     6d8:	23 17       	cp	r18, r19
     6da:	09 f0       	breq	.+2      	; 0x6de <__divsf3+0x68>
     6dc:	6e c0       	rjmp	.+220    	; 0x7ba <__divsf3+0x144>
     6de:	66 e2       	ldi	r22, 0x26	; 38
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	6e c0       	rjmp	.+220    	; 0x7c0 <__divsf3+0x14a>
     6e4:	34 30       	cpi	r19, 0x04	; 4
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__divsf3+0x80>
     6e8:	1d 86       	std	Y+13, r1	; 0x0d
     6ea:	1e 86       	std	Y+14, r1	; 0x0e
     6ec:	1f 86       	std	Y+15, r1	; 0x0f
     6ee:	18 8a       	std	Y+16, r1	; 0x10
     6f0:	1c 86       	std	Y+12, r1	; 0x0c
     6f2:	1b 86       	std	Y+11, r1	; 0x0b
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__divsf3+0x88>
     6f6:	32 30       	cpi	r19, 0x02	; 2
     6f8:	21 f4       	brne	.+8      	; 0x702 <__divsf3+0x8c>
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	89 87       	std	Y+9, r24	; 0x09
     6fe:	b7 01       	movw	r22, r14
     700:	5f c0       	rjmp	.+190    	; 0x7c0 <__divsf3+0x14a>
     702:	2b 85       	ldd	r18, Y+11	; 0x0b
     704:	3c 85       	ldd	r19, Y+12	; 0x0c
     706:	8b 89       	ldd	r24, Y+19	; 0x13
     708:	9c 89       	ldd	r25, Y+20	; 0x14
     70a:	28 1b       	sub	r18, r24
     70c:	39 0b       	sbc	r19, r25
     70e:	3c 87       	std	Y+12, r19	; 0x0c
     710:	2b 87       	std	Y+11, r18	; 0x0b
     712:	ed 84       	ldd	r14, Y+13	; 0x0d
     714:	fe 84       	ldd	r15, Y+14	; 0x0e
     716:	0f 85       	ldd	r16, Y+15	; 0x0f
     718:	18 89       	ldd	r17, Y+16	; 0x10
     71a:	ad 88       	ldd	r10, Y+21	; 0x15
     71c:	be 88       	ldd	r11, Y+22	; 0x16
     71e:	cf 88       	ldd	r12, Y+23	; 0x17
     720:	d8 8c       	ldd	r13, Y+24	; 0x18
     722:	ea 14       	cp	r14, r10
     724:	fb 04       	cpc	r15, r11
     726:	0c 05       	cpc	r16, r12
     728:	1d 05       	cpc	r17, r13
     72a:	40 f4       	brcc	.+16     	; 0x73c <__divsf3+0xc6>
     72c:	ee 0c       	add	r14, r14
     72e:	ff 1c       	adc	r15, r15
     730:	00 1f       	adc	r16, r16
     732:	11 1f       	adc	r17, r17
     734:	21 50       	subi	r18, 0x01	; 1
     736:	30 40       	sbci	r19, 0x00	; 0
     738:	3c 87       	std	Y+12, r19	; 0x0c
     73a:	2b 87       	std	Y+11, r18	; 0x0b
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e4       	ldi	r27, 0x40	; 64
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	ea 14       	cp	r14, r10
     752:	fb 04       	cpc	r15, r11
     754:	0c 05       	cpc	r16, r12
     756:	1d 05       	cpc	r17, r13
     758:	40 f0       	brcs	.+16     	; 0x76a <__divsf3+0xf4>
     75a:	28 2b       	or	r18, r24
     75c:	39 2b       	or	r19, r25
     75e:	4a 2b       	or	r20, r26
     760:	5b 2b       	or	r21, r27
     762:	ea 18       	sub	r14, r10
     764:	fb 08       	sbc	r15, r11
     766:	0c 09       	sbc	r16, r12
     768:	1d 09       	sbc	r17, r13
     76a:	b6 95       	lsr	r27
     76c:	a7 95       	ror	r26
     76e:	97 95       	ror	r25
     770:	87 95       	ror	r24
     772:	ee 0c       	add	r14, r14
     774:	ff 1c       	adc	r15, r15
     776:	00 1f       	adc	r16, r16
     778:	11 1f       	adc	r17, r17
     77a:	6f 5f       	subi	r22, 0xFF	; 255
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	6f 31       	cpi	r22, 0x1F	; 31
     780:	71 05       	cpc	r23, r1
     782:	31 f7       	brne	.-52     	; 0x750 <__divsf3+0xda>
     784:	da 01       	movw	r26, r20
     786:	c9 01       	movw	r24, r18
     788:	8f 77       	andi	r24, 0x7F	; 127
     78a:	90 70       	andi	r25, 0x00	; 0
     78c:	a0 70       	andi	r26, 0x00	; 0
     78e:	b0 70       	andi	r27, 0x00	; 0
     790:	80 34       	cpi	r24, 0x40	; 64
     792:	91 05       	cpc	r25, r1
     794:	a1 05       	cpc	r26, r1
     796:	b1 05       	cpc	r27, r1
     798:	61 f4       	brne	.+24     	; 0x7b2 <__divsf3+0x13c>
     79a:	27 fd       	sbrc	r18, 7
     79c:	0a c0       	rjmp	.+20     	; 0x7b2 <__divsf3+0x13c>
     79e:	e1 14       	cp	r14, r1
     7a0:	f1 04       	cpc	r15, r1
     7a2:	01 05       	cpc	r16, r1
     7a4:	11 05       	cpc	r17, r1
     7a6:	29 f0       	breq	.+10     	; 0x7b2 <__divsf3+0x13c>
     7a8:	20 5c       	subi	r18, 0xC0	; 192
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	4f 4f       	sbci	r20, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	20 78       	andi	r18, 0x80	; 128
     7b2:	2d 87       	std	Y+13, r18	; 0x0d
     7b4:	3e 87       	std	Y+14, r19	; 0x0e
     7b6:	4f 87       	std	Y+15, r20	; 0x0f
     7b8:	58 8b       	std	Y+16, r21	; 0x10
     7ba:	be 01       	movw	r22, r28
     7bc:	67 5f       	subi	r22, 0xF7	; 247
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	cb 01       	movw	r24, r22
     7c2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__pack_f>
     7c6:	68 96       	adiw	r28, 0x18	; 24
     7c8:	ea e0       	ldi	r30, 0x0A	; 10
     7ca:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__epilogue_restores__+0x10>

000007ce <__gtsf2>:
     7ce:	a8 e1       	ldi	r26, 0x18	; 24
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	ed ee       	ldi	r30, 0xED	; 237
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x18>
     7da:	69 83       	std	Y+1, r22	; 0x01
     7dc:	7a 83       	std	Y+2, r23	; 0x02
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	9c 83       	std	Y+4, r25	; 0x04
     7e2:	2d 83       	std	Y+5, r18	; 0x05
     7e4:	3e 83       	std	Y+6, r19	; 0x06
     7e6:	4f 83       	std	Y+7, r20	; 0x07
     7e8:	58 87       	std	Y+8, r21	; 0x08
     7ea:	89 e0       	ldi	r24, 0x09	; 9
     7ec:	e8 2e       	mov	r14, r24
     7ee:	f1 2c       	mov	r15, r1
     7f0:	ec 0e       	add	r14, r28
     7f2:	fd 1e       	adc	r15, r29
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	b7 01       	movw	r22, r14
     7fa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     7fe:	8e 01       	movw	r16, r28
     800:	0f 5e       	subi	r16, 0xEF	; 239
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	ce 01       	movw	r24, r28
     806:	05 96       	adiw	r24, 0x05	; 5
     808:	b8 01       	movw	r22, r16
     80a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	40 f0       	brcs	.+16     	; 0x824 <__gtsf2+0x56>
     814:	89 89       	ldd	r24, Y+17	; 0x11
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	28 f0       	brcs	.+10     	; 0x824 <__gtsf2+0x56>
     81a:	c7 01       	movw	r24, r14
     81c:	b8 01       	movw	r22, r16
     81e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fpcmp_parts_f>
     822:	01 c0       	rjmp	.+2      	; 0x826 <__gtsf2+0x58>
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	68 96       	adiw	r28, 0x18	; 24
     828:	e6 e0       	ldi	r30, 0x06	; 6
     82a:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x18>

0000082e <__gesf2>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x18>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	e8 2e       	mov	r14, r24
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	40 f0       	brcs	.+16     	; 0x884 <__gesf2+0x56>
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	28 f0       	brcs	.+10     	; 0x884 <__gesf2+0x56>
     87a:	c7 01       	movw	r24, r14
     87c:	b8 01       	movw	r22, r16
     87e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fpcmp_parts_f>
     882:	01 c0       	rjmp	.+2      	; 0x886 <__gesf2+0x58>
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	68 96       	adiw	r28, 0x18	; 24
     888:	e6 e0       	ldi	r30, 0x06	; 6
     88a:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x18>

0000088e <__ltsf2>:
     88e:	a8 e1       	ldi	r26, 0x18	; 24
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ed e4       	ldi	r30, 0x4D	; 77
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x18>
     89a:	69 83       	std	Y+1, r22	; 0x01
     89c:	7a 83       	std	Y+2, r23	; 0x02
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	2d 83       	std	Y+5, r18	; 0x05
     8a4:	3e 83       	std	Y+6, r19	; 0x06
     8a6:	4f 83       	std	Y+7, r20	; 0x07
     8a8:	58 87       	std	Y+8, r21	; 0x08
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	e8 2e       	mov	r14, r24
     8ae:	f1 2c       	mov	r15, r1
     8b0:	ec 0e       	add	r14, r28
     8b2:	fd 1e       	adc	r15, r29
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	b7 01       	movw	r22, r14
     8ba:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     8be:	8e 01       	movw	r16, r28
     8c0:	0f 5e       	subi	r16, 0xEF	; 239
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	ce 01       	movw	r24, r28
     8c6:	05 96       	adiw	r24, 0x05	; 5
     8c8:	b8 01       	movw	r22, r16
     8ca:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	40 f0       	brcs	.+16     	; 0x8e4 <__ltsf2+0x56>
     8d4:	89 89       	ldd	r24, Y+17	; 0x11
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	28 f0       	brcs	.+10     	; 0x8e4 <__ltsf2+0x56>
     8da:	c7 01       	movw	r24, r14
     8dc:	b8 01       	movw	r22, r16
     8de:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fpcmp_parts_f>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__ltsf2+0x58>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	68 96       	adiw	r28, 0x18	; 24
     8e8:	e6 e0       	ldi	r30, 0x06	; 6
     8ea:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x18>

000008ee <__floatsisf>:
     8ee:	a8 e0       	ldi	r26, 0x08	; 8
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	ed e7       	ldi	r30, 0x7D	; 125
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__prologue_saves__+0x12>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	da 01       	movw	r26, r20
     904:	c9 01       	movw	r24, r18
     906:	88 27       	eor	r24, r24
     908:	b7 fd       	sbrc	r27, 7
     90a:	83 95       	inc	r24
     90c:	99 27       	eor	r25, r25
     90e:	aa 27       	eor	r26, r26
     910:	bb 27       	eor	r27, r27
     912:	b8 2e       	mov	r11, r24
     914:	21 15       	cp	r18, r1
     916:	31 05       	cpc	r19, r1
     918:	41 05       	cpc	r20, r1
     91a:	51 05       	cpc	r21, r1
     91c:	19 f4       	brne	.+6      	; 0x924 <__floatsisf+0x36>
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	3a c0       	rjmp	.+116    	; 0x998 <__floatsisf+0xaa>
     924:	88 23       	and	r24, r24
     926:	a9 f0       	breq	.+42     	; 0x952 <__floatsisf+0x64>
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	38 07       	cpc	r19, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	48 07       	cpc	r20, r24
     932:	80 e8       	ldi	r24, 0x80	; 128
     934:	58 07       	cpc	r21, r24
     936:	29 f4       	brne	.+10     	; 0x942 <__floatsisf+0x54>
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	9f ec       	ldi	r25, 0xCF	; 207
     940:	30 c0       	rjmp	.+96     	; 0x9a2 <__floatsisf+0xb4>
     942:	ee 24       	eor	r14, r14
     944:	ff 24       	eor	r15, r15
     946:	87 01       	movw	r16, r14
     948:	e2 1a       	sub	r14, r18
     94a:	f3 0a       	sbc	r15, r19
     94c:	04 0b       	sbc	r16, r20
     94e:	15 0b       	sbc	r17, r21
     950:	02 c0       	rjmp	.+4      	; 0x956 <__floatsisf+0x68>
     952:	79 01       	movw	r14, r18
     954:	8a 01       	movw	r16, r20
     956:	8e e1       	ldi	r24, 0x1E	; 30
     958:	c8 2e       	mov	r12, r24
     95a:	d1 2c       	mov	r13, r1
     95c:	dc 82       	std	Y+4, r13	; 0x04
     95e:	cb 82       	std	Y+3, r12	; 0x03
     960:	ed 82       	std	Y+5, r14	; 0x05
     962:	fe 82       	std	Y+6, r15	; 0x06
     964:	0f 83       	std	Y+7, r16	; 0x07
     966:	18 87       	std	Y+8, r17	; 0x08
     968:	c8 01       	movw	r24, r16
     96a:	b7 01       	movw	r22, r14
     96c:	0e 94 a2 05 	call	0xb44	; 0xb44 <__clzsi2>
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	18 16       	cp	r1, r24
     974:	19 06       	cpc	r1, r25
     976:	84 f4       	brge	.+32     	; 0x998 <__floatsisf+0xaa>
     978:	08 2e       	mov	r0, r24
     97a:	04 c0       	rjmp	.+8      	; 0x984 <__floatsisf+0x96>
     97c:	ee 0c       	add	r14, r14
     97e:	ff 1c       	adc	r15, r15
     980:	00 1f       	adc	r16, r16
     982:	11 1f       	adc	r17, r17
     984:	0a 94       	dec	r0
     986:	d2 f7       	brpl	.-12     	; 0x97c <__floatsisf+0x8e>
     988:	ed 82       	std	Y+5, r14	; 0x05
     98a:	fe 82       	std	Y+6, r15	; 0x06
     98c:	0f 83       	std	Y+7, r16	; 0x07
     98e:	18 87       	std	Y+8, r17	; 0x08
     990:	c8 1a       	sub	r12, r24
     992:	d9 0a       	sbc	r13, r25
     994:	dc 82       	std	Y+4, r13	; 0x04
     996:	cb 82       	std	Y+3, r12	; 0x03
     998:	ba 82       	std	Y+2, r11	; 0x02
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__pack_f>
     9a2:	28 96       	adiw	r28, 0x08	; 8
     9a4:	e9 e0       	ldi	r30, 0x09	; 9
     9a6:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__epilogue_restores__+0x12>

000009aa <__fixsfsi>:
     9aa:	ac e0       	ldi	r26, 0x0C	; 12
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	eb ed       	ldi	r30, 0xDB	; 219
     9b0:	f4 e0       	ldi	r31, 0x04	; 4
     9b2:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__prologue_saves__+0x20>
     9b6:	69 83       	std	Y+1, r22	; 0x01
     9b8:	7a 83       	std	Y+2, r23	; 0x02
     9ba:	8b 83       	std	Y+3, r24	; 0x03
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	ce 01       	movw	r24, r28
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	be 01       	movw	r22, r28
     9c4:	6b 5f       	subi	r22, 0xFB	; 251
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__unpack_f>
     9cc:	8d 81       	ldd	r24, Y+5	; 0x05
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	61 f1       	breq	.+88     	; 0xa2a <__fixsfsi+0x80>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	50 f1       	brcs	.+84     	; 0xa2a <__fixsfsi+0x80>
     9d6:	84 30       	cpi	r24, 0x04	; 4
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <__fixsfsi+0x38>
     9da:	8e 81       	ldd	r24, Y+6	; 0x06
     9dc:	88 23       	and	r24, r24
     9de:	51 f1       	breq	.+84     	; 0xa34 <__fixsfsi+0x8a>
     9e0:	2e c0       	rjmp	.+92     	; 0xa3e <__fixsfsi+0x94>
     9e2:	2f 81       	ldd	r18, Y+7	; 0x07
     9e4:	38 85       	ldd	r19, Y+8	; 0x08
     9e6:	37 fd       	sbrc	r19, 7
     9e8:	20 c0       	rjmp	.+64     	; 0xa2a <__fixsfsi+0x80>
     9ea:	6e 81       	ldd	r22, Y+6	; 0x06
     9ec:	2f 31       	cpi	r18, 0x1F	; 31
     9ee:	31 05       	cpc	r19, r1
     9f0:	1c f0       	brlt	.+6      	; 0x9f8 <__fixsfsi+0x4e>
     9f2:	66 23       	and	r22, r22
     9f4:	f9 f0       	breq	.+62     	; 0xa34 <__fixsfsi+0x8a>
     9f6:	23 c0       	rjmp	.+70     	; 0xa3e <__fixsfsi+0x94>
     9f8:	8e e1       	ldi	r24, 0x1E	; 30
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	82 1b       	sub	r24, r18
     9fe:	93 0b       	sbc	r25, r19
     a00:	29 85       	ldd	r18, Y+9	; 0x09
     a02:	3a 85       	ldd	r19, Y+10	; 0x0a
     a04:	4b 85       	ldd	r20, Y+11	; 0x0b
     a06:	5c 85       	ldd	r21, Y+12	; 0x0c
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <__fixsfsi+0x68>
     a0a:	56 95       	lsr	r21
     a0c:	47 95       	ror	r20
     a0e:	37 95       	ror	r19
     a10:	27 95       	ror	r18
     a12:	8a 95       	dec	r24
     a14:	d2 f7       	brpl	.-12     	; 0xa0a <__fixsfsi+0x60>
     a16:	66 23       	and	r22, r22
     a18:	b1 f0       	breq	.+44     	; 0xa46 <__fixsfsi+0x9c>
     a1a:	50 95       	com	r21
     a1c:	40 95       	com	r20
     a1e:	30 95       	com	r19
     a20:	21 95       	neg	r18
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	4f 4f       	sbci	r20, 0xFF	; 255
     a26:	5f 4f       	sbci	r21, 0xFF	; 255
     a28:	0e c0       	rjmp	.+28     	; 0xa46 <__fixsfsi+0x9c>
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <__fixsfsi+0x9c>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	3f ef       	ldi	r19, 0xFF	; 255
     a38:	4f ef       	ldi	r20, 0xFF	; 255
     a3a:	5f e7       	ldi	r21, 0x7F	; 127
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__fixsfsi+0x9c>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e8       	ldi	r21, 0x80	; 128
     a46:	b9 01       	movw	r22, r18
     a48:	ca 01       	movw	r24, r20
     a4a:	2c 96       	adiw	r28, 0x0c	; 12
     a4c:	e2 e0       	ldi	r30, 0x02	; 2
     a4e:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__epilogue_restores__+0x20>

00000a52 <__floatunsisf>:
     a52:	a8 e0       	ldi	r26, 0x08	; 8
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ef e2       	ldi	r30, 0x2F	; 47
     a58:	f5 e0       	ldi	r31, 0x05	; 5
     a5a:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__prologue_saves__+0x10>
     a5e:	7b 01       	movw	r14, r22
     a60:	8c 01       	movw	r16, r24
     a62:	61 15       	cp	r22, r1
     a64:	71 05       	cpc	r23, r1
     a66:	81 05       	cpc	r24, r1
     a68:	91 05       	cpc	r25, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__floatunsisf+0x20>
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	60 c0       	rjmp	.+192    	; 0xb32 <__floatunsisf+0xe0>
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	8e e1       	ldi	r24, 0x1E	; 30
     a78:	c8 2e       	mov	r12, r24
     a7a:	d1 2c       	mov	r13, r1
     a7c:	dc 82       	std	Y+4, r13	; 0x04
     a7e:	cb 82       	std	Y+3, r12	; 0x03
     a80:	ed 82       	std	Y+5, r14	; 0x05
     a82:	fe 82       	std	Y+6, r15	; 0x06
     a84:	0f 83       	std	Y+7, r16	; 0x07
     a86:	18 87       	std	Y+8, r17	; 0x08
     a88:	c8 01       	movw	r24, r16
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 a2 05 	call	0xb44	; 0xb44 <__clzsi2>
     a90:	fc 01       	movw	r30, r24
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	f7 ff       	sbrs	r31, 7
     a96:	3b c0       	rjmp	.+118    	; 0xb0e <__floatunsisf+0xbc>
     a98:	22 27       	eor	r18, r18
     a9a:	33 27       	eor	r19, r19
     a9c:	2e 1b       	sub	r18, r30
     a9e:	3f 0b       	sbc	r19, r31
     aa0:	57 01       	movw	r10, r14
     aa2:	68 01       	movw	r12, r16
     aa4:	02 2e       	mov	r0, r18
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__floatunsisf+0x5e>
     aa8:	d6 94       	lsr	r13
     aaa:	c7 94       	ror	r12
     aac:	b7 94       	ror	r11
     aae:	a7 94       	ror	r10
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__floatunsisf+0x56>
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	04 c0       	rjmp	.+8      	; 0xace <__floatunsisf+0x7c>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	aa 1f       	adc	r26, r26
     acc:	bb 1f       	adc	r27, r27
     ace:	2a 95       	dec	r18
     ad0:	d2 f7       	brpl	.-12     	; 0xac6 <__floatunsisf+0x74>
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	a1 09       	sbc	r26, r1
     ad6:	b1 09       	sbc	r27, r1
     ad8:	8e 21       	and	r24, r14
     ada:	9f 21       	and	r25, r15
     adc:	a0 23       	and	r26, r16
     ade:	b1 23       	and	r27, r17
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <__floatunsisf+0x9e>
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	4a 29       	or	r20, r10
     af2:	5b 29       	or	r21, r11
     af4:	6c 29       	or	r22, r12
     af6:	7d 29       	or	r23, r13
     af8:	4d 83       	std	Y+5, r20	; 0x05
     afa:	5e 83       	std	Y+6, r21	; 0x06
     afc:	6f 83       	std	Y+7, r22	; 0x07
     afe:	78 87       	std	Y+8, r23	; 0x08
     b00:	8e e1       	ldi	r24, 0x1E	; 30
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	8e 1b       	sub	r24, r30
     b06:	9f 0b       	sbc	r25, r31
     b08:	9c 83       	std	Y+4, r25	; 0x04
     b0a:	8b 83       	std	Y+3, r24	; 0x03
     b0c:	12 c0       	rjmp	.+36     	; 0xb32 <__floatunsisf+0xe0>
     b0e:	30 97       	sbiw	r30, 0x00	; 0
     b10:	81 f0       	breq	.+32     	; 0xb32 <__floatunsisf+0xe0>
     b12:	0e 2e       	mov	r0, r30
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__floatunsisf+0xcc>
     b16:	ee 0c       	add	r14, r14
     b18:	ff 1c       	adc	r15, r15
     b1a:	00 1f       	adc	r16, r16
     b1c:	11 1f       	adc	r17, r17
     b1e:	0a 94       	dec	r0
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__floatunsisf+0xc4>
     b22:	ed 82       	std	Y+5, r14	; 0x05
     b24:	fe 82       	std	Y+6, r15	; 0x06
     b26:	0f 83       	std	Y+7, r16	; 0x07
     b28:	18 87       	std	Y+8, r17	; 0x08
     b2a:	ce 1a       	sub	r12, r30
     b2c:	df 0a       	sbc	r13, r31
     b2e:	dc 82       	std	Y+4, r13	; 0x04
     b30:	cb 82       	std	Y+3, r12	; 0x03
     b32:	1a 82       	std	Y+2, r1	; 0x02
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__pack_f>
     b3c:	28 96       	adiw	r28, 0x08	; 8
     b3e:	ea e0       	ldi	r30, 0x0A	; 10
     b40:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__epilogue_restores__+0x10>

00000b44 <__clzsi2>:
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	7b 01       	movw	r14, r22
     b4e:	8c 01       	movw	r16, r24
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	e8 16       	cp	r14, r24
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	f8 06       	cpc	r15, r24
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	08 07       	cpc	r16, r24
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	18 07       	cpc	r17, r24
     b60:	88 f4       	brcc	.+34     	; 0xb84 <__clzsi2+0x40>
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	e8 16       	cp	r14, r24
     b66:	f1 04       	cpc	r15, r1
     b68:	01 05       	cpc	r16, r1
     b6a:	11 05       	cpc	r17, r1
     b6c:	31 f0       	breq	.+12     	; 0xb7a <__clzsi2+0x36>
     b6e:	28 f0       	brcs	.+10     	; 0xb7a <__clzsi2+0x36>
     b70:	88 e0       	ldi	r24, 0x08	; 8
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	17 c0       	rjmp	.+46     	; 0xba8 <__clzsi2+0x64>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	12 c0       	rjmp	.+36     	; 0xba8 <__clzsi2+0x64>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	e8 16       	cp	r14, r24
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	f8 06       	cpc	r15, r24
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	08 07       	cpc	r16, r24
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	18 07       	cpc	r17, r24
     b94:	28 f0       	brcs	.+10     	; 0xba0 <__clzsi2+0x5c>
     b96:	88 e1       	ldi	r24, 0x18	; 24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__clzsi2+0x64>
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a0 e0       	ldi	r26, 0x00	; 0
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	20 e2       	ldi	r18, 0x20	; 32
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	28 1b       	sub	r18, r24
     bb2:	39 0b       	sbc	r19, r25
     bb4:	4a 0b       	sbc	r20, r26
     bb6:	5b 0b       	sbc	r21, r27
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <__clzsi2+0x7e>
     bba:	16 95       	lsr	r17
     bbc:	07 95       	ror	r16
     bbe:	f7 94       	ror	r15
     bc0:	e7 94       	ror	r14
     bc2:	8a 95       	dec	r24
     bc4:	d2 f7       	brpl	.-12     	; 0xbba <__clzsi2+0x76>
     bc6:	f7 01       	movw	r30, r14
     bc8:	e2 5d       	subi	r30, 0xD2	; 210
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	80 81       	ld	r24, Z
     bce:	28 1b       	sub	r18, r24
     bd0:	31 09       	sbc	r19, r1
     bd2:	41 09       	sbc	r20, r1
     bd4:	51 09       	sbc	r21, r1
     bd6:	c9 01       	movw	r24, r18
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	08 95       	ret

00000be2 <__pack_f>:
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	fc 01       	movw	r30, r24
     bee:	e4 80       	ldd	r14, Z+4	; 0x04
     bf0:	f5 80       	ldd	r15, Z+5	; 0x05
     bf2:	06 81       	ldd	r16, Z+6	; 0x06
     bf4:	17 81       	ldd	r17, Z+7	; 0x07
     bf6:	d1 80       	ldd	r13, Z+1	; 0x01
     bf8:	80 81       	ld	r24, Z
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	48 f4       	brcc	.+18     	; 0xc10 <__pack_f+0x2e>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	a0 e1       	ldi	r26, 0x10	; 16
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e8 2a       	or	r14, r24
     c08:	f9 2a       	or	r15, r25
     c0a:	0a 2b       	or	r16, r26
     c0c:	1b 2b       	or	r17, r27
     c0e:	a5 c0       	rjmp	.+330    	; 0xd5a <__pack_f+0x178>
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	09 f4       	brne	.+2      	; 0xc16 <__pack_f+0x34>
     c14:	9f c0       	rjmp	.+318    	; 0xd54 <__pack_f+0x172>
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	21 f4       	brne	.+8      	; 0xc22 <__pack_f+0x40>
     c1a:	ee 24       	eor	r14, r14
     c1c:	ff 24       	eor	r15, r15
     c1e:	87 01       	movw	r16, r14
     c20:	05 c0       	rjmp	.+10     	; 0xc2c <__pack_f+0x4a>
     c22:	e1 14       	cp	r14, r1
     c24:	f1 04       	cpc	r15, r1
     c26:	01 05       	cpc	r16, r1
     c28:	11 05       	cpc	r17, r1
     c2a:	19 f4       	brne	.+6      	; 0xc32 <__pack_f+0x50>
     c2c:	e0 e0       	ldi	r30, 0x00	; 0
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	96 c0       	rjmp	.+300    	; 0xd5e <__pack_f+0x17c>
     c32:	62 81       	ldd	r22, Z+2	; 0x02
     c34:	73 81       	ldd	r23, Z+3	; 0x03
     c36:	9f ef       	ldi	r25, 0xFF	; 255
     c38:	62 38       	cpi	r22, 0x82	; 130
     c3a:	79 07       	cpc	r23, r25
     c3c:	0c f0       	brlt	.+2      	; 0xc40 <__pack_f+0x5e>
     c3e:	5b c0       	rjmp	.+182    	; 0xcf6 <__pack_f+0x114>
     c40:	22 e8       	ldi	r18, 0x82	; 130
     c42:	3f ef       	ldi	r19, 0xFF	; 255
     c44:	26 1b       	sub	r18, r22
     c46:	37 0b       	sbc	r19, r23
     c48:	2a 31       	cpi	r18, 0x1A	; 26
     c4a:	31 05       	cpc	r19, r1
     c4c:	2c f0       	brlt	.+10     	; 0xc58 <__pack_f+0x76>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	2a c0       	rjmp	.+84     	; 0xcac <__pack_f+0xca>
     c58:	b8 01       	movw	r22, r16
     c5a:	a7 01       	movw	r20, r14
     c5c:	02 2e       	mov	r0, r18
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <__pack_f+0x86>
     c60:	76 95       	lsr	r23
     c62:	67 95       	ror	r22
     c64:	57 95       	ror	r21
     c66:	47 95       	ror	r20
     c68:	0a 94       	dec	r0
     c6a:	d2 f7       	brpl	.-12     	; 0xc60 <__pack_f+0x7e>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__pack_f+0x9c>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	aa 1f       	adc	r26, r26
     c7c:	bb 1f       	adc	r27, r27
     c7e:	2a 95       	dec	r18
     c80:	d2 f7       	brpl	.-12     	; 0xc76 <__pack_f+0x94>
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	a1 09       	sbc	r26, r1
     c86:	b1 09       	sbc	r27, r1
     c88:	8e 21       	and	r24, r14
     c8a:	9f 21       	and	r25, r15
     c8c:	a0 23       	and	r26, r16
     c8e:	b1 23       	and	r27, r17
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	a1 05       	cpc	r26, r1
     c94:	b1 05       	cpc	r27, r1
     c96:	21 f0       	breq	.+8      	; 0xca0 <__pack_f+0xbe>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	a0 e0       	ldi	r26, 0x00	; 0
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	9a 01       	movw	r18, r20
     ca2:	ab 01       	movw	r20, r22
     ca4:	28 2b       	or	r18, r24
     ca6:	39 2b       	or	r19, r25
     ca8:	4a 2b       	or	r20, r26
     caa:	5b 2b       	or	r21, r27
     cac:	da 01       	movw	r26, r20
     cae:	c9 01       	movw	r24, r18
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	a0 70       	andi	r26, 0x00	; 0
     cb6:	b0 70       	andi	r27, 0x00	; 0
     cb8:	80 34       	cpi	r24, 0x40	; 64
     cba:	91 05       	cpc	r25, r1
     cbc:	a1 05       	cpc	r26, r1
     cbe:	b1 05       	cpc	r27, r1
     cc0:	39 f4       	brne	.+14     	; 0xcd0 <__pack_f+0xee>
     cc2:	27 ff       	sbrs	r18, 7
     cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <__pack_f+0xf6>
     cc6:	20 5c       	subi	r18, 0xC0	; 192
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	4f 4f       	sbci	r20, 0xFF	; 255
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <__pack_f+0xf6>
     cd0:	21 5c       	subi	r18, 0xC1	; 193
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	4f 4f       	sbci	r20, 0xFF	; 255
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	e0 e0       	ldi	r30, 0x00	; 0
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	20 30       	cpi	r18, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	3a 07       	cpc	r19, r26
     ce2:	a0 e0       	ldi	r26, 0x00	; 0
     ce4:	4a 07       	cpc	r20, r26
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	5a 07       	cpc	r21, r26
     cea:	10 f0       	brcs	.+4      	; 0xcf0 <__pack_f+0x10e>
     cec:	e1 e0       	ldi	r30, 0x01	; 1
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	79 01       	movw	r14, r18
     cf2:	8a 01       	movw	r16, r20
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <__pack_f+0x162>
     cf6:	60 38       	cpi	r22, 0x80	; 128
     cf8:	71 05       	cpc	r23, r1
     cfa:	64 f5       	brge	.+88     	; 0xd54 <__pack_f+0x172>
     cfc:	fb 01       	movw	r30, r22
     cfe:	e1 58       	subi	r30, 0x81	; 129
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	d8 01       	movw	r26, r16
     d04:	c7 01       	movw	r24, r14
     d06:	8f 77       	andi	r24, 0x7F	; 127
     d08:	90 70       	andi	r25, 0x00	; 0
     d0a:	a0 70       	andi	r26, 0x00	; 0
     d0c:	b0 70       	andi	r27, 0x00	; 0
     d0e:	80 34       	cpi	r24, 0x40	; 64
     d10:	91 05       	cpc	r25, r1
     d12:	a1 05       	cpc	r26, r1
     d14:	b1 05       	cpc	r27, r1
     d16:	39 f4       	brne	.+14     	; 0xd26 <__pack_f+0x144>
     d18:	e7 fe       	sbrs	r14, 7
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__pack_f+0x154>
     d1c:	80 e4       	ldi	r24, 0x40	; 64
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__pack_f+0x14c>
     d26:	8f e3       	ldi	r24, 0x3F	; 63
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 0e       	add	r14, r24
     d30:	f9 1e       	adc	r15, r25
     d32:	0a 1f       	adc	r16, r26
     d34:	1b 1f       	adc	r17, r27
     d36:	17 ff       	sbrs	r17, 7
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <__pack_f+0x162>
     d3a:	16 95       	lsr	r17
     d3c:	07 95       	ror	r16
     d3e:	f7 94       	ror	r15
     d40:	e7 94       	ror	r14
     d42:	31 96       	adiw	r30, 0x01	; 1
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	16 95       	lsr	r17
     d48:	07 95       	ror	r16
     d4a:	f7 94       	ror	r15
     d4c:	e7 94       	ror	r14
     d4e:	8a 95       	dec	r24
     d50:	d1 f7       	brne	.-12     	; 0xd46 <__pack_f+0x164>
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <__pack_f+0x17c>
     d54:	ee 24       	eor	r14, r14
     d56:	ff 24       	eor	r15, r15
     d58:	87 01       	movw	r16, r14
     d5a:	ef ef       	ldi	r30, 0xFF	; 255
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	6e 2f       	mov	r22, r30
     d60:	67 95       	ror	r22
     d62:	66 27       	eor	r22, r22
     d64:	67 95       	ror	r22
     d66:	90 2f       	mov	r25, r16
     d68:	9f 77       	andi	r25, 0x7F	; 127
     d6a:	d7 94       	ror	r13
     d6c:	dd 24       	eor	r13, r13
     d6e:	d7 94       	ror	r13
     d70:	8e 2f       	mov	r24, r30
     d72:	86 95       	lsr	r24
     d74:	49 2f       	mov	r20, r25
     d76:	46 2b       	or	r20, r22
     d78:	58 2f       	mov	r21, r24
     d7a:	5d 29       	or	r21, r13
     d7c:	b7 01       	movw	r22, r14
     d7e:	ca 01       	movw	r24, r20
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	08 95       	ret

00000d8c <__unpack_f>:
     d8c:	fc 01       	movw	r30, r24
     d8e:	db 01       	movw	r26, r22
     d90:	40 81       	ld	r20, Z
     d92:	51 81       	ldd	r21, Z+1	; 0x01
     d94:	22 81       	ldd	r18, Z+2	; 0x02
     d96:	62 2f       	mov	r22, r18
     d98:	6f 77       	andi	r22, 0x7F	; 127
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	22 1f       	adc	r18, r18
     d9e:	22 27       	eor	r18, r18
     da0:	22 1f       	adc	r18, r18
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	89 2f       	mov	r24, r25
     da6:	88 0f       	add	r24, r24
     da8:	82 2b       	or	r24, r18
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	99 1f       	adc	r25, r25
     db0:	99 27       	eor	r25, r25
     db2:	99 1f       	adc	r25, r25
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	9c 93       	st	X, r25
     db8:	11 97       	sbiw	r26, 0x01	; 1
     dba:	21 15       	cp	r18, r1
     dbc:	31 05       	cpc	r19, r1
     dbe:	a9 f5       	brne	.+106    	; 0xe2a <__unpack_f+0x9e>
     dc0:	41 15       	cp	r20, r1
     dc2:	51 05       	cpc	r21, r1
     dc4:	61 05       	cpc	r22, r1
     dc6:	71 05       	cpc	r23, r1
     dc8:	11 f4       	brne	.+4      	; 0xdce <__unpack_f+0x42>
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	37 c0       	rjmp	.+110    	; 0xe3c <__unpack_f+0xb0>
     dce:	82 e8       	ldi	r24, 0x82	; 130
     dd0:	9f ef       	ldi	r25, 0xFF	; 255
     dd2:	13 96       	adiw	r26, 0x03	; 3
     dd4:	9c 93       	st	X, r25
     dd6:	8e 93       	st	-X, r24
     dd8:	12 97       	sbiw	r26, 0x02	; 2
     dda:	9a 01       	movw	r18, r20
     ddc:	ab 01       	movw	r20, r22
     dde:	67 e0       	ldi	r22, 0x07	; 7
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	44 1f       	adc	r20, r20
     de6:	55 1f       	adc	r21, r21
     de8:	6a 95       	dec	r22
     dea:	d1 f7       	brne	.-12     	; 0xde0 <__unpack_f+0x54>
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	8c 93       	st	X, r24
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <__unpack_f+0x80>
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	44 1f       	adc	r20, r20
     df8:	55 1f       	adc	r21, r21
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	8d 91       	ld	r24, X+
     dfe:	9c 91       	ld	r25, X
     e00:	13 97       	sbiw	r26, 0x03	; 3
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	13 96       	adiw	r26, 0x03	; 3
     e06:	9c 93       	st	X, r25
     e08:	8e 93       	st	-X, r24
     e0a:	12 97       	sbiw	r26, 0x02	; 2
     e0c:	20 30       	cpi	r18, 0x00	; 0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	38 07       	cpc	r19, r24
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	48 07       	cpc	r20, r24
     e16:	80 e4       	ldi	r24, 0x40	; 64
     e18:	58 07       	cpc	r21, r24
     e1a:	58 f3       	brcs	.-42     	; 0xdf2 <__unpack_f+0x66>
     e1c:	14 96       	adiw	r26, 0x04	; 4
     e1e:	2d 93       	st	X+, r18
     e20:	3d 93       	st	X+, r19
     e22:	4d 93       	st	X+, r20
     e24:	5c 93       	st	X, r21
     e26:	17 97       	sbiw	r26, 0x07	; 7
     e28:	08 95       	ret
     e2a:	2f 3f       	cpi	r18, 0xFF	; 255
     e2c:	31 05       	cpc	r19, r1
     e2e:	79 f4       	brne	.+30     	; 0xe4e <__unpack_f+0xc2>
     e30:	41 15       	cp	r20, r1
     e32:	51 05       	cpc	r21, r1
     e34:	61 05       	cpc	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	19 f4       	brne	.+6      	; 0xe40 <__unpack_f+0xb4>
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	8c 93       	st	X, r24
     e3e:	08 95       	ret
     e40:	64 ff       	sbrs	r22, 4
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <__unpack_f+0xbe>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	8c 93       	st	X, r24
     e48:	12 c0       	rjmp	.+36     	; 0xe6e <__unpack_f+0xe2>
     e4a:	1c 92       	st	X, r1
     e4c:	10 c0       	rjmp	.+32     	; 0xe6e <__unpack_f+0xe2>
     e4e:	2f 57       	subi	r18, 0x7F	; 127
     e50:	30 40       	sbci	r19, 0x00	; 0
     e52:	13 96       	adiw	r26, 0x03	; 3
     e54:	3c 93       	st	X, r19
     e56:	2e 93       	st	-X, r18
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	8c 93       	st	X, r24
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	44 0f       	add	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	66 1f       	adc	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	8a 95       	dec	r24
     e6a:	d1 f7       	brne	.-12     	; 0xe60 <__unpack_f+0xd4>
     e6c:	70 64       	ori	r23, 0x40	; 64
     e6e:	14 96       	adiw	r26, 0x04	; 4
     e70:	4d 93       	st	X+, r20
     e72:	5d 93       	st	X+, r21
     e74:	6d 93       	st	X+, r22
     e76:	7c 93       	st	X, r23
     e78:	17 97       	sbiw	r26, 0x07	; 7
     e7a:	08 95       	ret

00000e7c <__fpcmp_parts_f>:
     e7c:	1f 93       	push	r17
     e7e:	dc 01       	movw	r26, r24
     e80:	fb 01       	movw	r30, r22
     e82:	9c 91       	ld	r25, X
     e84:	92 30       	cpi	r25, 0x02	; 2
     e86:	08 f4       	brcc	.+2      	; 0xe8a <__fpcmp_parts_f+0xe>
     e88:	47 c0       	rjmp	.+142    	; 0xf18 <__fpcmp_parts_f+0x9c>
     e8a:	80 81       	ld	r24, Z
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <__fpcmp_parts_f+0x16>
     e90:	43 c0       	rjmp	.+134    	; 0xf18 <__fpcmp_parts_f+0x9c>
     e92:	94 30       	cpi	r25, 0x04	; 4
     e94:	51 f4       	brne	.+20     	; 0xeaa <__fpcmp_parts_f+0x2e>
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	1c 91       	ld	r17, X
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	99 f5       	brne	.+102    	; 0xf04 <__fpcmp_parts_f+0x88>
     e9e:	81 81       	ldd	r24, Z+1	; 0x01
     ea0:	68 2f       	mov	r22, r24
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	61 1b       	sub	r22, r17
     ea6:	71 09       	sbc	r23, r1
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <__fpcmp_parts_f+0xac>
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	21 f0       	breq	.+8      	; 0xeb6 <__fpcmp_parts_f+0x3a>
     eae:	92 30       	cpi	r25, 0x02	; 2
     eb0:	31 f4       	brne	.+12     	; 0xebe <__fpcmp_parts_f+0x42>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	b9 f1       	breq	.+110    	; 0xf24 <__fpcmp_parts_f+0xa8>
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	88 23       	and	r24, r24
     eba:	89 f1       	breq	.+98     	; 0xf1e <__fpcmp_parts_f+0xa2>
     ebc:	2d c0       	rjmp	.+90     	; 0xf18 <__fpcmp_parts_f+0x9c>
     ebe:	11 96       	adiw	r26, 0x01	; 1
     ec0:	1c 91       	ld	r17, X
     ec2:	11 97       	sbiw	r26, 0x01	; 1
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	f1 f0       	breq	.+60     	; 0xf04 <__fpcmp_parts_f+0x88>
     ec8:	81 81       	ldd	r24, Z+1	; 0x01
     eca:	18 17       	cp	r17, r24
     ecc:	d9 f4       	brne	.+54     	; 0xf04 <__fpcmp_parts_f+0x88>
     ece:	12 96       	adiw	r26, 0x02	; 2
     ed0:	2d 91       	ld	r18, X+
     ed2:	3c 91       	ld	r19, X
     ed4:	13 97       	sbiw	r26, 0x03	; 3
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	82 17       	cp	r24, r18
     edc:	93 07       	cpc	r25, r19
     ede:	94 f0       	brlt	.+36     	; 0xf04 <__fpcmp_parts_f+0x88>
     ee0:	28 17       	cp	r18, r24
     ee2:	39 07       	cpc	r19, r25
     ee4:	bc f0       	brlt	.+46     	; 0xf14 <__fpcmp_parts_f+0x98>
     ee6:	14 96       	adiw	r26, 0x04	; 4
     ee8:	8d 91       	ld	r24, X+
     eea:	9d 91       	ld	r25, X+
     eec:	0d 90       	ld	r0, X+
     eee:	bc 91       	ld	r27, X
     ef0:	a0 2d       	mov	r26, r0
     ef2:	24 81       	ldd	r18, Z+4	; 0x04
     ef4:	35 81       	ldd	r19, Z+5	; 0x05
     ef6:	46 81       	ldd	r20, Z+6	; 0x06
     ef8:	57 81       	ldd	r21, Z+7	; 0x07
     efa:	28 17       	cp	r18, r24
     efc:	39 07       	cpc	r19, r25
     efe:	4a 07       	cpc	r20, r26
     f00:	5b 07       	cpc	r21, r27
     f02:	18 f4       	brcc	.+6      	; 0xf0a <__fpcmp_parts_f+0x8e>
     f04:	11 23       	and	r17, r17
     f06:	41 f0       	breq	.+16     	; 0xf18 <__fpcmp_parts_f+0x9c>
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <__fpcmp_parts_f+0xa2>
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	a4 07       	cpc	r26, r20
     f10:	b5 07       	cpc	r27, r21
     f12:	40 f4       	brcc	.+16     	; 0xf24 <__fpcmp_parts_f+0xa8>
     f14:	11 23       	and	r17, r17
     f16:	19 f0       	breq	.+6      	; 0xf1e <__fpcmp_parts_f+0xa2>
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <__fpcmp_parts_f+0xac>
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
     f20:	7f ef       	ldi	r23, 0xFF	; 255
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <__fpcmp_parts_f+0xac>
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	cb 01       	movw	r24, r22
     f2a:	1f 91       	pop	r17
     f2c:	08 95       	ret

00000f2e <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <_ZN5Print5writeEPKc+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <_ZN5Print5writeEPKc+0x8>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	7c 83       	std	Y+4, r23	; 0x04
     f40:	6b 83       	std	Y+3, r22	; 0x03
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <_ZN5Print5writeEPKc+0x3e>
{
  while (*str)
    write(*str++);
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	01 90       	ld	r0, Z+
     f4a:	f0 81       	ld	r31, Z
     f4c:	e0 2d       	mov	r30, r0
     f4e:	20 81       	ld	r18, Z
     f50:	31 81       	ldd	r19, Z+1	; 0x01
     f52:	eb 81       	ldd	r30, Y+3	; 0x03
     f54:	fc 81       	ldd	r31, Y+4	; 0x04
     f56:	40 81       	ld	r20, Z
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	9c 83       	std	Y+4, r25	; 0x04
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	64 2f       	mov	r22, r20
     f68:	f9 01       	movw	r30, r18
     f6a:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
     f6c:	eb 81       	ldd	r30, Y+3	; 0x03
     f6e:	fc 81       	ldd	r31, Y+4	; 0x04
     f70:	80 81       	ld	r24, Z
     f72:	88 23       	and	r24, r24
     f74:	39 f7       	brne	.-50     	; 0xf44 <_ZN5Print5writeEPKc+0x16>
    write(*str++);
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	27 97       	sbiw	r28, 0x07	; 7
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	7c 83       	std	Y+4, r23	; 0x04
     f9e:	6b 83       	std	Y+3, r22	; 0x03
     fa0:	5e 83       	std	Y+6, r21	; 0x06
     fa2:	4d 83       	std	Y+5, r20	; 0x05
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <_ZN5Print5writeEPKhj+0x4a>
{
  while (size--)
    write(*buffer++);
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	01 90       	ld	r0, Z+
     fac:	f0 81       	ld	r31, Z
     fae:	e0 2d       	mov	r30, r0
     fb0:	20 81       	ld	r18, Z
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	eb 81       	ldd	r30, Y+3	; 0x03
     fb6:	fc 81       	ldd	r31, Y+4	; 0x04
     fb8:	40 81       	ld	r20, Z
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	64 2f       	mov	r22, r20
     fca:	f9 01       	movw	r30, r18
     fcc:	09 95       	icall
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
     fce:	1f 82       	std	Y+7, r1	; 0x07
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	11 f0       	breq	.+4      	; 0xfdc <_ZN5Print5writeEPKhj+0x58>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	8f 83       	std	Y+7, r24	; 0x07
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8f 81       	ldd	r24, Y+7	; 0x07
     fe8:	88 23       	and	r24, r24
     fea:	e9 f6       	brne	.-70     	; 0xfa6 <_ZN5Print5writeEPKhj+0x22>
    write(*buffer++);
}
     fec:	27 96       	adiw	r28, 0x07	; 7
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <_ZN5Print5printEh>:

void Print::print(uint8_t b)
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <_ZN5Print5printEh+0x6>
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	6b 83       	std	Y+3, r22	; 0x03
{
  this->write(b);
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	01 90       	ld	r0, Z+
    101c:	f0 81       	ld	r31, Z
    101e:	e0 2d       	mov	r30, r0
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	6b 81       	ldd	r22, Y+3	; 0x03
    1026:	09 95       	icall
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <_ZN5Print5printEc>:

void Print::print(char c)
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <_ZN5Print5printEc+0x6>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6b 83       	std	Y+3, r22	; 0x03
{
  print((byte) c);
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	6b 81       	ldd	r22, Y+3	; 0x03
    104c:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN5Print5printEh>
}
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <_ZN5Print5printEPKc>:

void Print::print(const char str[])
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <_ZN5Print5printEPKc+0x6>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <_ZN5Print5printEPKc+0x8>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	7c 83       	std	Y+4, r23	; 0x04
    106e:	6b 83       	std	Y+3, r22	; 0x03
{
  write(str);
    1070:	e9 81       	ldd	r30, Y+1	; 0x01
    1072:	fa 81       	ldd	r31, Y+2	; 0x02
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	fc 01       	movw	r30, r24
    107a:	32 96       	adiw	r30, 0x02	; 2
    107c:	01 90       	ld	r0, Z+
    107e:	f0 81       	ld	r31, Z
    1080:	e0 2d       	mov	r30, r0
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	b9 01       	movw	r22, r18
    108c:	09 95       	icall
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <_ZN5Print7printlnEv>:
void Print::print(double n)
{
  printFloat(n, 2);
}

void Print::println(void)
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <_ZN5Print7printlnEv+0x6>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
{
  print('\r');
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	6d e0       	ldi	r22, 0x0D	; 13
    10b0:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
  print('\n');  
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	6a e0       	ldi	r22, 0x0A	; 10
    10ba:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <_ZN5Print7printlnEc>:

void Print::println(char c)
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <_ZN5Print7printlnEc+0x6>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	6b 83       	std	Y+3, r22	; 0x03
{
  print(c);
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	6b 81       	ldd	r22, Y+3	; 0x03
    10e0:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
  println();  
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <_ZN5Print7printlnEPKc>:

void Print::println(const char c[])
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <_ZN5Print7printlnEPKc+0x6>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <__stack+0x1>
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	7c 83       	std	Y+4, r23	; 0x04
    110a:	6b 83       	std	Y+3, r22	; 0x03
{
  print(c);
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	3c 81       	ldd	r19, Y+4	; 0x04
    1114:	b9 01       	movw	r22, r18
    1116:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN5Print5printEPKc>
  println();
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <_ZN5Print7printlnEh>:

void Print::println(uint8_t b)
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <_ZN5Print7printlnEh+0x6>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	6b 83       	std	Y+3, r22	; 0x03
{
  print(b);
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	6b 81       	ldd	r22, Y+3	; 0x03
    1148:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN5Print5printEh>
  println();
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <_ZN5Print11printNumberEmh>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	ac 97       	sbiw	r28, 0x2c	; 44
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	9e a3       	std	Y+38, r25	; 0x26
    117e:	8d a3       	std	Y+37, r24	; 0x25
    1180:	4f a3       	std	Y+39, r20	; 0x27
    1182:	58 a7       	std	Y+40, r21	; 0x28
    1184:	69 a7       	std	Y+41, r22	; 0x29
    1186:	7a a7       	std	Y+42, r23	; 0x2a
    1188:	2b a7       	std	Y+43, r18	; 0x2b
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;
    118a:	19 82       	std	Y+1, r1	; 0x01
    118c:	1a 82       	std	Y+2, r1	; 0x02
    118e:	1b 82       	std	Y+3, r1	; 0x03
    1190:	1c 82       	std	Y+4, r1	; 0x04

  if (n == 0) {
    1192:	8f a1       	ldd	r24, Y+39	; 0x27
    1194:	98 a5       	ldd	r25, Y+40	; 0x28
    1196:	a9 a5       	ldd	r26, Y+41	; 0x29
    1198:	ba a5       	ldd	r27, Y+42	; 0x2a
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	a1 05       	cpc	r26, r1
    119e:	b1 05       	cpc	r27, r1
    11a0:	f1 f5       	brne	.+124    	; 0x121e <_ZN5Print11printNumberEmh+0xbe>
    print('0');
    11a2:	8d a1       	ldd	r24, Y+37	; 0x25
    11a4:	9e a1       	ldd	r25, Y+38	; 0x26
    11a6:	60 e3       	ldi	r22, 0x30	; 48
    11a8:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
    11ac:	8e c0       	rjmp	.+284    	; 0x12ca <_ZN5Print11printNumberEmh+0x16a>
    return;
  } 

  while (n > 0) {
    buf[i++] = n % base;
    11ae:	e9 80       	ldd	r14, Y+1	; 0x01
    11b0:	fa 80       	ldd	r15, Y+2	; 0x02
    11b2:	0b 81       	ldd	r16, Y+3	; 0x03
    11b4:	1c 81       	ldd	r17, Y+4	; 0x04
    11b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	8f a1       	ldd	r24, Y+39	; 0x27
    11c2:	98 a5       	ldd	r25, Y+40	; 0x28
    11c4:	a9 a5       	ldd	r26, Y+41	; 0x29
    11c6:	ba a5       	ldd	r27, Y+42	; 0x2a
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	28 2f       	mov	r18, r24
    11d6:	ce 01       	movw	r24, r28
    11d8:	05 96       	adiw	r24, 0x05	; 5
    11da:	fc 01       	movw	r30, r24
    11dc:	ee 0d       	add	r30, r14
    11de:	ff 1d       	adc	r31, r15
    11e0:	20 83       	st	Z, r18
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	ab 81       	ldd	r26, Y+3	; 0x03
    11e8:	bc 81       	ldd	r27, Y+4	; 0x04
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	a1 1d       	adc	r26, r1
    11ee:	b1 1d       	adc	r27, r1
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	ab 83       	std	Y+3, r26	; 0x03
    11f6:	bc 83       	std	Y+4, r27	; 0x04
    n /= base;
    11f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	8f a1       	ldd	r24, Y+39	; 0x27
    1204:	98 a5       	ldd	r25, Y+40	; 0x28
    1206:	a9 a5       	ldd	r26, Y+41	; 0x29
    1208:	ba a5       	ldd	r27, Y+42	; 0x2a
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1212:	da 01       	movw	r26, r20
    1214:	c9 01       	movw	r24, r18
    1216:	8f a3       	std	Y+39, r24	; 0x27
    1218:	98 a7       	std	Y+40, r25	; 0x28
    121a:	a9 a7       	std	Y+41, r26	; 0x29
    121c:	ba a7       	std	Y+42, r27	; 0x2a
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    121e:	8f a1       	ldd	r24, Y+39	; 0x27
    1220:	98 a5       	ldd	r25, Y+40	; 0x28
    1222:	a9 a5       	ldd	r26, Y+41	; 0x29
    1224:	ba a5       	ldd	r27, Y+42	; 0x2a
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	a1 05       	cpc	r26, r1
    122a:	b1 05       	cpc	r27, r1
    122c:	09 f0       	breq	.+2      	; 0x1230 <_ZN5Print11printNumberEmh+0xd0>
    122e:	bf cf       	rjmp	.-130    	; 0x11ae <_ZN5Print11printNumberEmh+0x4e>
    1230:	43 c0       	rjmp	.+134    	; 0x12b8 <_ZN5Print11printNumberEmh+0x158>
  }

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	ab 81       	ldd	r26, Y+3	; 0x03
    1238:	bc 81       	ldd	r27, Y+4	; 0x04
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	a1 09       	sbc	r26, r1
    123e:	b1 09       	sbc	r27, r1
    1240:	9e 01       	movw	r18, r28
    1242:	2b 5f       	subi	r18, 0xFB	; 251
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	f9 01       	movw	r30, r18
    1248:	e8 0f       	add	r30, r24
    124a:	f9 1f       	adc	r31, r25
    124c:	80 81       	ld	r24, Z
    124e:	8a 30       	cpi	r24, 0x0A	; 10
    1250:	90 f4       	brcc	.+36     	; 0x1276 <_ZN5Print11printNumberEmh+0x116>
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	ab 81       	ldd	r26, Y+3	; 0x03
    1258:	bc 81       	ldd	r27, Y+4	; 0x04
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	a1 09       	sbc	r26, r1
    125e:	b1 09       	sbc	r27, r1
    1260:	9e 01       	movw	r18, r28
    1262:	2b 5f       	subi	r18, 0xFB	; 251
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	f9 01       	movw	r30, r18
    1268:	e8 0f       	add	r30, r24
    126a:	f9 1f       	adc	r31, r25
    126c:	80 81       	ld	r24, Z
    126e:	98 2f       	mov	r25, r24
    1270:	90 5d       	subi	r25, 0xD0	; 208
    1272:	9c a7       	std	Y+44, r25	; 0x2c
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <_ZN5Print11printNumberEmh+0x138>
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	ab 81       	ldd	r26, Y+3	; 0x03
    127c:	bc 81       	ldd	r27, Y+4	; 0x04
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	a1 09       	sbc	r26, r1
    1282:	b1 09       	sbc	r27, r1
    1284:	9e 01       	movw	r18, r28
    1286:	2b 5f       	subi	r18, 0xFB	; 251
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	f9 01       	movw	r30, r18
    128c:	e8 0f       	add	r30, r24
    128e:	f9 1f       	adc	r31, r25
    1290:	80 81       	ld	r24, Z
    1292:	98 2f       	mov	r25, r24
    1294:	99 5c       	subi	r25, 0xC9	; 201
    1296:	9c a7       	std	Y+44, r25	; 0x2c
    1298:	8d a1       	ldd	r24, Y+37	; 0x25
    129a:	9e a1       	ldd	r25, Y+38	; 0x26
    129c:	6c a5       	ldd	r22, Y+44	; 0x2c
    129e:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	ab 81       	ldd	r26, Y+3	; 0x03
    12a8:	bc 81       	ldd	r27, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	a1 09       	sbc	r26, r1
    12ae:	b1 09       	sbc	r27, r1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	ab 83       	std	Y+3, r26	; 0x03
    12b6:	bc 83       	std	Y+4, r27	; 0x04
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	ab 81       	ldd	r26, Y+3	; 0x03
    12be:	bc 81       	ldd	r27, Y+4	; 0x04
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	a1 05       	cpc	r26, r1
    12c4:	b1 05       	cpc	r27, r1
    12c6:	09 f0       	breq	.+2      	; 0x12ca <_ZN5Print11printNumberEmh+0x16a>
    12c8:	b4 cf       	rjmp	.-152    	; 0x1232 <_ZN5Print11printNumberEmh+0xd2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    12ca:	ac 96       	adiw	r28, 0x2c	; 44
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	08 95       	ret

000012e4 <_ZN5Print5printEm>:
    n = -n;
  }
  printNumber(n, 10);
}

void Print::print(unsigned long n)
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <_ZN5Print5printEm+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <_ZN5Print5printEm+0x8>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <_ZN5Print5printEm+0xa>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	4b 83       	std	Y+3, r20	; 0x03
    12f8:	5c 83       	std	Y+4, r21	; 0x04
    12fa:	6d 83       	std	Y+5, r22	; 0x05
    12fc:	7e 83       	std	Y+6, r23	; 0x06
{
  printNumber(n, 10);
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	4d 81       	ldd	r20, Y+5	; 0x05
    1308:	5e 81       	ldd	r21, Y+6	; 0x06
    130a:	ba 01       	movw	r22, r20
    130c:	a9 01       	movw	r20, r18
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN5Print11printNumberEmh>
}
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <_ZN5Print7printlnEm>:
{
  print(n);
  println();  
}

void Print::println(unsigned long n)
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <_ZN5Print7printlnEm+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <_ZN5Print7printlnEm+0x8>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <_ZN5Print7printlnEm+0xa>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	4b 83       	std	Y+3, r20	; 0x03
    133a:	5c 83       	std	Y+4, r21	; 0x04
    133c:	6d 83       	std	Y+5, r22	; 0x05
    133e:	7e 83       	std	Y+6, r23	; 0x06
{
  print(n);
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	2b 81       	ldd	r18, Y+3	; 0x03
    1346:	3c 81       	ldd	r19, Y+4	; 0x04
    1348:	4d 81       	ldd	r20, Y+5	; 0x05
    134a:	5e 81       	ldd	r21, Y+6	; 0x06
    134c:	ba 01       	movw	r22, r20
    134e:	a9 01       	movw	r20, r18
    1350:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_ZN5Print5printEm>
  println();  
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <_ZN5Print5printEj>:
void Print::print(int n)
{
  print((long) n);
}

void Print::print(unsigned int n)
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <_ZN5Print5printEj+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <_ZN5Print5printEj+0x8>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	7c 83       	std	Y+4, r23	; 0x04
    1380:	6b 83       	std	Y+3, r22	; 0x03
{
  print((unsigned long) n);
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	9c 01       	movw	r18, r24
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	ba 01       	movw	r22, r20
    1392:	a9 01       	movw	r20, r18
    1394:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_ZN5Print5printEm>
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <_ZN5Print7printlnEj>:
{
  print(n);
  println();
}

void Print::println(unsigned int n)
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <_ZN5Print7printlnEj+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <_ZN5Print7printlnEj+0x8>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	7c 83       	std	Y+4, r23	; 0x04
    13b8:	6b 83       	std	Y+3, r22	; 0x03
{
  print(n);
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	b9 01       	movw	r22, r18
    13c4:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN5Print5printEj>
  println();
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <_ZN5Print5printEl>:
void Print::print(unsigned int n)
{
  print((unsigned long) n);
}

void Print::print(long n)
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <_ZN5Print5printEl+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <_ZN5Print5printEl+0x8>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <_ZN5Print5printEl+0xa>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	4b 83       	std	Y+3, r20	; 0x03
    13f2:	5c 83       	std	Y+4, r21	; 0x04
    13f4:	6d 83       	std	Y+5, r22	; 0x05
    13f6:	7e 83       	std	Y+6, r23	; 0x06
{
  if (n < 0) {
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	ad 81       	ldd	r26, Y+5	; 0x05
    13fe:	be 81       	ldd	r27, Y+6	; 0x06
    1400:	bb 23       	and	r27, r27
    1402:	a4 f4       	brge	.+40     	; 0x142c <_ZN5Print5printEl+0x4e>
    print('-');
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	6d e2       	ldi	r22, 0x2D	; 45
    140a:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
    n = -n;
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	ad 81       	ldd	r26, Y+5	; 0x05
    1414:	be 81       	ldd	r27, Y+6	; 0x06
    1416:	b0 95       	com	r27
    1418:	a0 95       	com	r26
    141a:	90 95       	com	r25
    141c:	81 95       	neg	r24
    141e:	9f 4f       	sbci	r25, 0xFF	; 255
    1420:	af 4f       	sbci	r26, 0xFF	; 255
    1422:	bf 4f       	sbci	r27, 0xFF	; 255
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	ad 83       	std	Y+5, r26	; 0x05
    142a:	be 83       	std	Y+6, r27	; 0x06
  }
  printNumber(n, 10);
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	4d 81       	ldd	r20, Y+5	; 0x05
    1432:	5e 81       	ldd	r21, Y+6	; 0x06
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	ba 01       	movw	r22, r20
    143a:	a9 01       	movw	r20, r18
    143c:	2a e0       	ldi	r18, 0x0A	; 10
    143e:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN5Print11printNumberEmh>
}
    1442:	26 96       	adiw	r28, 0x06	; 6
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <_ZN5Print7printlnEl>:
{
  print(n);
  println();
}

void Print::println(long n)
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <_ZN5Print7printlnEl+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <_ZN5Print7printlnEl+0x8>
    145c:	00 d0       	rcall	.+0      	; 0x145e <_ZN5Print7printlnEl+0xa>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	4b 83       	std	Y+3, r20	; 0x03
    1468:	5c 83       	std	Y+4, r21	; 0x04
    146a:	6d 83       	std	Y+5, r22	; 0x05
    146c:	7e 83       	std	Y+6, r23	; 0x06
{
  print(n);
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	2b 81       	ldd	r18, Y+3	; 0x03
    1474:	3c 81       	ldd	r19, Y+4	; 0x04
    1476:	4d 81       	ldd	r20, Y+5	; 0x05
    1478:	5e 81       	ldd	r21, Y+6	; 0x06
    147a:	ba 01       	movw	r22, r20
    147c:	a9 01       	movw	r20, r18
    147e:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN5Print5printEl>
  println();  
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    148a:	26 96       	adiw	r28, 0x06	; 6
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <_ZN5Print5printEi>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(int n)
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <_ZN5Print5printEi+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <_ZN5Print5printEi+0x8>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	7c 83       	std	Y+4, r23	; 0x04
    14ae:	6b 83       	std	Y+3, r22	; 0x03
{
  print((long) n);
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	9c 01       	movw	r18, r24
    14b6:	44 27       	eor	r20, r20
    14b8:	37 fd       	sbrc	r19, 7
    14ba:	40 95       	com	r20
    14bc:	54 2f       	mov	r21, r20
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	ba 01       	movw	r22, r20
    14c4:	a9 01       	movw	r20, r18
    14c6:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN5Print5printEl>
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <_ZN5Print7printlnEi>:
{
  print(b);
  println();
}

void Print::println(int n)
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <_ZN5Print7printlnEi+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <_ZN5Print7printlnEi+0x8>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	7c 83       	std	Y+4, r23	; 0x04
    14ea:	6b 83       	std	Y+3, r22	; 0x03
{
  print(n);
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	b9 01       	movw	r22, r18
    14f6:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN5Print5printEi>
  println();
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <_ZN5Print5printEli>:
void Print::print(unsigned long n)
{
  printNumber(n, 10);
}

void Print::print(long n, int base)
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	28 97       	sbiw	r28, 0x08	; 8
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	4b 83       	std	Y+3, r20	; 0x03
    152a:	5c 83       	std	Y+4, r21	; 0x04
    152c:	6d 83       	std	Y+5, r22	; 0x05
    152e:	7e 83       	std	Y+6, r23	; 0x06
    1530:	38 87       	std	Y+8, r19	; 0x08
    1532:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0)
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	39 f4       	brne	.+14     	; 0x154a <_ZN5Print5printEli+0x3a>
    print((char) n);
    153c:	2b 81       	ldd	r18, Y+3	; 0x03
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	62 2f       	mov	r22, r18
    1544:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
    1548:	1c c0       	rjmp	.+56     	; 0x1582 <_ZN5Print5printEli+0x72>
  else if (base == 10)
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	98 85       	ldd	r25, Y+8	; 0x08
    154e:	8a 30       	cpi	r24, 0x0A	; 10
    1550:	91 05       	cpc	r25, r1
    1552:	59 f4       	brne	.+22     	; 0x156a <_ZN5Print5printEli+0x5a>
    print(n);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	2b 81       	ldd	r18, Y+3	; 0x03
    155a:	3c 81       	ldd	r19, Y+4	; 0x04
    155c:	4d 81       	ldd	r20, Y+5	; 0x05
    155e:	5e 81       	ldd	r21, Y+6	; 0x06
    1560:	ba 01       	movw	r22, r20
    1562:	a9 01       	movw	r20, r18
    1564:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN5Print5printEl>
    1568:	0c c0       	rjmp	.+24     	; 0x1582 <_ZN5Print5printEli+0x72>
  else
    printNumber(n, base);
    156a:	2b 81       	ldd	r18, Y+3	; 0x03
    156c:	3c 81       	ldd	r19, Y+4	; 0x04
    156e:	4d 81       	ldd	r20, Y+5	; 0x05
    1570:	5e 81       	ldd	r21, Y+6	; 0x06
    1572:	ef 81       	ldd	r30, Y+7	; 0x07
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	ba 01       	movw	r22, r20
    157a:	a9 01       	movw	r20, r18
    157c:	2e 2f       	mov	r18, r30
    157e:	0e 94 b0 08 	call	0x1160	; 0x1160 <_ZN5Print11printNumberEmh>
}
    1582:	28 96       	adiw	r28, 0x08	; 8
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <_ZN5Print7printlnEli>:
{
  print(n);
  println();  
}

void Print::println(long n, int base)
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	28 97       	sbiw	r28, 0x08	; 8
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	4b 83       	std	Y+3, r20	; 0x03
    15ae:	5c 83       	std	Y+4, r21	; 0x04
    15b0:	6d 83       	std	Y+5, r22	; 0x05
    15b2:	7e 83       	std	Y+6, r23	; 0x06
    15b4:	38 87       	std	Y+8, r19	; 0x08
    15b6:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, base);
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	2b 81       	ldd	r18, Y+3	; 0x03
    15be:	3c 81       	ldd	r19, Y+4	; 0x04
    15c0:	4d 81       	ldd	r20, Y+5	; 0x05
    15c2:	5e 81       	ldd	r21, Y+6	; 0x06
    15c4:	ef 81       	ldd	r30, Y+7	; 0x07
    15c6:	f8 85       	ldd	r31, Y+8	; 0x08
    15c8:	ba 01       	movw	r22, r20
    15ca:	a9 01       	movw	r20, r18
    15cc:	9f 01       	movw	r18, r30
    15ce:	0e 94 88 0a 	call	0x1510	; 0x1510 <_ZN5Print5printEli>
  println();
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    15da:	28 96       	adiw	r28, 0x08	; 8
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <_ZN5Print10printFloatEdh>:
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	67 97       	sbiw	r28, 0x17	; 23
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	99 8b       	std	Y+17, r25	; 0x11
    1602:	88 8b       	std	Y+16, r24	; 0x10
    1604:	4a 8b       	std	Y+18, r20	; 0x12
    1606:	5b 8b       	std	Y+19, r21	; 0x13
    1608:	6c 8b       	std	Y+20, r22	; 0x14
    160a:	7d 8b       	std	Y+21, r23	; 0x15
    160c:	2e 8b       	std	Y+22, r18	; 0x16
{ 
  // Handle negative numbers
  if (number < 0.0)
    160e:	6a 89       	ldd	r22, Y+18	; 0x12
    1610:	7b 89       	ldd	r23, Y+19	; 0x13
    1612:	8c 89       	ldd	r24, Y+20	; 0x14
    1614:	9d 89       	ldd	r25, Y+21	; 0x15
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	0e 94 47 04 	call	0x88e	; 0x88e <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	74 f4       	brge	.+28     	; 0x1642 <_ZN5Print10printFloatEdh+0x56>
  {
     print('-');
    1626:	88 89       	ldd	r24, Y+16	; 0x10
    1628:	99 89       	ldd	r25, Y+17	; 0x11
    162a:	6d e2       	ldi	r22, 0x2D	; 45
    162c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
     number = -number;
    1630:	8a 89       	ldd	r24, Y+18	; 0x12
    1632:	9b 89       	ldd	r25, Y+19	; 0x13
    1634:	ac 89       	ldd	r26, Y+20	; 0x14
    1636:	bd 89       	ldd	r27, Y+21	; 0x15
    1638:	b0 58       	subi	r27, 0x80	; 128
    163a:	8a 8b       	std	Y+18, r24	; 0x12
    163c:	9b 8b       	std	Y+19, r25	; 0x13
    163e:	ac 8b       	std	Y+20, r26	; 0x14
    1640:	bd 8b       	std	Y+21, r27	; 0x15
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	bf e3       	ldi	r27, 0x3F	; 63
    164a:	8c 87       	std	Y+12, r24	; 0x0c
    164c:	9d 87       	std	Y+13, r25	; 0x0d
    164e:	ae 87       	std	Y+14, r26	; 0x0e
    1650:	bf 87       	std	Y+15, r27	; 0x0f
  for (uint8_t i=0; i<digits; ++i)
    1652:	1b 82       	std	Y+3, r1	; 0x03
    1654:	13 c0       	rjmp	.+38     	; 0x167c <_ZN5Print10printFloatEdh+0x90>
    rounding /= 10.0;
    1656:	6c 85       	ldd	r22, Y+12	; 0x0c
    1658:	7d 85       	ldd	r23, Y+13	; 0x0d
    165a:	8e 85       	ldd	r24, Y+14	; 0x0e
    165c:	9f 85       	ldd	r25, Y+15	; 0x0f
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e2       	ldi	r20, 0x20	; 32
    1664:	51 e4       	ldi	r21, 0x41	; 65
    1666:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	8c 87       	std	Y+12, r24	; 0x0c
    1670:	9d 87       	std	Y+13, r25	; 0x0d
    1672:	ae 87       	std	Y+14, r26	; 0x0e
    1674:	bf 87       	std	Y+15, r27	; 0x0f
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	9b 81       	ldd	r25, Y+3	; 0x03
    167e:	8e 89       	ldd	r24, Y+22	; 0x16
    1680:	98 17       	cp	r25, r24
    1682:	48 f3       	brcs	.-46     	; 0x1656 <_ZN5Print10printFloatEdh+0x6a>
    rounding /= 10.0;
  
  number += rounding;
    1684:	6a 89       	ldd	r22, Y+18	; 0x12
    1686:	7b 89       	ldd	r23, Y+19	; 0x13
    1688:	8c 89       	ldd	r24, Y+20	; 0x14
    168a:	9d 89       	ldd	r25, Y+21	; 0x15
    168c:	2c 85       	ldd	r18, Y+12	; 0x0c
    168e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1690:	4e 85       	ldd	r20, Y+14	; 0x0e
    1692:	5f 85       	ldd	r21, Y+15	; 0x0f
    1694:	0e 94 14 02 	call	0x428	; 0x428 <__addsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8a 8b       	std	Y+18, r24	; 0x12
    169e:	9b 8b       	std	Y+19, r25	; 0x13
    16a0:	ac 8b       	std	Y+20, r26	; 0x14
    16a2:	bd 8b       	std	Y+21, r27	; 0x15

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    16a4:	6a 89       	ldd	r22, Y+18	; 0x12
    16a6:	7b 89       	ldd	r23, Y+19	; 0x13
    16a8:	8c 89       	ldd	r24, Y+20	; 0x14
    16aa:	9d 89       	ldd	r25, Y+21	; 0x15
    16ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	88 87       	std	Y+8, r24	; 0x08
    16b6:	99 87       	std	Y+9, r25	; 0x09
    16b8:	aa 87       	std	Y+10, r26	; 0x0a
    16ba:	bb 87       	std	Y+11, r27	; 0x0b
  double remainder = number - (double)int_part;
    16bc:	68 85       	ldd	r22, Y+8	; 0x08
    16be:	79 85       	ldd	r23, Y+9	; 0x09
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c4:	0e 94 29 05 	call	0xa52	; 0xa52 <__floatunsisf>
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	6a 89       	ldd	r22, Y+18	; 0x12
    16ce:	7b 89       	ldd	r23, Y+19	; 0x13
    16d0:	8c 89       	ldd	r24, Y+20	; 0x14
    16d2:	9d 89       	ldd	r25, Y+21	; 0x15
    16d4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__subsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8c 83       	std	Y+4, r24	; 0x04
    16de:	9d 83       	std	Y+5, r25	; 0x05
    16e0:	ae 83       	std	Y+6, r26	; 0x06
    16e2:	bf 83       	std	Y+7, r27	; 0x07
  print(int_part);
    16e4:	88 89       	ldd	r24, Y+16	; 0x10
    16e6:	99 89       	ldd	r25, Y+17	; 0x11
    16e8:	28 85       	ldd	r18, Y+8	; 0x08
    16ea:	39 85       	ldd	r19, Y+9	; 0x09
    16ec:	4a 85       	ldd	r20, Y+10	; 0x0a
    16ee:	5b 85       	ldd	r21, Y+11	; 0x0b
    16f0:	ba 01       	movw	r22, r20
    16f2:	a9 01       	movw	r20, r18
    16f4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_ZN5Print5printEm>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    16f8:	8e 89       	ldd	r24, Y+22	; 0x16
    16fa:	88 23       	and	r24, r24
    16fc:	09 f4       	brne	.+2      	; 0x1700 <_ZN5Print10printFloatEdh+0x114>
    16fe:	41 c0       	rjmp	.+130    	; 0x1782 <_ZN5Print10printFloatEdh+0x196>
    print("."); 
    1700:	88 89       	ldd	r24, Y+16	; 0x10
    1702:	99 89       	ldd	r25, Y+17	; 0x11
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	31 e0       	ldi	r19, 0x01	; 1
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN5Print5printEPKc>
    170e:	39 c0       	rjmp	.+114    	; 0x1782 <_ZN5Print10printFloatEdh+0x196>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1710:	6c 81       	ldd	r22, Y+4	; 0x04
    1712:	7d 81       	ldd	r23, Y+5	; 0x05
    1714:	8e 81       	ldd	r24, Y+6	; 0x06
    1716:	9f 81       	ldd	r25, Y+7	; 0x07
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e2       	ldi	r20, 0x20	; 32
    171e:	51 e4       	ldi	r21, 0x41	; 65
    1720:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8c 83       	std	Y+4, r24	; 0x04
    172a:	9d 83       	std	Y+5, r25	; 0x05
    172c:	ae 83       	std	Y+6, r26	; 0x06
    172e:	bf 83       	std	Y+7, r27	; 0x07
    int toPrint = int(remainder);
    1730:	6c 81       	ldd	r22, Y+4	; 0x04
    1732:	7d 81       	ldd	r23, Y+5	; 0x05
    1734:	8e 81       	ldd	r24, Y+6	; 0x06
    1736:	9f 81       	ldd	r25, Y+7	; 0x07
    1738:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    print(toPrint);
    1744:	88 89       	ldd	r24, Y+16	; 0x10
    1746:	99 89       	ldd	r25, Y+17	; 0x11
    1748:	29 81       	ldd	r18, Y+1	; 0x01
    174a:	3a 81       	ldd	r19, Y+2	; 0x02
    174c:	b9 01       	movw	r22, r18
    174e:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN5Print5printEi>
    remainder -= toPrint; 
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	aa 27       	eor	r26, r26
    1758:	97 fd       	sbrc	r25, 7
    175a:	a0 95       	com	r26
    175c:	ba 2f       	mov	r27, r26
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatsisf>
    1766:	9b 01       	movw	r18, r22
    1768:	ac 01       	movw	r20, r24
    176a:	6c 81       	ldd	r22, Y+4	; 0x04
    176c:	7d 81       	ldd	r23, Y+5	; 0x05
    176e:	8e 81       	ldd	r24, Y+6	; 0x06
    1770:	9f 81       	ldd	r25, Y+7	; 0x07
    1772:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__subsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8c 83       	std	Y+4, r24	; 0x04
    177c:	9d 83       	std	Y+5, r25	; 0x05
    177e:	ae 83       	std	Y+6, r26	; 0x06
    1780:	bf 83       	std	Y+7, r27	; 0x07
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1782:	8e 89       	ldd	r24, Y+22	; 0x16
    1784:	8f 8b       	std	Y+23, r24	; 0x17
    1786:	8f 89       	ldd	r24, Y+23	; 0x17
    1788:	88 23       	and	r24, r24
    178a:	11 f0       	breq	.+4      	; 0x1790 <_ZN5Print10printFloatEdh+0x1a4>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	8f 8b       	std	Y+23, r24	; 0x17
    1790:	8f 89       	ldd	r24, Y+23	; 0x17
    1792:	9e 89       	ldd	r25, Y+22	; 0x16
    1794:	91 50       	subi	r25, 0x01	; 1
    1796:	9e 8b       	std	Y+22, r25	; 0x16
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <_ZN5Print10printFloatEdh+0x1b2>
    179c:	b9 cf       	rjmp	.-142    	; 0x1710 <_ZN5Print10printFloatEdh+0x124>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    179e:	67 96       	adiw	r28, 0x17	; 23
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <_ZN5Print5printEd>:
    print(n);
  else
    printNumber(n, base);
}

void Print::print(double n)
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <_ZN5Print5printEd+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <_ZN5Print5printEd+0x8>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZN5Print5printEd+0xa>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	4b 83       	std	Y+3, r20	; 0x03
    17c4:	5c 83       	std	Y+4, r21	; 0x04
    17c6:	6d 83       	std	Y+5, r22	; 0x05
    17c8:	7e 83       	std	Y+6, r23	; 0x06
{
  printFloat(n, 2);
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	4d 81       	ldd	r20, Y+5	; 0x05
    17d4:	5e 81       	ldd	r21, Y+6	; 0x06
    17d6:	ba 01       	movw	r22, r20
    17d8:	a9 01       	movw	r20, r18
    17da:	22 e0       	ldi	r18, 0x02	; 2
    17dc:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_ZN5Print10printFloatEdh>
}
    17e0:	26 96       	adiw	r28, 0x06	; 6
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <_ZN5Print7printlnEd>:
{
  print(n, base);
  println();
}

void Print::println(double n)
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <_ZN5Print7printlnEd+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <_ZN5Print7printlnEd+0x8>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <_ZN5Print7printlnEd+0xa>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	4b 83       	std	Y+3, r20	; 0x03
    1806:	5c 83       	std	Y+4, r21	; 0x04
    1808:	6d 83       	std	Y+5, r22	; 0x05
    180a:	7e 83       	std	Y+6, r23	; 0x06
{
  print(n);
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	4d 81       	ldd	r20, Y+5	; 0x05
    1816:	5e 81       	ldd	r21, Y+6	; 0x06
    1818:	ba 01       	movw	r22, r20
    181a:	a9 01       	movw	r20, r18
    181c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN5Print5printEd>
  println();
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
}
    1828:	26 96       	adiw	r28, 0x06	; 6
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <_ZN5PrintC2Ev>:
#define OCT 8
#define BIN 2
#define BYTE 0

class Print
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <_ZN5PrintC2Ev+0x6>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	82 e3       	ldi	r24, 0x32	; 50
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    185e:	8f 92       	push	r8
    1860:	af 92       	push	r10
    1862:	cf 92       	push	r12
    1864:	df 92       	push	r13
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	60 97       	sbiw	r28, 0x10	; 16
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	7c 83       	std	Y+4, r23	; 0x04
    1888:	6b 83       	std	Y+3, r22	; 0x03
    188a:	5e 83       	std	Y+6, r21	; 0x06
    188c:	4d 83       	std	Y+5, r20	; 0x05
    188e:	38 87       	std	Y+8, r19	; 0x08
    1890:	2f 83       	std	Y+7, r18	; 0x07
    1892:	1a 87       	std	Y+10, r17	; 0x0a
    1894:	09 87       	std	Y+9, r16	; 0x09
    1896:	fc 86       	std	Y+12, r15	; 0x0c
    1898:	eb 86       	std	Y+11, r14	; 0x0b
    189a:	de 86       	std	Y+14, r13	; 0x0e
    189c:	cd 86       	std	Y+13, r12	; 0x0d
    189e:	af 86       	std	Y+15, r10	; 0x0f
    18a0:	88 8a       	std	Y+16, r8	; 0x10
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN5PrintC2Ev>
    18aa:	e9 81       	ldd	r30, Y+1	; 0x01
    18ac:	fa 81       	ldd	r31, Y+2	; 0x02
    18ae:	8c e3       	ldi	r24, 0x3C	; 60
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    18b6:	e9 81       	ldd	r30, Y+1	; 0x01
    18b8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	93 83       	std	Z+3, r25	; 0x03
    18c0:	82 83       	std	Z+2, r24	; 0x02
  _ubrrh = ubrrh;
    18c2:	e9 81       	ldd	r30, Y+1	; 0x01
    18c4:	fa 81       	ldd	r31, Y+2	; 0x02
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	95 83       	std	Z+5, r25	; 0x05
    18cc:	84 83       	std	Z+4, r24	; 0x04
  _ubrrl = ubrrl;
    18ce:	e9 81       	ldd	r30, Y+1	; 0x01
    18d0:	fa 81       	ldd	r31, Y+2	; 0x02
    18d2:	8f 81       	ldd	r24, Y+7	; 0x07
    18d4:	98 85       	ldd	r25, Y+8	; 0x08
    18d6:	97 83       	std	Z+7, r25	; 0x07
    18d8:	86 83       	std	Z+6, r24	; 0x06
  _ucsra = ucsra;
    18da:	e9 81       	ldd	r30, Y+1	; 0x01
    18dc:	fa 81       	ldd	r31, Y+2	; 0x02
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	91 87       	std	Z+9, r25	; 0x09
    18e4:	80 87       	std	Z+8, r24	; 0x08
  _ucsrb = ucsrb;
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ee:	93 87       	std	Z+11, r25	; 0x0b
    18f0:	82 87       	std	Z+10, r24	; 0x0a
  _udr = udr;
    18f2:	e9 81       	ldd	r30, Y+1	; 0x01
    18f4:	fa 81       	ldd	r31, Y+2	; 0x02
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fa:	95 87       	std	Z+13, r25	; 0x0d
    18fc:	84 87       	std	Z+12, r24	; 0x0c
  _rxen = rxen;
    18fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1900:	fa 81       	ldd	r31, Y+2	; 0x02
    1902:	8f 85       	ldd	r24, Y+15	; 0x0f
    1904:	86 87       	std	Z+14, r24	; 0x0e
  _txen = txen;
    1906:	e9 81       	ldd	r30, Y+1	; 0x01
    1908:	fa 81       	ldd	r31, Y+2	; 0x02
    190a:	88 89       	ldd	r24, Y+16	; 0x10
    190c:	87 87       	std	Z+15, r24	; 0x0f
  _rxcie = rxcie;
    190e:	e9 81       	ldd	r30, Y+1	; 0x01
    1910:	fa 81       	ldd	r31, Y+2	; 0x02
    1912:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1914:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1916:	e9 81       	ldd	r30, Y+1	; 0x01
    1918:	fa 81       	ldd	r31, Y+2	; 0x02
    191a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191c:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1924:	82 8b       	std	Z+18, r24	; 0x12
}
    1926:	60 96       	adiw	r28, 0x10	; 16
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	af 90       	pop	r10
    1944:	8f 90       	pop	r8
    1946:	08 95       	ret

00001948 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1948:	8f 92       	push	r8
    194a:	af 92       	push	r10
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	60 97       	sbiw	r28, 0x10	; 16
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	7c 83       	std	Y+4, r23	; 0x04
    1972:	6b 83       	std	Y+3, r22	; 0x03
    1974:	5e 83       	std	Y+6, r21	; 0x06
    1976:	4d 83       	std	Y+5, r20	; 0x05
    1978:	38 87       	std	Y+8, r19	; 0x08
    197a:	2f 83       	std	Y+7, r18	; 0x07
    197c:	1a 87       	std	Y+10, r17	; 0x0a
    197e:	09 87       	std	Y+9, r16	; 0x09
    1980:	fc 86       	std	Y+12, r15	; 0x0c
    1982:	eb 86       	std	Y+11, r14	; 0x0b
    1984:	de 86       	std	Y+14, r13	; 0x0e
    1986:	cd 86       	std	Y+13, r12	; 0x0d
    1988:	af 86       	std	Y+15, r10	; 0x0f
    198a:	88 8a       	std	Y+16, r8	; 0x10
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN5PrintC2Ev>
    1994:	e9 81       	ldd	r30, Y+1	; 0x01
    1996:	fa 81       	ldd	r31, Y+2	; 0x02
    1998:	8c e3       	ldi	r24, 0x3C	; 60
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	93 83       	std	Z+3, r25	; 0x03
    19aa:	82 83       	std	Z+2, r24	; 0x02
  _ubrrh = ubrrh;
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	95 83       	std	Z+5, r25	; 0x05
    19b6:	84 83       	std	Z+4, r24	; 0x04
  _ubrrl = ubrrl;
    19b8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ba:	fa 81       	ldd	r31, Y+2	; 0x02
    19bc:	8f 81       	ldd	r24, Y+7	; 0x07
    19be:	98 85       	ldd	r25, Y+8	; 0x08
    19c0:	97 83       	std	Z+7, r25	; 0x07
    19c2:	86 83       	std	Z+6, r24	; 0x06
  _ucsra = ucsra;
    19c4:	e9 81       	ldd	r30, Y+1	; 0x01
    19c6:	fa 81       	ldd	r31, Y+2	; 0x02
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	91 87       	std	Z+9, r25	; 0x09
    19ce:	80 87       	std	Z+8, r24	; 0x08
  _ucsrb = ucsrb;
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d8:	93 87       	std	Z+11, r25	; 0x0b
    19da:	82 87       	std	Z+10, r24	; 0x0a
  _udr = udr;
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e4:	95 87       	std	Z+13, r25	; 0x0d
    19e6:	84 87       	std	Z+12, r24	; 0x0c
  _rxen = rxen;
    19e8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ea:	fa 81       	ldd	r31, Y+2	; 0x02
    19ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ee:	86 87       	std	Z+14, r24	; 0x0e
  _txen = txen;
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	88 89       	ldd	r24, Y+16	; 0x10
    19f6:	87 87       	std	Z+15, r24	; 0x0f
  _rxcie = rxcie;
    19f8:	e9 81       	ldd	r30, Y+1	; 0x01
    19fa:	fa 81       	ldd	r31, Y+2	; 0x02
    19fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19fe:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1a00:	e9 81       	ldd	r30, Y+1	; 0x01
    1a02:	fa 81       	ldd	r31, Y+2	; 0x02
    1a04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a06:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0e:	82 8b       	std	Z+18, r24	; 0x12
}
    1a10:	60 96       	adiw	r28, 0x10	; 16
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	cf 90       	pop	r12
    1a2c:	af 90       	pop	r10
    1a2e:	8f 90       	pop	r8
    1a30:	08 95       	ret

00001a32 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2f 97       	sbiw	r28, 0x0f	; 15
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	9f 83       	std	Y+7, r25	; 0x07
    1a48:	8e 83       	std	Y+6, r24	; 0x06
    1a4a:	48 87       	std	Y+8, r20	; 0x08
    1a4c:	59 87       	std	Y+9, r21	; 0x09
    1a4e:	6a 87       	std	Y+10, r22	; 0x0a
    1a50:	7b 87       	std	Y+11, r23	; 0x0b
{
  uint16_t baud_setting;
  bool use_u2x;

  // U2X mode is needed for baud rates higher than (CPU Hz / 16)
  if (baud > F_CPU / 16) {
    1a52:	88 85       	ldd	r24, Y+8	; 0x08
    1a54:	99 85       	ldd	r25, Y+9	; 0x09
    1a56:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a58:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a5a:	81 3d       	cpi	r24, 0xD1	; 209
    1a5c:	22 e1       	ldi	r18, 0x12	; 18
    1a5e:	92 07       	cpc	r25, r18
    1a60:	23 e1       	ldi	r18, 0x13	; 19
    1a62:	a2 07       	cpc	r26, r18
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	b2 07       	cpc	r27, r18
    1a68:	18 f0       	brcs	.+6      	; 0x1a70 <_ZN14HardwareSerial5beginEl+0x3e>
    use_u2x = true;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	bb c0       	rjmp	.+374    	; 0x1be6 <_ZN14HardwareSerial5beginEl+0x1b4>
  } else {
    // figure out if U2X mode would allow for a better connection
    
    // calculate the percent difference between the baud-rate specified and
    // the real baud rate for both U2X and non-U2X mode (0-255 error percent)
    uint8_t nonu2x_baud_error = abs((int)(255-((F_CPU/(16*(((F_CPU/8/baud-1)/2)+1))*255)/baud)));
    1a70:	28 85       	ldd	r18, Y+8	; 0x08
    1a72:	39 85       	ldd	r19, Y+9	; 0x09
    1a74:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a76:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a78:	80 ea       	ldi	r24, 0xA0	; 160
    1a7a:	95 e2       	ldi	r25, 0x25	; 37
    1a7c:	a6 e2       	ldi	r26, 0x26	; 38
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1a88:	da 01       	movw	r26, r20
    1a8a:	c9 01       	movw	r24, r18
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	a1 09       	sbc	r26, r1
    1a90:	b1 09       	sbc	r27, r1
    1a92:	b6 95       	lsr	r27
    1a94:	a7 95       	ror	r26
    1a96:	97 95       	ror	r25
    1a98:	87 95       	ror	r24
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	b1 1d       	adc	r27, r1
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	aa 1f       	adc	r26, r26
    1aa6:	bb 1f       	adc	r27, r27
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	aa 1f       	adc	r26, r26
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	aa 1f       	adc	r26, r26
    1ab6:	bb 1f       	adc	r27, r27
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	aa 1f       	adc	r26, r26
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	9c 01       	movw	r18, r24
    1ac2:	ad 01       	movw	r20, r26
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	9d e2       	ldi	r25, 0x2D	; 45
    1ac8:	a1 e3       	ldi	r26, 0x31	; 49
    1aca:	b1 e0       	ldi	r27, 0x01	; 1
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1ad4:	da 01       	movw	r26, r20
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	2f ef       	ldi	r18, 0xFF	; 255
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__mulsi3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	28 85       	ldd	r18, Y+8	; 0x08
    1aee:	39 85       	ldd	r19, Y+9	; 0x09
    1af0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1af2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1afc:	da 01       	movw	r26, r20
    1afe:	c9 01       	movw	r24, r18
    1b00:	9c 01       	movw	r18, r24
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	82 1b       	sub	r24, r18
    1b08:	93 0b       	sbc	r25, r19
    1b0a:	9f 87       	std	Y+15, r25	; 0x0f
    1b0c:	8e 87       	std	Y+14, r24	; 0x0e
    1b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b12:	99 23       	and	r25, r25
    1b14:	3c f4       	brge	.+14     	; 0x1b24 <_ZN14HardwareSerial5beginEl+0xf2>
    1b16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b1a:	90 95       	com	r25
    1b1c:	81 95       	neg	r24
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	9f 87       	std	Y+15, r25	; 0x0f
    1b22:	8e 87       	std	Y+14, r24	; 0x0e
    1b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    uint8_t u2x_baud_error = abs((int)(255-((F_CPU/(8*(((F_CPU/4/baud-1)/2)+1))*255)/baud)));
    1b28:	28 85       	ldd	r18, Y+8	; 0x08
    1b2a:	39 85       	ldd	r19, Y+9	; 0x09
    1b2c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b2e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1b30:	80 e4       	ldi	r24, 0x40	; 64
    1b32:	9b e4       	ldi	r25, 0x4B	; 75
    1b34:	ac e4       	ldi	r26, 0x4C	; 76
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1b40:	da 01       	movw	r26, r20
    1b42:	c9 01       	movw	r24, r18
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	a1 09       	sbc	r26, r1
    1b48:	b1 09       	sbc	r27, r1
    1b4a:	b6 95       	lsr	r27
    1b4c:	a7 95       	ror	r26
    1b4e:	97 95       	ror	r25
    1b50:	87 95       	ror	r24
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	a1 1d       	adc	r26, r1
    1b56:	b1 1d       	adc	r27, r1
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	aa 1f       	adc	r26, r26
    1b5e:	bb 1f       	adc	r27, r27
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	aa 1f       	adc	r26, r26
    1b66:	bb 1f       	adc	r27, r27
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	9c 01       	movw	r18, r24
    1b72:	ad 01       	movw	r20, r26
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	9d e2       	ldi	r25, 0x2D	; 45
    1b78:	a1 e3       	ldi	r26, 0x31	; 49
    1b7a:	b1 e0       	ldi	r27, 0x01	; 1
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1b84:	da 01       	movw	r26, r20
    1b86:	c9 01       	movw	r24, r18
    1b88:	2f ef       	ldi	r18, 0xFF	; 255
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__mulsi3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	28 85       	ldd	r18, Y+8	; 0x08
    1b9e:	39 85       	ldd	r19, Y+9	; 0x09
    1ba0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ba2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1bac:	da 01       	movw	r26, r20
    1bae:	c9 01       	movw	r24, r18
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	8f ef       	ldi	r24, 0xFF	; 255
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	82 1b       	sub	r24, r18
    1bb8:	93 0b       	sbc	r25, r19
    1bba:	9d 87       	std	Y+13, r25	; 0x0d
    1bbc:	8c 87       	std	Y+12, r24	; 0x0c
    1bbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc2:	99 23       	and	r25, r25
    1bc4:	3c f4       	brge	.+14     	; 0x1bd4 <_ZN14HardwareSerial5beginEl+0x1a2>
    1bc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bca:	90 95       	com	r25
    1bcc:	81 95       	neg	r24
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	9d 87       	std	Y+13, r25	; 0x0d
    1bd2:	8c 87       	std	Y+12, r24	; 0x0c
    1bd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bd6:	99 83       	std	Y+1, r25	; 0x01
    
    // prefer non-U2X mode because it handles clock skew better
    use_u2x = (nonu2x_baud_error > u2x_baud_error);
    1bd8:	1b 82       	std	Y+3, r1	; 0x03
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	89 17       	cp	r24, r25
    1be0:	10 f4       	brcc	.+4      	; 0x1be6 <_ZN14HardwareSerial5beginEl+0x1b4>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8b 83       	std	Y+3, r24	; 0x03
  }
  
  if (use_u2x) {
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 23       	and	r24, r24
    1bea:	49 f1       	breq	.+82     	; 0x1c3e <_ZN14HardwareSerial5beginEl+0x20c>
    *_ucsra = 1 << _u2x;
    1bec:	ee 81       	ldd	r30, Y+6	; 0x06
    1bee:	ff 81       	ldd	r31, Y+7	; 0x07
    1bf0:	a0 85       	ldd	r26, Z+8	; 0x08
    1bf2:	b1 85       	ldd	r27, Z+9	; 0x09
    1bf4:	ee 81       	ldd	r30, Y+6	; 0x06
    1bf6:	ff 81       	ldd	r31, Y+7	; 0x07
    1bf8:	82 89       	ldd	r24, Z+18	; 0x12
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <_ZN14HardwareSerial5beginEl+0x1d6>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	2a 95       	dec	r18
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <_ZN14HardwareSerial5beginEl+0x1d2>
    1c0c:	8c 93       	st	X, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c0e:	28 85       	ldd	r18, Y+8	; 0x08
    1c10:	39 85       	ldd	r19, Y+9	; 0x09
    1c12:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c14:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c16:	80 e4       	ldi	r24, 0x40	; 64
    1c18:	9b e4       	ldi	r25, 0x4B	; 75
    1c1a:	ac e4       	ldi	r26, 0x4C	; 76
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1c26:	da 01       	movw	r26, r20
    1c28:	c9 01       	movw	r24, r18
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	a1 09       	sbc	r26, r1
    1c2e:	b1 09       	sbc	r27, r1
    1c30:	b6 95       	lsr	r27
    1c32:	a7 95       	ror	r26
    1c34:	97 95       	ror	r25
    1c36:	87 95       	ror	r24
    1c38:	9d 83       	std	Y+5, r25	; 0x05
    1c3a:	8c 83       	std	Y+4, r24	; 0x04
    1c3c:	1d c0       	rjmp	.+58     	; 0x1c78 <_ZN14HardwareSerial5beginEl+0x246>
  } else {
    *_ucsra = 0;
    1c3e:	ee 81       	ldd	r30, Y+6	; 0x06
    1c40:	ff 81       	ldd	r31, Y+7	; 0x07
    1c42:	00 84       	ldd	r0, Z+8	; 0x08
    1c44:	f1 85       	ldd	r31, Z+9	; 0x09
    1c46:	e0 2d       	mov	r30, r0
    1c48:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c4a:	28 85       	ldd	r18, Y+8	; 0x08
    1c4c:	39 85       	ldd	r19, Y+9	; 0x09
    1c4e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c50:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c52:	80 ea       	ldi	r24, 0xA0	; 160
    1c54:	95 e2       	ldi	r25, 0x25	; 37
    1c56:	a6 e2       	ldi	r26, 0x26	; 38
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    1c62:	da 01       	movw	r26, r20
    1c64:	c9 01       	movw	r24, r18
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	a1 09       	sbc	r26, r1
    1c6a:	b1 09       	sbc	r27, r1
    1c6c:	b6 95       	lsr	r27
    1c6e:	a7 95       	ror	r26
    1c70:	97 95       	ror	r25
    1c72:	87 95       	ror	r24
    1c74:	9d 83       	std	Y+5, r25	; 0x05
    1c76:	8c 83       	std	Y+4, r24	; 0x04
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1c78:	ee 81       	ldd	r30, Y+6	; 0x06
    1c7a:	ff 81       	ldd	r31, Y+7	; 0x07
    1c7c:	04 80       	ldd	r0, Z+4	; 0x04
    1c7e:	f5 81       	ldd	r31, Z+5	; 0x05
    1c80:	e0 2d       	mov	r30, r0
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	89 2f       	mov	r24, r25
    1c88:	99 27       	eor	r25, r25
    1c8a:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    1c8c:	ee 81       	ldd	r30, Y+6	; 0x06
    1c8e:	ff 81       	ldd	r31, Y+7	; 0x07
    1c90:	06 80       	ldd	r0, Z+6	; 0x06
    1c92:	f7 81       	ldd	r31, Z+7	; 0x07
    1c94:	e0 2d       	mov	r30, r0
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    1c9a:	ee 81       	ldd	r30, Y+6	; 0x06
    1c9c:	ff 81       	ldd	r31, Y+7	; 0x07
    1c9e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ca0:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ca2:	ee 81       	ldd	r30, Y+6	; 0x06
    1ca4:	ff 81       	ldd	r31, Y+7	; 0x07
    1ca6:	02 84       	ldd	r0, Z+10	; 0x0a
    1ca8:	f3 85       	ldd	r31, Z+11	; 0x0b
    1caa:	e0 2d       	mov	r30, r0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	ee 81       	ldd	r30, Y+6	; 0x06
    1cb2:	ff 81       	ldd	r31, Y+7	; 0x07
    1cb4:	86 85       	ldd	r24, Z+14	; 0x0e
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <_ZN14HardwareSerial5beginEl+0x292>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	2a 95       	dec	r18
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <_ZN14HardwareSerial5beginEl+0x28e>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
  sbi(*_ucsrb, _txen);
    1ccc:	ee 81       	ldd	r30, Y+6	; 0x06
    1cce:	ff 81       	ldd	r31, Y+7	; 0x07
    1cd0:	a2 85       	ldd	r26, Z+10	; 0x0a
    1cd2:	b3 85       	ldd	r27, Z+11	; 0x0b
    1cd4:	ee 81       	ldd	r30, Y+6	; 0x06
    1cd6:	ff 81       	ldd	r31, Y+7	; 0x07
    1cd8:	02 84       	ldd	r0, Z+10	; 0x0a
    1cda:	f3 85       	ldd	r31, Z+11	; 0x0b
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	ee 81       	ldd	r30, Y+6	; 0x06
    1ce4:	ff 81       	ldd	r31, Y+7	; 0x07
    1ce6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <_ZN14HardwareSerial5beginEl+0x2c4>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	2a 95       	dec	r18
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <_ZN14HardwareSerial5beginEl+0x2c0>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
  sbi(*_ucsrb, _rxcie);
    1cfe:	ee 81       	ldd	r30, Y+6	; 0x06
    1d00:	ff 81       	ldd	r31, Y+7	; 0x07
    1d02:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d04:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d06:	ee 81       	ldd	r30, Y+6	; 0x06
    1d08:	ff 81       	ldd	r31, Y+7	; 0x07
    1d0a:	02 84       	ldd	r0, Z+10	; 0x0a
    1d0c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d0e:	e0 2d       	mov	r30, r0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	ee 81       	ldd	r30, Y+6	; 0x06
    1d16:	ff 81       	ldd	r31, Y+7	; 0x07
    1d18:	80 89       	ldd	r24, Z+16	; 0x10
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <_ZN14HardwareSerial5beginEl+0x2f8>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <_ZN14HardwareSerial5beginEl+0x2f4>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
}
    1d32:	2f 96       	adiw	r28, 0x0f	; 15
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <_ZN14HardwareSerial9availableEv>:

uint8_t HardwareSerial::available(void)
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <_ZN14HardwareSerial9availableEv+0x6>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
{
  return (RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e0 58       	subi	r30, 0x80	; 128
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	9c 01       	movw	r18, r24
    1d66:	20 58       	subi	r18, 0x80	; 128
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	fc 01       	movw	r30, r24
    1d74:	ee 57       	subi	r30, 0x7E	; 126
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	a9 01       	movw	r20, r18
    1d7e:	48 1b       	sub	r20, r24
    1d80:	59 0b       	sbc	r21, r25
    1d82:	ca 01       	movw	r24, r20
    1d84:	20 e8       	ldi	r18, 0x80	; 128
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	b9 01       	movw	r22, r18
    1d8a:	0e 94 39 1b 	call	0x3672	; 0x3672 <__divmodhi4>
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <_ZN14HardwareSerial4readEv+0xa>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <_ZN14HardwareSerial4readEv+0xc>
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	9b 83       	std	Y+3, r25	; 0x03
    1dac:	8a 83       	std	Y+2, r24	; 0x02
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1dae:	ea 81       	ldd	r30, Y+2	; 0x02
    1db0:	fb 81       	ldd	r31, Y+3	; 0x03
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	fc 01       	movw	r30, r24
    1db8:	e0 58       	subi	r30, 0x80	; 128
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	20 81       	ld	r18, Z
    1dbe:	31 81       	ldd	r19, Z+1	; 0x01
    1dc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	fc 01       	movw	r30, r24
    1dca:	ee 57       	subi	r30, 0x7E	; 126
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	29 f4       	brne	.+10     	; 0x1de2 <_ZN14HardwareSerial4readEv+0x4a>
    return -1;
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	3d 83       	std	Y+5, r19	; 0x05
    1dde:	2c 83       	std	Y+4, r18	; 0x04
    1de0:	2f c0       	rjmp	.+94     	; 0x1e40 <_ZN14HardwareSerial4readEv+0xa8>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1de2:	ea 81       	ldd	r30, Y+2	; 0x02
    1de4:	fb 81       	ldd	r31, Y+3	; 0x03
    1de6:	22 81       	ldd	r18, Z+2	; 0x02
    1de8:	33 81       	ldd	r19, Z+3	; 0x03
    1dea:	ea 81       	ldd	r30, Y+2	; 0x02
    1dec:	fb 81       	ldd	r31, Y+3	; 0x03
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	ee 57       	subi	r30, 0x7E	; 126
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	e8 0f       	add	r30, r24
    1e00:	f9 1f       	adc	r31, r25
    1e02:	80 81       	ld	r24, Z
    1e04:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    1e06:	ea 81       	ldd	r30, Y+2	; 0x02
    1e08:	fb 81       	ldd	r31, Y+3	; 0x03
    1e0a:	02 81       	ldd	r16, Z+2	; 0x02
    1e0c:	13 81       	ldd	r17, Z+3	; 0x03
    1e0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e10:	fb 81       	ldd	r31, Y+3	; 0x03
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	fc 01       	movw	r30, r24
    1e18:	ee 57       	subi	r30, 0x7E	; 126
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	20 e8       	ldi	r18, 0x80	; 128
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	b9 01       	movw	r22, r18
    1e28:	0e 94 39 1b 	call	0x3672	; 0x3672 <__divmodhi4>
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	ee 57       	subi	r30, 0x7E	; 126
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    return c;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	3d 83       	std	Y+5, r19	; 0x05
    1e3e:	2c 83       	std	Y+4, r18	; 0x04
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <_ZN14HardwareSerial5flushEv+0x6>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    1e66:	e9 81       	ldd	r30, Y+1	; 0x01
    1e68:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6a:	22 81       	ldd	r18, Z+2	; 0x02
    1e6c:	33 81       	ldd	r19, Z+3	; 0x03
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	fc 01       	movw	r30, r24
    1e78:	ee 57       	subi	r30, 0x7E	; 126
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	f9 01       	movw	r30, r18
    1e82:	e0 58       	subi	r30, 0x80	; 128
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <_ZN14HardwareSerial5writeEh+0x6>
    1e9a:	0f 92       	push	r0
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	6b 83       	std	Y+3, r22	; 0x03
{
  while (!((*_ucsra) & (1 << _udre)))
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	00 84       	ldd	r0, Z+8	; 0x08
    1eac:	f1 85       	ldd	r31, Z+9	; 0x09
    1eae:	e0 2d       	mov	r30, r0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	81 89       	ldd	r24, Z+17	; 0x11
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <_ZN14HardwareSerial5writeEh+0x34>
    1ec4:	55 95       	asr	r21
    1ec6:	47 95       	ror	r20
    1ec8:	8a 95       	dec	r24
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <_ZN14HardwareSerial5writeEh+0x30>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	81 70       	andi	r24, 0x01	; 1
    1ed0:	90 70       	andi	r25, 0x00	; 0
    1ed2:	98 2f       	mov	r25, r24
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	89 27       	eor	r24, r25
    1ed8:	88 23       	and	r24, r24
    1eda:	29 f7       	brne	.-54     	; 0x1ea6 <_ZN14HardwareSerial5writeEh+0x12>
    ;

  *_udr = c;
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	04 84       	ldd	r0, Z+12	; 0x0c
    1ee2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	80 83       	st	Z, r24
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <_Z41__static_initialization_and_destruction_0ii>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(__AVR_ATmega8__)
HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#else
HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    1ef6:	8f 92       	push	r8
    1ef8:	af 92       	push	r10
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <_Z41__static_initialization_and_destruction_0ii+0x16>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <_Z41__static_initialization_and_destruction_0ii+0x18>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	7c 83       	std	Y+4, r23	; 0x04
    1f18:	6b 83       	std	Y+3, r22	; 0x03
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	91 05       	cpc	r25, r1
    1f22:	99 f5       	brne	.+102    	; 0x1f8a <_Z41__static_initialization_and_destruction_0ii+0x94>
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	2f ef       	ldi	r18, 0xFF	; 255
    1f2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2c:	92 07       	cpc	r25, r18
    1f2e:	69 f5       	brne	.+90     	; 0x1f8a <_Z41__static_initialization_and_destruction_0ii+0x94>
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <_Z41__static_initialization_and_destruction_0ii+0x3c>
    1f32:	0f 92       	push	r0
    1f34:	ed b7       	in	r30, 0x3d	; 61
    1f36:	fe b7       	in	r31, 0x3e	; 62
    1f38:	31 96       	adiw	r30, 0x01	; 1
    1f3a:	26 ec       	ldi	r18, 0xC6	; 198
    1f3c:	32 e0       	ldi	r19, 0x02	; 2
    1f3e:	42 e4       	ldi	r20, 0x42	; 66
    1f40:	52 e0       	ldi	r21, 0x02	; 2
    1f42:	87 e0       	ldi	r24, 0x07	; 7
    1f44:	80 83       	st	Z, r24
    1f46:	85 e0       	ldi	r24, 0x05	; 5
    1f48:	81 83       	std	Z+1, r24	; 0x01
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	82 83       	std	Z+2, r24	; 0x02
    1f4e:	c9 01       	movw	r24, r18
    1f50:	ba 01       	movw	r22, r20
    1f52:	45 ec       	ldi	r20, 0xC5	; 197
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	24 ec       	ldi	r18, 0xC4	; 196
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	00 ec       	ldi	r16, 0xC0	; 192
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	f1 ec       	ldi	r31, 0xC1	; 193
    1f62:	ef 2e       	mov	r14, r31
    1f64:	ff 24       	eor	r15, r15
    1f66:	f0 2d       	mov	r31, r0
    1f68:	0f 2e       	mov	r0, r31
    1f6a:	f6 ec       	ldi	r31, 0xC6	; 198
    1f6c:	cf 2e       	mov	r12, r31
    1f6e:	dd 24       	eor	r13, r13
    1f70:	f0 2d       	mov	r31, r0
    1f72:	aa 24       	eor	r10, r10
    1f74:	68 94       	set
    1f76:	a2 f8       	bld	r10, 2
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	f3 e0       	ldi	r31, 0x03	; 3
    1f7c:	8f 2e       	mov	r8, r31
    1f7e:	f0 2d       	mov	r31, r0
    1f80:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	af 90       	pop	r10
    1fa4:	8f 90       	pop	r8
    1fa6:	08 95       	ret

00001fa8 <_GLOBAL__I_rx_buffer>:
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	6f ef       	ldi	r22, 0xFF	; 255
    1fb6:	7f ef       	ldi	r23, 0xFF	; 255
    1fb8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_Z41__static_initialization_and_destruction_0ii>
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <__cxa_guard_acquire>:
//!
#include <stdlib.h> 
#include "cpp_hack.h"


int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <__cxa_guard_acquire+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <__cxa_guard_acquire+0x8>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	9a 83       	std	Y+2, r25	; 0x02
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	80 81       	ld	r24, Z
    1fd8:	1c 82       	std	Y+4, r1	; 0x04
    1fda:	1b 82       	std	Y+3, r1	; 0x03
    1fdc:	88 23       	and	r24, r24
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <__cxa_guard_acquire+0x26>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <__cxa_guard_release+0x6>
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 83       	st	Z, r24
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <__cxa_guard_abort+0x6>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <__cxa_pure_virtual>:
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <adc_set_ref>:
volatile uint16_t gADC_curr_output[NUM_ADC_CH];	//current ADC sample without any accumlation or averaging

//***************************************************

void adc_set_ref(uint8_t ref)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    204c:	ac e7       	ldi	r26, 0x7C	; 124
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ec e7       	ldi	r30, 0x7C	; 124
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	28 2f       	mov	r18, r24
    2058:	2f 73       	andi	r18, 0x3F	; 63
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	00 24       	eor	r0, r0
    2062:	96 95       	lsr	r25
    2064:	87 95       	ror	r24
    2066:	07 94       	ror	r0
    2068:	96 95       	lsr	r25
    206a:	87 95       	ror	r24
    206c:	07 94       	ror	r0
    206e:	98 2f       	mov	r25, r24
    2070:	80 2d       	mov	r24, r0
    2072:	82 2b       	or	r24, r18
    2074:	8c 93       	st	X, r24
}
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <adc_set_ch>:

void adc_set_ch(uint8_t ch)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	89 83       	std	Y+1, r24	; 0x01
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    208a:	ac e7       	ldi	r26, 0x7C	; 124
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	ec e7       	ldi	r30, 0x7C	; 124
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	98 2f       	mov	r25, r24
    2096:	90 7e       	andi	r25, 0xE0	; 224
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	8f 71       	andi	r24, 0x1F	; 31
    209c:	89 2b       	or	r24, r25
    209e:	8c 93       	st	X, r24
}
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <adc_get_sample_time>:
///
/// Gives the number of times ADC has cycled through and produced sample since reset.
/// This count is equivalent to system time count if the system loop is locked with the ADC samples.
///
uint32_t adc_get_sample_time()
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <adc_get_sample_time+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <adc_get_sample_time+0x8>
    20b0:	0f 92       	push	r0
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t oldSREG;
	uint32_t temp;

	oldSREG = SREG;
    20b6:	ef e5       	ldi	r30, 0x5F	; 95
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8d 83       	std	Y+5, r24	; 0x05
	cli();	//disable interrupts while copying the ADC data
    20be:	f8 94       	cli
	
	temp = gSample_cnt;
    20c0:	80 91 62 03 	lds	r24, 0x0362
    20c4:	90 91 63 03 	lds	r25, 0x0363
    20c8:	a0 91 64 03 	lds	r26, 0x0364
    20cc:	b0 91 65 03 	lds	r27, 0x0365
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	ab 83       	std	Y+3, r26	; 0x03
    20d6:	bc 83       	std	Y+4, r27	; 0x04
		
	// reenable interrupts.
	SREG = oldSREG;
    20d8:	ef e5       	ldi	r30, 0x5F	; 95
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	80 83       	st	Z, r24

	return temp;
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	ab 81       	ldd	r26, Y+3	; 0x03
    20e6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <adc_initialize>:

void adc_initialize( )
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	a3 97       	sbiw	r28, 0x23	; 35
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t high, low;
	
	float factor;
	 
	gSample_cnt = 0;
    2110:	10 92 62 03 	sts	0x0362, r1
    2114:	10 92 63 03 	sts	0x0363, r1
    2118:	10 92 64 03 	sts	0x0364, r1
    211c:	10 92 65 03 	sts	0x0365, r1
	//Clock prescale to 128.
	ADCSRA |= _BV(ADPS2);	//Clock Prescale
    2120:	aa e7       	ldi	r26, 0x7A	; 122
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	ea e7       	ldi	r30, 0x7A	; 122
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	84 60       	ori	r24, 0x04	; 4
    212c:	8c 93       	st	X, r24
	ADCSRA |= _BV(ADPS1);	//Clock Prescale
    212e:	aa e7       	ldi	r26, 0x7A	; 122
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	ea e7       	ldi	r30, 0x7A	; 122
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 60       	ori	r24, 0x02	; 2
    213a:	8c 93       	st	X, r24
	ADCSRA |= _BV(ADPS0);	//Clock Prescale
    213c:	aa e7       	ldi	r26, 0x7A	; 122
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	ea e7       	ldi	r30, 0x7A	; 122
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	81 60       	ori	r24, 0x01	; 1
    2148:	8c 93       	st	X, r24

	//Set the reference voltage. For Pushpak Quadrotor board the refrence has to be VREF.
	adc_set_ref(ADC_REF_EXT);
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	0e 94 20 10 	call	0x2040	; 0x2040 <adc_set_ref>
	ADCSRA |= _BV(ADEN);	//Enable ADC.
    2150:	aa e7       	ldi	r26, 0x7A	; 122
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ea e7       	ldi	r30, 0x7A	; 122
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 68       	ori	r24, 0x80	; 128
    215c:	8c 93       	st	X, r24
	
	//By sampling the internal 1.1 voltage source, we can precisely calculate the value of external ADC
	//refernce voltage. This value can then be used to convert ADC readings to accurate voltage readings. 
	
	//Get use internal 1.1V to calibrate the ADC refrence voltage
	adc_set_ch(ADC_INP_11REF);
    215e:	8e e1       	ldi	r24, 0x1E	; 30
    2160:	0e 94 3f 10 	call	0x207e	; 0x207e <adc_set_ch>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a8 ec       	ldi	r26, 0xC8	; 200
    216a:	b2 e4       	ldi	r27, 0x42	; 66
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e4       	ldi	r19, 0x40	; 64
    2180:	4c e9       	ldi	r20, 0x9C	; 156
    2182:	55 e4       	ldi	r21, 0x45	; 69
    2184:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 47 04 	call	0x88e	; 0x88e <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <adc_initialize+0xba>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <adc_initialize+0x138>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <adc_initialize+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <adc_initialize+0x11a>
    21f8:	84 ef       	ldi	r24, 0xF4	; 244
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <adc_initialize+0x108>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <adc_initialize+0xfc>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <adc_initialize+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <adc_initialize+0x144>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100); //delay needed to let the voltages stablize and get accurate reading of 1.1V refrence.

	adc_ref_val = 0;
    2248:	10 92 3f 03 	sts	0x033F, r1
    224c:	10 92 3e 03 	sts	0x033E, r1
	adc_raw_ref_val = 0;	
    2250:	10 92 61 03 	sts	0x0361, r1
    2254:	10 92 60 03 	sts	0x0360, r1

	//Sample and accumalate the internal refernce voltage
	for(i=0;i<MAX_ACCUMLATION_COUNT;++i)
    2258:	1b a2       	std	Y+35, r1	; 0x23
    225a:	37 c0       	rjmp	.+110    	; 0x22ca <adc_initialize+0x1ce>
	{	
		ADCSRA |= _BV(ADSC);	//start conversion
    225c:	aa e7       	ldi	r26, 0x7A	; 122
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ea e7       	ldi	r30, 0x7A	; 122
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	80 64       	ori	r24, 0x40	; 64
    2268:	8c 93       	st	X, r24
		
		// ADSC is cleared when the conversion finishes
		while (bit_is_set(ADCSRA, ADSC));
    226a:	ea e7       	ldi	r30, 0x7A	; 122
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	80 74       	andi	r24, 0x40	; 64
    2276:	90 70       	andi	r25, 0x00	; 0
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	b9 f7       	brne	.-18     	; 0x226a <adc_initialize+0x16e>
	
		low = ADCL;
    227c:	e8 e7       	ldi	r30, 0x78	; 120
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	89 a3       	std	Y+33, r24	; 0x21
		high = ADCH;
    2284:	e9 e7       	ldi	r30, 0x79	; 121
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	8a a3       	std	Y+34, r24	; 0x22
		
		adc_raw_ref_val = (high << 8 ) | low;
    228c:	8a a1       	ldd	r24, Y+34	; 0x22
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	38 2f       	mov	r19, r24
    2294:	22 27       	eor	r18, r18
    2296:	89 a1       	ldd	r24, Y+33	; 0x21
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	82 2b       	or	r24, r18
    229e:	93 2b       	or	r25, r19
    22a0:	90 93 61 03 	sts	0x0361, r25
    22a4:	80 93 60 03 	sts	0x0360, r24
		adc_ref_val = adc_ref_val + adc_raw_ref_val;
    22a8:	20 91 3e 03 	lds	r18, 0x033E
    22ac:	30 91 3f 03 	lds	r19, 0x033F
    22b0:	80 91 60 03 	lds	r24, 0x0360
    22b4:	90 91 61 03 	lds	r25, 0x0361
    22b8:	82 0f       	add	r24, r18
    22ba:	93 1f       	adc	r25, r19
    22bc:	90 93 3f 03 	sts	0x033F, r25
    22c0:	80 93 3e 03 	sts	0x033E, r24

	adc_ref_val = 0;
	adc_raw_ref_val = 0;	

	//Sample and accumalate the internal refernce voltage
	for(i=0;i<MAX_ACCUMLATION_COUNT;++i)
    22c4:	8b a1       	ldd	r24, Y+35	; 0x23
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	8b a3       	std	Y+35, r24	; 0x23
    22ca:	8b a1       	ldd	r24, Y+35	; 0x23
    22cc:	80 31       	cpi	r24, 0x10	; 16
    22ce:	30 f2       	brcs	.-116    	; 0x225c <adc_initialize+0x160>
		adc_ref_val = adc_ref_val + adc_raw_ref_val;
	}
	
	//Accumlation increase bit count, but actual increase in ADC bit resolution is lesser.
	//Drop the addition bits
	adc_ref_val = adc_ref_val >> LSB_DROP_CNT; 
    22d0:	80 91 3e 03 	lds	r24, 0x033E
    22d4:	90 91 3f 03 	lds	r25, 0x033F
    22d8:	96 95       	lsr	r25
    22da:	87 95       	ror	r24
    22dc:	96 95       	lsr	r25
    22de:	87 95       	ror	r24
    22e0:	90 93 3f 03 	sts	0x033F, r25
    22e4:	80 93 3e 03 	sts	0x033E, r24
	
	//Calculate milli Volts per count.
	//To get better resolution multiply the conversion by 1024 or 10bits.
	//Perform floating point operations and then convert to integer value
	
	factor = (1100.0* (1 << FACTOR_MULTIPLE))/adc_ref_val; 	//The refrence voltage inside AVR is 1.1V which 1100 in mV
    22e8:	80 91 3e 03 	lds	r24, 0x033E
    22ec:	90 91 3f 03 	lds	r25, 0x033F
    22f0:	cc 01       	movw	r24, r24
    22f2:	a0 e0       	ldi	r26, 0x00	; 0
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 29 05 	call	0xa52	; 0xa52 <__floatunsisf>
    22fe:	9b 01       	movw	r18, r22
    2300:	ac 01       	movw	r20, r24
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	70 e8       	ldi	r23, 0x80	; 128
    2306:	89 e8       	ldi	r24, 0x89	; 137
    2308:	99 e4       	ldi	r25, 0x49	; 73
    230a:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8d 8f       	std	Y+29, r24	; 0x1d
    2314:	9e 8f       	std	Y+30, r25	; 0x1e
    2316:	af 8f       	std	Y+31, r26	; 0x1f
    2318:	b8 a3       	std	Y+32, r27	; 0x20
	factor = factor + 0.5; 					//To round the value to nearest integer
    231a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    231c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    231e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2320:	98 a1       	ldd	r25, Y+32	; 0x20
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 14 02 	call	0x428	; 0x428 <__addsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8d 8f       	std	Y+29, r24	; 0x1d
    2334:	9e 8f       	std	Y+30, r25	; 0x1e
    2336:	af 8f       	std	Y+31, r26	; 0x1f
    2338:	b8 a3       	std	Y+32, r27	; 0x20
	adc_conv_factor = (uint16_t) factor;
    233a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    233c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    233e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2340:	98 a1       	ldd	r25, Y+32	; 0x20
    2342:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	90 93 2d 03 	sts	0x032D, r25
    234e:	80 93 2c 03 	sts	0x032C, r24
	
/**********************************************************************************************/
//Initialize for Autotrigger functionality.

	//disable it while setting up the Auto Trigger functionality
	ADCSRA &= ~(_BV(ADEN));
    2352:	aa e7       	ldi	r26, 0x7A	; 122
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	ea e7       	ldi	r30, 0x7A	; 122
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	8f 77       	andi	r24, 0x7F	; 127
    235e:	8c 93       	st	X, r24
	
	//Set the reference voltage. For Pushpak Quadrotor board the refrence has to be VREF.
	adc_set_ref(ADC_REF_EXT);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	0e 94 20 10 	call	0x2040	; 0x2040 <adc_set_ref>
	adc_set_ch(0);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	0e 94 3f 10 	call	0x207e	; 0x207e <adc_set_ch>

	ADCSRA |= _BV(ADATE);	//Enable Auto Trigger
    236c:	aa e7       	ldi	r26, 0x7A	; 122
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ea e7       	ldi	r30, 0x7A	; 122
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 62       	ori	r24, 0x20	; 32
    2378:	8c 93       	st	X, r24
	ADCSRA |= _BV(ADIE);	//Enable Interrupt
    237a:	aa e7       	ldi	r26, 0x7A	; 122
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	ea e7       	ldi	r30, 0x7A	; 122
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	88 60       	ori	r24, 0x08	; 8
    2386:	8c 93       	st	X, r24
	ADCSRA |= _BV(ADEN);	//Enable ADC.
    2388:	aa e7       	ldi	r26, 0x7A	; 122
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ea e7       	ldi	r30, 0x7A	; 122
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	80 68       	ori	r24, 0x80	; 128
    2394:	8c 93       	st	X, r24
		
	//initialize all the variables
	for(i = 0; i<NUM_ADC_CH; i++)
    2396:	1b a2       	std	Y+35, r1	; 0x23
    2398:	17 c0       	rjmp	.+46     	; 0x23c8 <adc_initialize+0x2cc>
	{
		gADC_acc[i] = 0;
    239a:	8b a1       	ldd	r24, Y+35	; 0x23
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	fc 01       	movw	r30, r24
    23a6:	e4 52       	subi	r30, 0x24	; 36
    23a8:	fd 4f       	sbci	r31, 0xFD	; 253
    23aa:	11 82       	std	Z+1, r1	; 0x01
    23ac:	10 82       	st	Z, r1
		gADC_sample[i] = 0;
    23ae:	8b a1       	ldd	r24, Y+35	; 0x23
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	fc 01       	movw	r30, r24
    23ba:	e4 51       	subi	r30, 0x14	; 20
    23bc:	fd 4f       	sbci	r31, 0xFD	; 253
    23be:	11 82       	std	Z+1, r1	; 0x01
    23c0:	10 82       	st	Z, r1
	ADCSRA |= _BV(ADATE);	//Enable Auto Trigger
	ADCSRA |= _BV(ADIE);	//Enable Interrupt
	ADCSRA |= _BV(ADEN);	//Enable ADC.
		
	//initialize all the variables
	for(i = 0; i<NUM_ADC_CH; i++)
    23c2:	8b a1       	ldd	r24, Y+35	; 0x23
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	8b a3       	std	Y+35, r24	; 0x23
    23c8:	8b a1       	ldd	r24, Y+35	; 0x23
    23ca:	88 30       	cpi	r24, 0x08	; 8
    23cc:	30 f3       	brcs	.-52     	; 0x239a <adc_initialize+0x29e>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a8 ec       	ldi	r26, 0xC8	; 200
    23d4:	b2 e4       	ldi	r27, 0x42	; 66
    23d6:	8b 87       	std	Y+11, r24	; 0x0b
    23d8:	9c 87       	std	Y+12, r25	; 0x0c
    23da:	ad 87       	std	Y+13, r26	; 0x0d
    23dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e4       	ldi	r19, 0x40	; 64
    23ea:	4c e9       	ldi	r20, 0x9C	; 156
    23ec:	55 e4       	ldi	r21, 0x45	; 69
    23ee:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	8f 83       	std	Y+7, r24	; 0x07
    23f8:	98 87       	std	Y+8, r25	; 0x08
    23fa:	a9 87       	std	Y+9, r26	; 0x09
    23fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2400:	78 85       	ldd	r23, Y+8	; 0x08
    2402:	89 85       	ldd	r24, Y+9	; 0x09
    2404:	9a 85       	ldd	r25, Y+10	; 0x0a
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 47 04 	call	0x88e	; 0x88e <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <adc_initialize+0x324>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	3f c0       	rjmp	.+126    	; 0x249e <adc_initialize+0x3a2>
	else if (__tmp > 65535)
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <adc_initialize+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	6b 85       	ldd	r22, Y+11	; 0x0b
    243a:	7c 85       	ldd	r23, Y+12	; 0x0c
    243c:	8d 85       	ldd	r24, Y+13	; 0x0d
    243e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <adc_initialize+0x384>
    2462:	84 ef       	ldi	r24, 0xF4	; 244
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	9c 83       	std	Y+4, r25	; 0x04
    2468:	8b 83       	std	Y+3, r24	; 0x03
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <adc_initialize+0x372>
    2472:	9c 83       	std	Y+4, r25	; 0x04
    2474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <adc_initialize+0x366>
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <adc_initialize+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	8d 83       	std	Y+5, r24	; 0x05
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <adc_initialize+0x3ae>
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
		gADC_sample[i] = 0;
	}
	
	_delay_ms(100); //delay needed to let the voltages stablize.
			
	sei();			/* enable interrupts if they are by chance not enabled yet */
    24b2:	78 94       	sei

	//Start one conversion to set the ball rolling.
	ADCSRA |= _BV(ADSC);
    24b4:	aa e7       	ldi	r26, 0x7A	; 122
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	ea e7       	ldi	r30, 0x7A	; 122
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	80 64       	ori	r24, 0x40	; 64
    24c0:	8c 93       	st	X, r24

	//According to datasheet we have to wait for at least 1 ADC clock cycle after starting a conversion
	//to change the channel. ADC clock has time period of 8uS so have to wait for that time.
	//Following dummy loop is for the delay. By using gADC_ch for delay loop counter, ensuring that
	//delay loop does not get optimized out.	
 	gADC_ch = 70;
    24c2:	86 e4       	ldi	r24, 0x46	; 70
    24c4:	80 93 db 02 	sts	0x02DB, r24
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <adc_initialize+0x3d8>
 	while(gADC_ch != 1)
 	{
 		--gADC_ch;
    24ca:	80 91 db 02 	lds	r24, 0x02DB
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	80 93 db 02 	sts	0x02DB, r24
	//According to datasheet we have to wait for at least 1 ADC clock cycle after starting a conversion
	//to change the channel. ADC clock has time period of 8uS so have to wait for that time.
	//Following dummy loop is for the delay. By using gADC_ch for delay loop counter, ensuring that
	//delay loop does not get optimized out.	
 	gADC_ch = 70;
 	while(gADC_ch != 1)
    24d4:	80 91 db 02 	lds	r24, 0x02DB
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	b9 f7       	brne	.-18     	; 0x24ca <adc_initialize+0x3ce>
 	{
 		--gADC_ch;
 	}
	
	gADC_ch = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	80 93 db 02 	sts	0x02DB, r24
	adc_set_ch(gADC_ch);
    24e2:	80 91 db 02 	lds	r24, 0x02DB
    24e6:	0e 94 3f 10 	call	0x207e	; 0x207e <adc_set_ch>
}
    24ea:	a3 96       	adiw	r28, 0x23	; 35
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <adc_is_data_ready>:

//Function returns 1 when a new sample is ready. A new sample is ready once the given number of samples are
///accumlated.
uint8_t adc_is_data_ready()
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	return gADC_new_output;
    2504:	80 91 d9 02 	lds	r24, 0x02D9
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <adc_update>:

/// Function blocks till a new sample is available. It copies the accumlated output to an array.
/// This copy is necessary since the ADC samples are continously being accumlated by the interrupts. 
/// ADC ouput after accumalation is 12bits.
void adc_update(void)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <adc_update+0x6>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t oldSREG;
		
	while(gADC_new_output == 0);
    2518:	80 91 d9 02 	lds	r24, 0x02D9
    251c:	88 23       	and	r24, r24
    251e:	e1 f3       	breq	.-8      	; 0x2518 <adc_update+0xa>
	gADC_new_output = 0; //clear the flag
    2520:	10 92 d9 02 	sts	0x02D9, r1
		
	oldSREG = SREG;
    2524:	ef e5       	ldi	r30, 0x5F	; 95
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	89 83       	std	Y+1, r24	; 0x01
	cli();	//disable interrupts while copying the ADC data
    252c:	f8 94       	cli
	
	for(i=0; i<NUM_ADC_CH; i++)
    252e:	1a 82       	std	Y+2, r1	; 0x02
    2530:	37 c0       	rjmp	.+110    	; 0x25a0 <adc_update+0x92>
	{
		gADC_output[i] = gADC_sample[i] >> 2;	//Divide by 4 as the LSB 2 bits contain no useful information/
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	48 2f       	mov	r20, r24
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	fc 01       	movw	r30, r24
    2544:	e4 51       	subi	r30, 0x14	; 20
    2546:	fd 4f       	sbci	r31, 0xFD	; 253
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	9c 01       	movw	r18, r24
    254e:	36 95       	lsr	r19
    2550:	27 95       	ror	r18
    2552:	36 95       	lsr	r19
    2554:	27 95       	ror	r18
    2556:	ca 01       	movw	r24, r20
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	fc 01       	movw	r30, r24
    255e:	e2 5d       	subi	r30, 0xD2	; 210
    2560:	fc 4f       	sbci	r31, 0xFC	; 252
    2562:	31 83       	std	Z+1, r19	; 0x01
    2564:	20 83       	st	Z, r18
		gADC_curr_output[i] = gADC_curr[i] >> 2; //test code
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	48 2f       	mov	r20, r24
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	88 2f       	mov	r24, r24
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	fc 01       	movw	r30, r24
    2578:	e0 5c       	subi	r30, 0xC0	; 192
    257a:	fc 4f       	sbci	r31, 0xFC	; 252
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	9c 01       	movw	r18, r24
    2582:	36 95       	lsr	r19
    2584:	27 95       	ror	r18
    2586:	36 95       	lsr	r19
    2588:	27 95       	ror	r18
    258a:	ca 01       	movw	r24, r20
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	fc 01       	movw	r30, r24
    2592:	e0 5b       	subi	r30, 0xB0	; 176
    2594:	fc 4f       	sbci	r31, 0xFC	; 252
    2596:	31 83       	std	Z+1, r19	; 0x01
    2598:	20 83       	st	Z, r18
	gADC_new_output = 0; //clear the flag
		
	oldSREG = SREG;
	cli();	//disable interrupts while copying the ADC data
	
	for(i=0; i<NUM_ADC_CH; i++)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	88 30       	cpi	r24, 0x08	; 8
    25a4:	30 f2       	brcs	.-116    	; 0x2532 <adc_update+0x24>
		gADC_output[i] = gADC_sample[i] >> 2;	//Divide by 4 as the LSB 2 bits contain no useful information/
		gADC_curr_output[i] = gADC_curr[i] >> 2; //test code
	}
	
	// reenable interrupts.
	SREG = oldSREG;
    25a6:	ef e5       	ldi	r30, 0x5F	; 95
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	80 83       	st	Z, r24
}
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <adc_get_value_mv>:


/// Returns ADC sample in millivolts.
int16_t adc_get_value_mv( uint8_t ch)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	29 97       	sbiw	r28, 0x09	; 9
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	89 87       	std	Y+9, r24	; 0x09
	int32_t temp1, temp2	;
	//adc_conv_factor is 2^FACTOR_MULTIPLE larger than actual value. Did that for precision
	//So multiply by conversion factor and then perform division by left shift to get true value in mV.

	temp1 = gADC_output[ch];
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	fc 01       	movw	r30, r24
    25da:	e2 5d       	subi	r30, 0xD2	; 210
    25dc:	fc 4f       	sbci	r31, 0xFC	; 252
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	cc 01       	movw	r24, r24
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	af 83       	std	Y+7, r26	; 0x07
    25ee:	b8 87       	std	Y+8, r27	; 0x08
	temp2 = (temp1 * 743);
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	af 81       	ldd	r26, Y+7	; 0x07
    25f6:	b8 85       	ldd	r27, Y+8	; 0x08
    25f8:	27 ee       	ldi	r18, 0xE7	; 231
    25fa:	32 e0       	ldi	r19, 0x02	; 2
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__mulsi3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	ab 83       	std	Y+3, r26	; 0x03
    2612:	bc 83       	std	Y+4, r27	; 0x04
	temp2 = temp2 >> FACTOR_MULTIPLE;
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	ab 81       	ldd	r26, Y+3	; 0x03
    261a:	bc 81       	ldd	r27, Y+4	; 0x04
    261c:	07 2e       	mov	r0, r23
    261e:	7a e0       	ldi	r23, 0x0A	; 10
    2620:	b5 95       	asr	r27
    2622:	a7 95       	ror	r26
    2624:	97 95       	ror	r25
    2626:	87 95       	ror	r24
    2628:	7a 95       	dec	r23
    262a:	d1 f7       	brne	.-12     	; 0x2620 <adc_get_value_mv+0x68>
    262c:	70 2d       	mov	r23, r0
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	ab 83       	std	Y+3, r26	; 0x03
    2634:	bc 83       	std	Y+4, r27	; 0x04

	return (int16_t) temp2;
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
}
    263a:	29 96       	adiw	r28, 0x09	; 9
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <adc_get_sample>:

/// Returns ADC sample.
int16_t adc_get_sample( uint8_t ch)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
	return gADC_output[ch];
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	fc 01       	movw	r30, r24
    2664:	e2 5d       	subi	r30, 0xD2	; 210
    2666:	fc 4f       	sbci	r31, 0xFC	; 252
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
}
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <__vector_24>:


///ADC conversion complete ISR.
ISR(ADC_vect)
{
    2674:	1f 92       	push	r1
    2676:	0f 92       	push	r0
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	0f 92       	push	r0
    267c:	11 24       	eor	r1, r1
    267e:	2f 93       	push	r18
    2680:	3f 93       	push	r19
    2682:	4f 93       	push	r20
    2684:	5f 93       	push	r21
    2686:	6f 93       	push	r22
    2688:	7f 93       	push	r23
    268a:	8f 93       	push	r24
    268c:	9f 93       	push	r25
    268e:	af 93       	push	r26
    2690:	bf 93       	push	r27
    2692:	ef 93       	push	r30
    2694:	ff 93       	push	r31
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <__vector_24+0x28>
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	static uint8_t gADC_acc_cnt = 0;	//Accumlation count	
	
//	PORTB |= _BV(PIN5);	//Drive LED to measure the ISR execution time.
	
	low = ADCL;		// we have to read ADCL first; doing so locks both ADCL and ADCH until ADCH is read. 
    26a2:	e8 e7       	ldi	r30, 0x78	; 120
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	8b 83       	std	Y+3, r24	; 0x03
	high = ADCH;	
    26aa:	e9 e7       	ldi	r30, 0x79	; 121
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	8a 83       	std	Y+2, r24	; 0x02

	//Accumalate the current ADC sample.
	//In normal operation if the gADC_ch == 2, currently ADC is sampling channel 2 and result from channel 1 is available
	//read the ADC value and accumlate/average.		
	if(gADC_ch == 0)
    26b2:	80 91 db 02 	lds	r24, 0x02DB
    26b6:	88 23       	and	r24, r24
    26b8:	19 f5       	brne	.+70     	; 0x2700 <__vector_24+0x8c>
	{//special condition, when Ch == 0, then channel count has wrapped around hence the result present is from that of highest channel number.
		gADC_acc[NUM_ADC_CH - 1] += (high << 8) | low; 
    26ba:	40 91 ea 02 	lds	r20, 0x02EA
    26be:	50 91 eb 02 	lds	r21, 0x02EB
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	38 2f       	mov	r19, r24
    26ca:	22 27       	eor	r18, r18
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	82 2b       	or	r24, r18
    26d4:	93 2b       	or	r25, r19
    26d6:	84 0f       	add	r24, r20
    26d8:	95 1f       	adc	r25, r21
    26da:	90 93 eb 02 	sts	0x02EB, r25
    26de:	80 93 ea 02 	sts	0x02EA, r24
		gADC_curr[NUM_ADC_CH - 1] = (high << 8) | low; 	   
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	38 2f       	mov	r19, r24
    26ea:	22 27       	eor	r18, r18
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	82 2b       	or	r24, r18
    26f4:	93 2b       	or	r25, r19
    26f6:	90 93 4f 03 	sts	0x034F, r25
    26fa:	80 93 4e 03 	sts	0x034E, r24
    26fe:	42 c0       	rjmp	.+132    	; 0x2784 <__vector_24+0x110>
	}
	else
	{
		gADC_acc[gADC_ch-1] += (high << 8) | low;
    2700:	80 91 db 02 	lds	r24, 0x02DB
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	bc 01       	movw	r22, r24
    270a:	61 50       	subi	r22, 0x01	; 1
    270c:	70 40       	sbci	r23, 0x00	; 0
    270e:	80 91 db 02 	lds	r24, 0x02DB
    2712:	88 2f       	mov	r24, r24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	fc 01       	movw	r30, r24
    271e:	e4 52       	subi	r30, 0x24	; 36
    2720:	fd 4f       	sbci	r31, 0xFD	; 253
    2722:	40 81       	ld	r20, Z
    2724:	51 81       	ldd	r21, Z+1	; 0x01
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	38 2f       	mov	r19, r24
    272e:	22 27       	eor	r18, r18
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	82 2b       	or	r24, r18
    2738:	93 2b       	or	r25, r19
    273a:	9a 01       	movw	r18, r20
    273c:	28 0f       	add	r18, r24
    273e:	39 1f       	adc	r19, r25
    2740:	cb 01       	movw	r24, r22
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	fc 01       	movw	r30, r24
    2748:	e4 52       	subi	r30, 0x24	; 36
    274a:	fd 4f       	sbci	r31, 0xFD	; 253
    274c:	31 83       	std	Z+1, r19	; 0x01
    274e:	20 83       	st	Z, r18
		gADC_curr[gADC_ch-1] = (high << 8) | low;  	   			
    2750:	80 91 db 02 	lds	r24, 0x02DB
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	ac 01       	movw	r20, r24
    275a:	41 50       	subi	r20, 0x01	; 1
    275c:	50 40       	sbci	r21, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	38 2f       	mov	r19, r24
    2766:	22 27       	eor	r18, r18
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	82 2b       	or	r24, r18
    2770:	93 2b       	or	r25, r19
    2772:	9c 01       	movw	r18, r24
    2774:	ca 01       	movw	r24, r20
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	fc 01       	movw	r30, r24
    277c:	e0 5c       	subi	r30, 0xC0	; 192
    277e:	fc 4f       	sbci	r31, 0xFC	; 252
    2780:	31 83       	std	Z+1, r19	; 0x01
    2782:	20 83       	st	Z, r18
	}

	//Check if the number of accumlated samples has reached the max accumlation count.
	//This "if" statement could have been merged with above "if". Keeping them seperate for clarity.
    if(gADC_ch == 0)
    2784:	80 91 db 02 	lds	r24, 0x02DB
    2788:	88 23       	and	r24, r24
    278a:	09 f0       	breq	.+2      	; 0x278e <__vector_24+0x11a>
    278c:	49 c0       	rjmp	.+146    	; 0x2820 <__vector_24+0x1ac>
    {//finished cycling through all the channels increment accumlation count
    	++gADC_acc_cnt;
    278e:	80 91 da 02 	lds	r24, 0x02DA
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	80 93 da 02 	sts	0x02DA, r24
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
    2798:	80 91 da 02 	lds	r24, 0x02DA
    279c:	80 31       	cpi	r24, 0x10	; 16
    279e:	09 f0       	breq	.+2      	; 0x27a2 <__vector_24+0x12e>
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <__vector_24+0x1ac>
		{//Finished accumlating max number of samples, copy the value into output result array
			
			for(i = 0; i<NUM_ADC_CH; i++)
    27a2:	19 82       	std	Y+1, r1	; 0x01
    27a4:	22 c0       	rjmp	.+68     	; 0x27ea <__vector_24+0x176>
			{
				gADC_sample[i] = gADC_acc[i];
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	48 2f       	mov	r20, r24
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	fc 01       	movw	r30, r24
    27b8:	e4 52       	subi	r30, 0x24	; 36
    27ba:	fd 4f       	sbci	r31, 0xFD	; 253
    27bc:	20 81       	ld	r18, Z
    27be:	31 81       	ldd	r19, Z+1	; 0x01
    27c0:	ca 01       	movw	r24, r20
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	fc 01       	movw	r30, r24
    27c8:	e4 51       	subi	r30, 0x14	; 20
    27ca:	fd 4f       	sbci	r31, 0xFD	; 253
    27cc:	31 83       	std	Z+1, r19	; 0x01
    27ce:	20 83       	st	Z, r18
				gADC_acc[i] = 0;		//reset the accumlator register
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	fc 01       	movw	r30, r24
    27dc:	e4 52       	subi	r30, 0x24	; 36
    27de:	fd 4f       	sbci	r31, 0xFD	; 253
    27e0:	11 82       	std	Z+1, r1	; 0x01
    27e2:	10 82       	st	Z, r1
    {//finished cycling through all the channels increment accumlation count
    	++gADC_acc_cnt;
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
		{//Finished accumlating max number of samples, copy the value into output result array
			
			for(i = 0; i<NUM_ADC_CH; i++)
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 30       	cpi	r24, 0x08	; 8
    27ee:	d8 f2       	brcs	.-74     	; 0x27a6 <__vector_24+0x132>
			{
				gADC_sample[i] = gADC_acc[i];
				gADC_acc[i] = 0;		//reset the accumlator register
			}
			
			gADC_acc_cnt = 0;
    27f0:	10 92 da 02 	sts	0x02DA, r1
			gADC_new_output = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	80 93 d9 02 	sts	0x02D9, r24
			++gSample_cnt;
    27fa:	80 91 62 03 	lds	r24, 0x0362
    27fe:	90 91 63 03 	lds	r25, 0x0363
    2802:	a0 91 64 03 	lds	r26, 0x0364
    2806:	b0 91 65 03 	lds	r27, 0x0365
    280a:	01 96       	adiw	r24, 0x01	; 1
    280c:	a1 1d       	adc	r26, r1
    280e:	b1 1d       	adc	r27, r1
    2810:	80 93 62 03 	sts	0x0362, r24
    2814:	90 93 63 03 	sts	0x0363, r25
    2818:	a0 93 64 03 	sts	0x0364, r26
    281c:	b0 93 65 03 	sts	0x0365, r27
		}    
    }
   
    ++gADC_ch;
    2820:	80 91 db 02 	lds	r24, 0x02DB
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	80 93 db 02 	sts	0x02DB, r24
    if(gADC_ch == NUM_ADC_CH)
    282a:	80 91 db 02 	lds	r24, 0x02DB
    282e:	88 30       	cpi	r24, 0x08	; 8
    2830:	11 f4       	brne	.+4      	; 0x2836 <__vector_24+0x1c2>
    {//finished cycling through all the channels
	   	gADC_ch=0; //cycle back to first channel
    2832:	10 92 db 02 	sts	0x02DB, r1
	}    

	//Write to channel mux register at the end so that the required 1 ADC clock time delay after start of conversion is met.
    //select the next channel     
	adc_set_ch(gADC_ch);
    2836:	80 91 db 02 	lds	r24, 0x02DB
    283a:	0e 94 3f 10 	call	0x207e	; 0x207e <adc_set_ch>

//	PORTB &= (~_BV(PIN5));	//Drive LED to measure the ISR execution time.
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	ff 91       	pop	r31
    284a:	ef 91       	pop	r30
    284c:	bf 91       	pop	r27
    284e:	af 91       	pop	r26
    2850:	9f 91       	pop	r25
    2852:	8f 91       	pop	r24
    2854:	7f 91       	pop	r23
    2856:	6f 91       	pop	r22
    2858:	5f 91       	pop	r21
    285a:	4f 91       	pop	r20
    285c:	3f 91       	pop	r19
    285e:	2f 91       	pop	r18
    2860:	0f 90       	pop	r0
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	0f 90       	pop	r0
    2866:	1f 90       	pop	r1
    2868:	18 95       	reti

0000286a <_Z4loopv>:
	//Interrupts are enabled in the 
	//sei(); //enable interrupts

}

void loop() 
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	2b 97       	sbiw	r28, 0x0b	; 11
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
{
	uint8_t	i;
	uint16_t chk_sum = 0;
    287e:	1a 86       	std	Y+10, r1	; 0x0a
    2880:	19 86       	std	Y+9, r1	; 0x09
	
	int16_t x,y,z;


//	//use this for loop to reduce the data rate at which data is sent to pc.
 	for(i=0;i<1;++i)
    2882:	1b 86       	std	Y+11, r1	; 0x0b
    2884:	32 c0       	rjmp	.+100    	; 0x28ea <_Z4loopv+0x80>
 	{
 		adc_update();
    2886:	0e 94 87 12 	call	0x250e	; 0x250e <adc_update>
		
		x = adc_get_value_mv(ACCL_X_CH);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <adc_get_value_mv>
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
		y = adc_get_value_mv(ACCL_Y_CH);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <adc_get_value_mv>
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
		z = adc_get_value_mv(ACCL_Z_CH);
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <adc_get_value_mv>
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01

		Acclmtr.process_ADC_sample(x,y,z);
    28a8:	2d 81       	ldd	r18, Y+5	; 0x05
    28aa:	3e 81       	ldd	r19, Y+6	; 0x06
    28ac:	4b 81       	ldd	r20, Y+3	; 0x03
    28ae:	5c 81       	ldd	r21, Y+4	; 0x04
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	84 e1       	ldi	r24, 0x14	; 20
    28b6:	93 e0       	ldi	r25, 0x03	; 3
    28b8:	b9 01       	movw	r22, r18
    28ba:	9f 01       	movw	r18, r30
    28bc:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN13Accelerometer18process_ADC_sampleEjjj>
 		Gyro.process_ADC_sample(gADC_output[3], gADC_output[4], gADC_output[5]);
    28c0:	20 91 34 03 	lds	r18, 0x0334
    28c4:	30 91 35 03 	lds	r19, 0x0335
    28c8:	40 91 36 03 	lds	r20, 0x0336
    28cc:	50 91 37 03 	lds	r21, 0x0337
    28d0:	e0 91 38 03 	lds	r30, 0x0338
    28d4:	f0 91 39 03 	lds	r31, 0x0339
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	b9 01       	movw	r22, r18
    28de:	9f 01       	movw	r18, r30
    28e0:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN10GyroSensor18process_ADC_sampleEjjj>
	
	int16_t x,y,z;


//	//use this for loop to reduce the data rate at which data is sent to pc.
 	for(i=0;i<1;++i)
    28e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e6:	8f 5f       	subi	r24, 0xFF	; 255
    28e8:	8b 87       	std	Y+11, r24	; 0x0b
    28ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ec:	88 23       	and	r24, r24
    28ee:	59 f2       	breq	.-106    	; 0x2886 <_Z4loopv+0x1c>

		Acclmtr.process_ADC_sample(x,y,z);
 		Gyro.process_ADC_sample(gADC_output[3], gADC_output[4], gADC_output[5]);
 	}
 
 	GPIO_TOGGLE(LED); //LED is on Port D, Pin 4
    28f0:	ab e2       	ldi	r26, 0x2B	; 43
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	eb e2       	ldi	r30, 0x2B	; 43
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	90 81       	ld	r25, Z
    28fa:	80 e1       	ldi	r24, 0x10	; 16
    28fc:	89 27       	eor	r24, r25
    28fe:	8c 93       	st	X, r24

 		
///////////////////////////////////////////////////////////////	
// 	//Send ADC data in ASCII format.
  	Serial.print(adc_get_sample_time());
    2900:	0e 94 54 10 	call	0x20a8	; 0x20a8 <adc_get_sample_time>
    2904:	9b 01       	movw	r18, r22
    2906:	ac 01       	movw	r20, r24
    2908:	86 ec       	ldi	r24, 0xC6	; 198
    290a:	92 e0       	ldi	r25, 0x02	; 2
    290c:	ba 01       	movw	r22, r20
    290e:	a9 01       	movw	r20, r18
    2910:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_ZN5Print5printEm>
  	
  	for(i=0;i<6;++i)
    2914:	1b 86       	std	Y+11, r1	; 0x0b
    2916:	17 c0       	rjmp	.+46     	; 0x2946 <_Z4loopv+0xdc>
  	{
		Serial.print(',');
    2918:	86 ec       	ldi	r24, 0xC6	; 198
    291a:	92 e0       	ldi	r25, 0x02	; 2
    291c:	6c e2       	ldi	r22, 0x2C	; 44
    291e:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN5Print5printEc>
  		Serial.print((unsigned int) gADC_output[i]);
    2922:	8b 85       	ldd	r24, Y+11	; 0x0b
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	fc 01       	movw	r30, r24
    292e:	e2 5d       	subi	r30, 0xD2	; 210
    2930:	fc 4f       	sbci	r31, 0xFC	; 252
    2932:	20 81       	ld	r18, Z
    2934:	31 81       	ldd	r19, Z+1	; 0x01
    2936:	86 ec       	ldi	r24, 0xC6	; 198
    2938:	92 e0       	ldi	r25, 0x02	; 2
    293a:	b9 01       	movw	r22, r18
    293c:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZN5Print5printEj>
 		
///////////////////////////////////////////////////////////////	
// 	//Send ADC data in ASCII format.
  	Serial.print(adc_get_sample_time());
  	
  	for(i=0;i<6;++i)
    2940:	8b 85       	ldd	r24, Y+11	; 0x0b
    2942:	8f 5f       	subi	r24, 0xFF	; 255
    2944:	8b 87       	std	Y+11, r24	; 0x0b
    2946:	8b 85       	ldd	r24, Y+11	; 0x0b
    2948:	86 30       	cpi	r24, 0x06	; 6
    294a:	30 f3       	brcs	.-52     	; 0x2918 <_Z4loopv+0xae>
  	{
		Serial.print(',');
  		Serial.print((unsigned int) gADC_output[i]);
   	}
  	Serial.println();
    294c:	86 ec       	ldi	r24, 0xC6	; 198
    294e:	92 e0       	ldi	r25, 0x02	; 2
    2950:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
//  	
//  	pkt.chk_sum = chk_sum;
//  	
//  	Serial.write((uint8_t*)&pkt, sizeof(chr6d_msg));
/////////////////////////////////////////////////////////////
}
    2954:	2b 96       	adiw	r28, 0x0b	; 11
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <_Z16sensor_calibratev>:

struct chr6d_msg pkt;
///////////////////////////////////////////////////////////////////////////////


void sensor_calibrate()
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	c0 54       	subi	r28, 0x40	; 64
    2970:	d0 40       	sbci	r29, 0x00	; 0
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
{
	uint8_t	i;
	const uint8_t AVG_CNT = 100;
    297c:	84 e6       	ldi	r24, 0x64	; 100
    297e:	8f af       	std	Y+63, r24	; 0x3f

	uint32_t gyro_x_zero, gyro_y_zero, gyro_z_zero;
	uint32_t acc_x_zeroG, acc_y_zeroG, acc_z_zeroG;
	
		
	GPIO_SET(GYRO_AUTO_ZERO); //send auto zero pulse
    2980:	a5 e2       	ldi	r26, 0x25	; 37
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e5 e2       	ldi	r30, 0x25	; 37
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	82 60       	ori	r24, 0x02	; 2
    298c:	8c 93       	st	X, r24
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a8 ec       	ldi	r26, 0xC8	; 200
    2994:	b2 e4       	ldi	r27, 0x42	; 66
    2996:	8b a3       	std	Y+35, r24	; 0x23
    2998:	9c a3       	std	Y+36, r25	; 0x24
    299a:	ad a3       	std	Y+37, r26	; 0x25
    299c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    299e:	6b a1       	ldd	r22, Y+35	; 0x23
    29a0:	7c a1       	ldd	r23, Y+36	; 0x24
    29a2:	8d a1       	ldd	r24, Y+37	; 0x25
    29a4:	9e a1       	ldd	r25, Y+38	; 0x26
    29a6:	25 e5       	ldi	r18, 0x55	; 85
    29a8:	35 e5       	ldi	r19, 0x55	; 85
    29aa:	45 ed       	ldi	r20, 0xD5	; 213
    29ac:	50 e4       	ldi	r21, 0x40	; 64
    29ae:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8f 8f       	std	Y+31, r24	; 0x1f
    29b8:	98 a3       	std	Y+32, r25	; 0x20
    29ba:	a9 a3       	std	Y+33, r26	; 0x21
    29bc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    29be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    29c0:	78 a1       	ldd	r23, Y+32	; 0x20
    29c2:	89 a1       	ldd	r24, Y+33	; 0x21
    29c4:	9a a1       	ldd	r25, Y+34	; 0x22
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 47 04 	call	0x88e	; 0x88e <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	1c f4       	brge	.+6      	; 0x29dc <_Z16sensor_calibratev+0x76>
		__ticks = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	8e 8f       	std	Y+30, r24	; 0x1e
    29da:	91 c0       	rjmp	.+290    	; 0x2afe <_Z16sensor_calibratev+0x198>
	else if (__tmp > 255)
    29dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    29de:	78 a1       	ldd	r23, Y+32	; 0x20
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	53 e4       	ldi	r21, 0x43	; 67
    29ec:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <_Z16sensor_calibratev+0x90>
    29f4:	7b c0       	rjmp	.+246    	; 0x2aec <_Z16sensor_calibratev+0x186>
	{
		_delay_ms(__us / 1000.0);
    29f6:	6b a1       	ldd	r22, Y+35	; 0x23
    29f8:	7c a1       	ldd	r23, Y+36	; 0x24
    29fa:	8d a1       	ldd	r24, Y+37	; 0x25
    29fc:	9e a1       	ldd	r25, Y+38	; 0x26
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a e7       	ldi	r20, 0x7A	; 122
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8a 8f       	std	Y+26, r24	; 0x1a
    2a10:	9b 8f       	std	Y+27, r25	; 0x1b
    2a12:	ac 8f       	std	Y+28, r26	; 0x1c
    2a14:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a18:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e4       	ldi	r19, 0x40	; 64
    2a22:	4c e9       	ldi	r20, 0x9C	; 156
    2a24:	55 e4       	ldi	r21, 0x45	; 69
    2a26:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8e 8b       	std	Y+22, r24	; 0x16
    2a30:	9f 8b       	std	Y+23, r25	; 0x17
    2a32:	a8 8f       	std	Y+24, r26	; 0x18
    2a34:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2a36:	6e 89       	ldd	r22, Y+22	; 0x16
    2a38:	7f 89       	ldd	r23, Y+23	; 0x17
    2a3a:	88 8d       	ldd	r24, Y+24	; 0x18
    2a3c:	99 8d       	ldd	r25, Y+25	; 0x19
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	5f e3       	ldi	r21, 0x3F	; 63
    2a46:	0e 94 47 04 	call	0x88e	; 0x88e <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	2c f4       	brge	.+10     	; 0x2a58 <_Z16sensor_calibratev+0xf2>
		__ticks = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9d 8b       	std	Y+21, r25	; 0x15
    2a54:	8c 8b       	std	Y+20, r24	; 0x14
    2a56:	3f c0       	rjmp	.+126    	; 0x2ad6 <_Z16sensor_calibratev+0x170>
	else if (__tmp > 65535)
    2a58:	6e 89       	ldd	r22, Y+22	; 0x16
    2a5a:	7f 89       	ldd	r23, Y+23	; 0x17
    2a5c:	88 8d       	ldd	r24, Y+24	; 0x18
    2a5e:	99 8d       	ldd	r25, Y+25	; 0x19
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	3f ef       	ldi	r19, 0xFF	; 255
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	57 e4       	ldi	r21, 0x47	; 71
    2a68:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	4c f5       	brge	.+82     	; 0x2ac2 <_Z16sensor_calibratev+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a70:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a72:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	51 e4       	ldi	r21, 0x41	; 65
    2a80:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9d 8b       	std	Y+21, r25	; 0x15
    2a96:	8c 8b       	std	Y+20, r24	; 0x14
    2a98:	0f c0       	rjmp	.+30     	; 0x2ab8 <_Z16sensor_calibratev+0x152>
    2a9a:	84 ef       	ldi	r24, 0xF4	; 244
    2a9c:	91 e0       	ldi	r25, 0x01	; 1
    2a9e:	9b 8b       	std	Y+19, r25	; 0x13
    2aa0:	8a 8b       	std	Y+18, r24	; 0x12
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2aa2:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa4:	9b 89       	ldd	r25, Y+19	; 0x13
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <_Z16sensor_calibratev+0x140>
    2aaa:	9b 8b       	std	Y+19, r25	; 0x13
    2aac:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aae:	8c 89       	ldd	r24, Y+20	; 0x14
    2ab0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9d 8b       	std	Y+21, r25	; 0x15
    2ab6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab8:	8c 89       	ldd	r24, Y+20	; 0x14
    2aba:	9d 89       	ldd	r25, Y+21	; 0x15
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	69 f7       	brne	.-38     	; 0x2a9a <_Z16sensor_calibratev+0x134>
    2ac0:	24 c0       	rjmp	.+72     	; 0x2b0a <_Z16sensor_calibratev+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac2:	6e 89       	ldd	r22, Y+22	; 0x16
    2ac4:	7f 89       	ldd	r23, Y+23	; 0x17
    2ac6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ac8:	99 8d       	ldd	r25, Y+25	; 0x19
    2aca:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9d 8b       	std	Y+21, r25	; 0x15
    2ad4:	8c 8b       	std	Y+20, r24	; 0x14
    2ad6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ad8:	9d 89       	ldd	r25, Y+21	; 0x15
    2ada:	99 8b       	std	Y+17, r25	; 0x11
    2adc:	88 8b       	std	Y+16, r24	; 0x10
    2ade:	88 89       	ldd	r24, Y+16	; 0x10
    2ae0:	99 89       	ldd	r25, Y+17	; 0x11
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <_Z16sensor_calibratev+0x17c>
    2ae6:	99 8b       	std	Y+17, r25	; 0x11
    2ae8:	88 8b       	std	Y+16, r24	; 0x10
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <_Z16sensor_calibratev+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2aec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2aee:	78 a1       	ldd	r23, Y+32	; 0x20
    2af0:	89 a1       	ldd	r24, Y+33	; 0x21
    2af2:	9a a1       	ldd	r25, Y+34	; 0x22
    2af4:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8e 8f       	std	Y+30, r24	; 0x1e
    2afe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b00:	8f 87       	std	Y+15, r24	; 0x0f
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    2b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b04:	8a 95       	dec	r24
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <_Z16sensor_calibratev+0x19e>
    2b08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	GPIO_CLEAR(GYRO_AUTO_ZERO); 
    2b0a:	a5 e2       	ldi	r26, 0x25	; 37
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e5 e2       	ldi	r30, 0x25	; 37
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	8d 7f       	andi	r24, 0xFD	; 253
    2b16:	8c 93       	st	X, r24
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a8 ec       	ldi	r26, 0xC8	; 200
    2b1e:	b2 e4       	ldi	r27, 0x42	; 66
    2b20:	8b 87       	std	Y+11, r24	; 0x0b
    2b22:	9c 87       	std	Y+12, r25	; 0x0c
    2b24:	ad 87       	std	Y+13, r26	; 0x0d
    2b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e4       	ldi	r19, 0x40	; 64
    2b34:	4c e9       	ldi	r20, 0x9C	; 156
    2b36:	55 e4       	ldi	r21, 0x45	; 69
    2b38:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f 83       	std	Y+7, r24	; 0x07
    2b42:	98 87       	std	Y+8, r25	; 0x08
    2b44:	a9 87       	std	Y+9, r26	; 0x09
    2b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 47 04 	call	0x88e	; 0x88e <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <_Z16sensor_calibratev+0x204>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <_Z16sensor_calibratev+0x282>
	else if (__tmp > 65535)
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <_Z16sensor_calibratev+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <_Z16sensor_calibratev+0x264>
    2bac:	84 ef       	ldi	r24, 0xF4	; 244
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <_Z16sensor_calibratev+0x252>
    2bbc:	9c 83       	std	Y+4, r25	; 0x04
    2bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <_Z16sensor_calibratev+0x246>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <_Z16sensor_calibratev+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <_Z16sensor_calibratev+0x28e>
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(100); //Gyro needs 10ms to finish auto zero, but we have low pass filter so wait longer

	acc_x_zeroG = 0;
    2bfc:	1f a6       	std	Y+47, r1	; 0x2f
    2bfe:	18 aa       	std	Y+48, r1	; 0x30
    2c00:	19 aa       	std	Y+49, r1	; 0x31
    2c02:	1a aa       	std	Y+50, r1	; 0x32
 	acc_y_zeroG = 0;
    2c04:	1b a6       	std	Y+43, r1	; 0x2b
    2c06:	1c a6       	std	Y+44, r1	; 0x2c
    2c08:	1d a6       	std	Y+45, r1	; 0x2d
    2c0a:	1e a6       	std	Y+46, r1	; 0x2e
 	acc_z_zeroG = 0;
    2c0c:	1f a2       	std	Y+39, r1	; 0x27
    2c0e:	18 a6       	std	Y+40, r1	; 0x28
    2c10:	19 a6       	std	Y+41, r1	; 0x29
    2c12:	1a a6       	std	Y+42, r1	; 0x2a
 	gyro_x_zero = 0;
    2c14:	1b ae       	std	Y+59, r1	; 0x3b
    2c16:	1c ae       	std	Y+60, r1	; 0x3c
    2c18:	1d ae       	std	Y+61, r1	; 0x3d
    2c1a:	1e ae       	std	Y+62, r1	; 0x3e
 	gyro_y_zero = 0;
    2c1c:	1f aa       	std	Y+55, r1	; 0x37
    2c1e:	18 ae       	std	Y+56, r1	; 0x38
    2c20:	19 ae       	std	Y+57, r1	; 0x39
    2c22:	1a ae       	std	Y+58, r1	; 0x3a
 	gyro_z_zero = 0;
    2c24:	1b aa       	std	Y+51, r1	; 0x33
    2c26:	1c aa       	std	Y+52, r1	; 0x34
    2c28:	1d aa       	std	Y+53, r1	; 0x35
    2c2a:	1e aa       	std	Y+54, r1	; 0x36
	
	for(i=0;i<AVG_CNT;++i) //collect data for 1sec or 100 times
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e0 5c       	subi	r30, 0xC0	; 192
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	10 82       	st	Z, r1
    2c34:	80 c0       	rjmp	.+256    	; 0x2d36 <_Z16sensor_calibratev+0x3d0>
	{
		adc_update();
    2c36:	0e 94 87 12 	call	0x250e	; 0x250e <adc_update>
 		acc_x_zeroG += adc_get_value_mv(ACCL_X_CH);
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <adc_get_value_mv>
    2c40:	9c 01       	movw	r18, r24
    2c42:	44 27       	eor	r20, r20
    2c44:	37 fd       	sbrc	r19, 7
    2c46:	40 95       	com	r20
    2c48:	54 2f       	mov	r21, r20
    2c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c4e:	a9 a9       	ldd	r26, Y+49	; 0x31
    2c50:	ba a9       	ldd	r27, Y+50	; 0x32
    2c52:	82 0f       	add	r24, r18
    2c54:	93 1f       	adc	r25, r19
    2c56:	a4 1f       	adc	r26, r20
    2c58:	b5 1f       	adc	r27, r21
    2c5a:	8f a7       	std	Y+47, r24	; 0x2f
    2c5c:	98 ab       	std	Y+48, r25	; 0x30
    2c5e:	a9 ab       	std	Y+49, r26	; 0x31
    2c60:	ba ab       	std	Y+50, r27	; 0x32
	 	acc_y_zeroG += adc_get_value_mv(ACCL_Y_CH);
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <adc_get_value_mv>
    2c68:	9c 01       	movw	r18, r24
    2c6a:	44 27       	eor	r20, r20
    2c6c:	37 fd       	sbrc	r19, 7
    2c6e:	40 95       	com	r20
    2c70:	54 2f       	mov	r21, r20
    2c72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c76:	ad a5       	ldd	r26, Y+45	; 0x2d
    2c78:	be a5       	ldd	r27, Y+46	; 0x2e
    2c7a:	82 0f       	add	r24, r18
    2c7c:	93 1f       	adc	r25, r19
    2c7e:	a4 1f       	adc	r26, r20
    2c80:	b5 1f       	adc	r27, r21
    2c82:	8b a7       	std	Y+43, r24	; 0x2b
    2c84:	9c a7       	std	Y+44, r25	; 0x2c
    2c86:	ad a7       	std	Y+45, r26	; 0x2d
    2c88:	be a7       	std	Y+46, r27	; 0x2e
	 	acc_z_zeroG += adc_get_value_mv(ACCL_Z_CH);
    2c8a:	82 e0       	ldi	r24, 0x02	; 2
    2c8c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <adc_get_value_mv>
    2c90:	9c 01       	movw	r18, r24
    2c92:	44 27       	eor	r20, r20
    2c94:	37 fd       	sbrc	r19, 7
    2c96:	40 95       	com	r20
    2c98:	54 2f       	mov	r21, r20
    2c9a:	8f a1       	ldd	r24, Y+39	; 0x27
    2c9c:	98 a5       	ldd	r25, Y+40	; 0x28
    2c9e:	a9 a5       	ldd	r26, Y+41	; 0x29
    2ca0:	ba a5       	ldd	r27, Y+42	; 0x2a
    2ca2:	82 0f       	add	r24, r18
    2ca4:	93 1f       	adc	r25, r19
    2ca6:	a4 1f       	adc	r26, r20
    2ca8:	b5 1f       	adc	r27, r21
    2caa:	8f a3       	std	Y+39, r24	; 0x27
    2cac:	98 a7       	std	Y+40, r25	; 0x28
    2cae:	a9 a7       	std	Y+41, r26	; 0x29
    2cb0:	ba a7       	std	Y+42, r27	; 0x2a
	 	
	 	gyro_x_zero += gADC_output[3];
    2cb2:	80 91 34 03 	lds	r24, 0x0334
    2cb6:	90 91 35 03 	lds	r25, 0x0335
    2cba:	9c 01       	movw	r18, r24
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cc2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cc4:	ad ad       	ldd	r26, Y+61	; 0x3d
    2cc6:	be ad       	ldd	r27, Y+62	; 0x3e
    2cc8:	82 0f       	add	r24, r18
    2cca:	93 1f       	adc	r25, r19
    2ccc:	a4 1f       	adc	r26, r20
    2cce:	b5 1f       	adc	r27, r21
    2cd0:	8b af       	std	Y+59, r24	; 0x3b
    2cd2:	9c af       	std	Y+60, r25	; 0x3c
    2cd4:	ad af       	std	Y+61, r26	; 0x3d
    2cd6:	be af       	std	Y+62, r27	; 0x3e
	 	gyro_y_zero += gADC_output[4];
    2cd8:	80 91 36 03 	lds	r24, 0x0336
    2cdc:	90 91 37 03 	lds	r25, 0x0337
    2ce0:	9c 01       	movw	r18, r24
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cea:	a9 ad       	ldd	r26, Y+57	; 0x39
    2cec:	ba ad       	ldd	r27, Y+58	; 0x3a
    2cee:	82 0f       	add	r24, r18
    2cf0:	93 1f       	adc	r25, r19
    2cf2:	a4 1f       	adc	r26, r20
    2cf4:	b5 1f       	adc	r27, r21
    2cf6:	8f ab       	std	Y+55, r24	; 0x37
    2cf8:	98 af       	std	Y+56, r25	; 0x38
    2cfa:	a9 af       	std	Y+57, r26	; 0x39
    2cfc:	ba af       	std	Y+58, r27	; 0x3a
	 	gyro_z_zero += gADC_output[5];		
    2cfe:	80 91 38 03 	lds	r24, 0x0338
    2d02:	90 91 39 03 	lds	r25, 0x0339
    2d06:	9c 01       	movw	r18, r24
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	50 e0       	ldi	r21, 0x00	; 0
    2d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d10:	ad a9       	ldd	r26, Y+53	; 0x35
    2d12:	be a9       	ldd	r27, Y+54	; 0x36
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	a4 1f       	adc	r26, r20
    2d1a:	b5 1f       	adc	r27, r21
    2d1c:	8b ab       	std	Y+51, r24	; 0x33
    2d1e:	9c ab       	std	Y+52, r25	; 0x34
    2d20:	ad ab       	std	Y+53, r26	; 0x35
    2d22:	be ab       	std	Y+54, r27	; 0x36
 	acc_z_zeroG = 0;
 	gyro_x_zero = 0;
 	gyro_y_zero = 0;
 	gyro_z_zero = 0;
	
	for(i=0;i<AVG_CNT;++i) //collect data for 1sec or 100 times
    2d24:	fe 01       	movw	r30, r28
    2d26:	e0 5c       	subi	r30, 0xC0	; 192
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8f 5f       	subi	r24, 0xFF	; 255
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e0 5c       	subi	r30, 0xC0	; 192
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 83       	st	Z, r24
    2d36:	fe 01       	movw	r30, r28
    2d38:	e0 5c       	subi	r30, 0xC0	; 192
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	84 36       	cpi	r24, 0x64	; 100
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <_Z16sensor_calibratev+0x3de>
    2d42:	79 cf       	rjmp	.-270    	; 0x2c36 <_Z16sensor_calibratev+0x2d0>
	 	gyro_y_zero += gADC_output[4];
	 	gyro_z_zero += gADC_output[5];		
	
	}	
	
	acc_x_zeroG /= AVG_CNT;
    2d44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d46:	98 a9       	ldd	r25, Y+48	; 0x30
    2d48:	a9 a9       	ldd	r26, Y+49	; 0x31
    2d4a:	ba a9       	ldd	r27, Y+50	; 0x32
    2d4c:	24 e6       	ldi	r18, 0x64	; 100
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    2d5c:	da 01       	movw	r26, r20
    2d5e:	c9 01       	movw	r24, r18
    2d60:	8f a7       	std	Y+47, r24	; 0x2f
    2d62:	98 ab       	std	Y+48, r25	; 0x30
    2d64:	a9 ab       	std	Y+49, r26	; 0x31
    2d66:	ba ab       	std	Y+50, r27	; 0x32
 	acc_y_zeroG /= AVG_CNT;
    2d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d6c:	ad a5       	ldd	r26, Y+45	; 0x2d
    2d6e:	be a5       	ldd	r27, Y+46	; 0x2e
    2d70:	24 e6       	ldi	r18, 0x64	; 100
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    2d80:	da 01       	movw	r26, r20
    2d82:	c9 01       	movw	r24, r18
    2d84:	8b a7       	std	Y+43, r24	; 0x2b
    2d86:	9c a7       	std	Y+44, r25	; 0x2c
    2d88:	ad a7       	std	Y+45, r26	; 0x2d
    2d8a:	be a7       	std	Y+46, r27	; 0x2e
 	acc_z_zeroG /= AVG_CNT;
    2d8c:	8f a1       	ldd	r24, Y+39	; 0x27
    2d8e:	98 a5       	ldd	r25, Y+40	; 0x28
    2d90:	a9 a5       	ldd	r26, Y+41	; 0x29
    2d92:	ba a5       	ldd	r27, Y+42	; 0x2a
    2d94:	24 e6       	ldi	r18, 0x64	; 100
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    2da4:	da 01       	movw	r26, r20
    2da6:	c9 01       	movw	r24, r18
    2da8:	8f a3       	std	Y+39, r24	; 0x27
    2daa:	98 a7       	std	Y+40, r25	; 0x28
    2dac:	a9 a7       	std	Y+41, r26	; 0x29
    2dae:	ba a7       	std	Y+42, r27	; 0x2a
 	gyro_x_zero /= AVG_CNT;
    2db0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2db2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2db4:	ad ad       	ldd	r26, Y+61	; 0x3d
    2db6:	be ad       	ldd	r27, Y+62	; 0x3e
    2db8:	24 e6       	ldi	r18, 0x64	; 100
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	cd 01       	movw	r24, r26
    2dc4:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    2dc8:	da 01       	movw	r26, r20
    2dca:	c9 01       	movw	r24, r18
    2dcc:	8b af       	std	Y+59, r24	; 0x3b
    2dce:	9c af       	std	Y+60, r25	; 0x3c
    2dd0:	ad af       	std	Y+61, r26	; 0x3d
    2dd2:	be af       	std	Y+62, r27	; 0x3e
 	gyro_y_zero /= AVG_CNT;
    2dd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2dd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2dd8:	a9 ad       	ldd	r26, Y+57	; 0x39
    2dda:	ba ad       	ldd	r27, Y+58	; 0x3a
    2ddc:	24 e6       	ldi	r18, 0x64	; 100
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    2dec:	da 01       	movw	r26, r20
    2dee:	c9 01       	movw	r24, r18
    2df0:	8f ab       	std	Y+55, r24	; 0x37
    2df2:	98 af       	std	Y+56, r25	; 0x38
    2df4:	a9 af       	std	Y+57, r26	; 0x39
    2df6:	ba af       	std	Y+58, r27	; 0x3a
 	gyro_z_zero /= AVG_CNT;
    2df8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    2dfc:	ad a9       	ldd	r26, Y+53	; 0x35
    2dfe:	be a9       	ldd	r27, Y+54	; 0x36
    2e00:	24 e6       	ldi	r18, 0x64	; 100
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__udivmodsi4>
    2e10:	da 01       	movw	r26, r20
    2e12:	c9 01       	movw	r24, r18
    2e14:	8b ab       	std	Y+51, r24	; 0x33
    2e16:	9c ab       	std	Y+52, r25	; 0x34
    2e18:	ad ab       	std	Y+53, r26	; 0x35
    2e1a:	be ab       	std	Y+54, r27	; 0x36
	
 	 	
 	//Note for Z axis using the same value as X axis. When sensor board is flat, the Z is either +/- 1G.
	Acclmtr.set_zerog_values((uint16_t)acc_x_zeroG, (uint16_t)acc_y_zeroG, (uint16_t) acc_x_zeroG);	 	 	
    2e1c:	2f a5       	ldd	r18, Y+47	; 0x2f
    2e1e:	38 a9       	ldd	r19, Y+48	; 0x30
    2e20:	4b a5       	ldd	r20, Y+43	; 0x2b
    2e22:	5c a5       	ldd	r21, Y+44	; 0x2c
    2e24:	ef a5       	ldd	r30, Y+47	; 0x2f
    2e26:	f8 a9       	ldd	r31, Y+48	; 0x30
    2e28:	84 e1       	ldi	r24, 0x14	; 20
    2e2a:	93 e0       	ldi	r25, 0x03	; 3
    2e2c:	b9 01       	movw	r22, r18
    2e2e:	9f 01       	movw	r18, r30
    2e30:	0e 94 cf 18 	call	0x319e	; 0x319e <_ZN13Accelerometer16set_zerog_valuesEjjj>
 			
	Gyro.set_zero_values((uint16_t)gyro_x_zero, (uint16_t)gyro_y_zero, (uint16_t) gyro_z_zero);	 	 	
    2e34:	2b ad       	ldd	r18, Y+59	; 0x3b
    2e36:	3c ad       	ldd	r19, Y+60	; 0x3c
    2e38:	4f a9       	ldd	r20, Y+55	; 0x37
    2e3a:	58 ad       	ldd	r21, Y+56	; 0x38
    2e3c:	eb a9       	ldd	r30, Y+51	; 0x33
    2e3e:	fc a9       	ldd	r31, Y+52	; 0x34
    2e40:	80 e2       	ldi	r24, 0x20	; 32
    2e42:	93 e0       	ldi	r25, 0x03	; 3
    2e44:	b9 01       	movw	r22, r18
    2e46:	9f 01       	movw	r18, r30
    2e48:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <_ZN10GyroSensor15set_zero_valuesEjjj>
}
    2e4c:	c0 5c       	subi	r28, 0xC0	; 192
    2e4e:	df 4f       	sbci	r29, 0xFF	; 255
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <_Z5setupv>:


void setup() 
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <_Z5setupv+0x6>
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <_Z5setupv+0x8>
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
{

	Serial.begin(115200); 
    2e6c:	86 ec       	ldi	r24, 0xC6	; 198
    2e6e:	92 e0       	ldi	r25, 0x02	; 2
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	52 ec       	ldi	r21, 0xC2	; 194
    2e74:	61 e0       	ldi	r22, 0x01	; 1
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <_ZN14HardwareSerial5beginEl>
	Serial.println();
    2e7c:	86 ec       	ldi	r24, 0xC6	; 198
    2e7e:	92 e0       	ldi	r25, 0x02	; 2
    2e80:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
	Serial.println();
    2e84:	86 ec       	ldi	r24, 0xC6	; 198
    2e86:	92 e0       	ldi	r25, 0x02	; 2
    2e88:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
	Serial.println();
    2e8c:	86 ec       	ldi	r24, 0xC6	; 198
    2e8e:	92 e0       	ldi	r25, 0x02	; 2
    2e90:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
	Serial.println("Pushpak Quadrotor........");
    2e94:	86 ec       	ldi	r24, 0xC6	; 198
    2e96:	92 e0       	ldi	r25, 0x02	; 2
    2e98:	22 e0       	ldi	r18, 0x02	; 2
    2e9a:	31 e0       	ldi	r19, 0x01	; 1
    2e9c:	b9 01       	movw	r22, r18
    2e9e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN5Print7printlnEPKc>
	
	GPIO_OUTPUT(LED);
    2ea2:	aa e2       	ldi	r26, 0x2A	; 42
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	ea e2       	ldi	r30, 0x2A	; 42
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	80 61       	ori	r24, 0x10	; 16
    2eae:	8c 93       	st	X, r24
	GPIO_OUTPUT(GYRO_AUTO_ZERO);
    2eb0:	a4 e2       	ldi	r26, 0x24	; 36
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e4 e2       	ldi	r30, 0x24	; 36
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	82 60       	ori	r24, 0x02	; 2
    2ebc:	8c 93       	st	X, r24

	adc_initialize(); //Initialize adc at the last as this funtion enable interrupts.
    2ebe:	0e 94 7e 10 	call	0x20fc	; 0x20fc <adc_initialize>
	
	sensor_calibrate();
    2ec2:	0e 94 b3 14 	call	0x2966	; 0x2966 <_Z16sensor_calibratev>
	Serial.print(", ");
	Serial.print(Gyro.mZ_zero);
	Serial.println();
*/
	
	Serial.println();
    2ec6:	86 ec       	ldi	r24, 0xC6	; 198
    2ec8:	92 e0       	ldi	r25, 0x02	; 2
    2eca:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN5Print7printlnEv>
	
	pkt.hdr1 = 's';
    2ece:	83 e7       	ldi	r24, 0x73	; 115
    2ed0:	80 93 00 03 	sts	0x0300, r24
	pkt.hdr2 = 'n';
    2ed4:	8e e6       	ldi	r24, 0x6E	; 110
    2ed6:	80 93 01 03 	sts	0x0301, r24
	pkt.hdr3 = 'p';
    2eda:	80 e7       	ldi	r24, 0x70	; 112
    2edc:	80 93 02 03 	sts	0x0302, r24
	pkt.pkt_type = 0xB7;
    2ee0:	87 eb       	ldi	r24, 0xB7	; 183
    2ee2:	80 93 03 03 	sts	0x0303, r24
	pkt.length = 13;
    2ee6:	8d e0       	ldi	r24, 0x0D	; 13
    2ee8:	80 93 04 03 	sts	0x0304, r24
	pkt.active = 0x3F;
    2eec:	8f e3       	ldi	r24, 0x3F	; 63
    2eee:	80 93 05 03 	sts	0x0305, r24
	
	int x, y;
	
	x = -1;
    2ef2:	8f ef       	ldi	r24, 0xFF	; 255
    2ef4:	9f ef       	ldi	r25, 0xFF	; 255
    2ef6:	9c 83       	std	Y+4, r25	; 0x04
    2ef8:	8b 83       	std	Y+3, r24	; 0x03
	y = -1024;
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	9c ef       	ldi	r25, 0xFC	; 252
    2efe:	9a 83       	std	Y+2, r25	; 0x02
    2f00:	89 83       	std	Y+1, r24	; 0x01
	
	x = x >> 2;
    2f02:	8b 81       	ldd	r24, Y+3	; 0x03
    2f04:	9c 81       	ldd	r25, Y+4	; 0x04
    2f06:	95 95       	asr	r25
    2f08:	87 95       	ror	r24
    2f0a:	95 95       	asr	r25
    2f0c:	87 95       	ror	r24
    2f0e:	9c 83       	std	Y+4, r25	; 0x04
    2f10:	8b 83       	std	Y+3, r24	; 0x03
	y = y >> 2;
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	9a 81       	ldd	r25, Y+2	; 0x02
    2f16:	95 95       	asr	r25
    2f18:	87 95       	ror	r24
    2f1a:	95 95       	asr	r25
    2f1c:	87 95       	ror	r24
    2f1e:	9a 83       	std	Y+2, r25	; 0x02
    2f20:	89 83       	std	Y+1, r24	; 0x01
	
	Serial.print("x = ");
    2f22:	86 ec       	ldi	r24, 0xC6	; 198
    2f24:	92 e0       	ldi	r25, 0x02	; 2
    2f26:	2c e1       	ldi	r18, 0x1C	; 28
    2f28:	31 e0       	ldi	r19, 0x01	; 1
    2f2a:	b9 01       	movw	r22, r18
    2f2c:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN5Print5printEPKc>
	Serial.println(x);
    2f30:	86 ec       	ldi	r24, 0xC6	; 198
    2f32:	92 e0       	ldi	r25, 0x02	; 2
    2f34:	2b 81       	ldd	r18, Y+3	; 0x03
    2f36:	3c 81       	ldd	r19, Y+4	; 0x04
    2f38:	b9 01       	movw	r22, r18
    2f3a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_ZN5Print7printlnEi>

	Serial.print("y = ");
    2f3e:	86 ec       	ldi	r24, 0xC6	; 198
    2f40:	92 e0       	ldi	r25, 0x02	; 2
    2f42:	21 e2       	ldi	r18, 0x21	; 33
    2f44:	31 e0       	ldi	r19, 0x01	; 1
    2f46:	b9 01       	movw	r22, r18
    2f48:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN5Print5printEPKc>
	Serial.println(y);
    2f4c:	86 ec       	ldi	r24, 0xC6	; 198
    2f4e:	92 e0       	ldi	r25, 0x02	; 2
    2f50:	29 81       	ldd	r18, Y+1	; 0x01
    2f52:	3a 81       	ldd	r19, Y+2	; 0x02
    2f54:	b9 01       	movw	r22, r18
    2f56:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <_ZN5Print7printlnEi>
	
	
	//Interrupts are enabled in the 
	//sei(); //enable interrupts

}
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <main>:
//  	Serial.write((uint8_t*)&pkt, sizeof(chr6d_msg));
/////////////////////////////////////////////////////////////
}


int main(void)
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
{
	setup();
    2f70:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_Z5setupv>
    
	for (;;)
	{
		loop();
    2f74:	0e 94 35 14 	call	0x286a	; 0x286a <_Z4loopv>
    2f78:	fd cf       	rjmp	.-6      	; 0x2f74 <main+0xc>

00002f7a <_Z22send_msg_sensor_valuesv>:

	Serial.write((uint8_t*)&msg, sizeof(msg_ADC12b_type));

}

void send_msg_sensor_values(void)
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	64 97       	sbiw	r28, 0x14	; 20
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
{
	struct msg_sensor_type msg = {0xAB, 0xCD, MSG_SENSOR_ID}; 
    2f8e:	84 e1       	ldi	r24, 0x14	; 20
    2f90:	fe 01       	movw	r30, r28
    2f92:	31 96       	adiw	r30, 0x01	; 1
    2f94:	df 01       	movw	r26, r30
    2f96:	98 2f       	mov	r25, r24
    2f98:	1d 92       	st	X+, r1
    2f9a:	9a 95       	dec	r25
    2f9c:	e9 f7       	brne	.-6      	; 0x2f98 <_Z22send_msg_sensor_valuesv+0x1e>
    2f9e:	8b ea       	ldi	r24, 0xAB	; 171
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	8d ec       	ldi	r24, 0xCD	; 205
    2fa4:	8a 83       	std	Y+2, r24	; 0x02
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
	
	msg.length = sizeof(msg_sensor_type) - 4;
    2faa:	80 e1       	ldi	r24, 0x10	; 16
    2fac:	8c 83       	std	Y+4, r24	; 0x04
	msg.sys_time = adc_get_sample_time();
    2fae:	0e 94 54 10 	call	0x20a8	; 0x20a8 <adc_get_sample_time>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	af 83       	std	Y+7, r26	; 0x07
    2fbc:	b8 87       	std	Y+8, r27	; 0x08
	
 	msg.acc_x = gADC_output[0];
    2fbe:	80 91 2e 03 	lds	r24, 0x032E
    2fc2:	90 91 2f 03 	lds	r25, 0x032F
    2fc6:	9a 87       	std	Y+10, r25	; 0x0a
    2fc8:	89 87       	std	Y+9, r24	; 0x09
	msg.acc_y = gADC_output[1];
    2fca:	80 91 30 03 	lds	r24, 0x0330
    2fce:	90 91 31 03 	lds	r25, 0x0331
    2fd2:	9c 87       	std	Y+12, r25	; 0x0c
    2fd4:	8b 87       	std	Y+11, r24	; 0x0b
	msg.acc_z = gADC_output[2];
    2fd6:	80 91 32 03 	lds	r24, 0x0332
    2fda:	90 91 33 03 	lds	r25, 0x0333
    2fde:	9e 87       	std	Y+14, r25	; 0x0e
    2fe0:	8d 87       	std	Y+13, r24	; 0x0d
	msg.gyro_x = gADC_output[3];
    2fe2:	80 91 34 03 	lds	r24, 0x0334
    2fe6:	90 91 35 03 	lds	r25, 0x0335
    2fea:	98 8b       	std	Y+16, r25	; 0x10
    2fec:	8f 87       	std	Y+15, r24	; 0x0f
	msg.gyro_y = gADC_output[4];
    2fee:	80 91 36 03 	lds	r24, 0x0336
    2ff2:	90 91 37 03 	lds	r25, 0x0337
    2ff6:	9a 8b       	std	Y+18, r25	; 0x12
    2ff8:	89 8b       	std	Y+17, r24	; 0x11
	msg.gyro_z = gADC_output[5];
    2ffa:	80 91 38 03 	lds	r24, 0x0338
    2ffe:	90 91 39 03 	lds	r25, 0x0339
    3002:	9c 8b       	std	Y+20, r25	; 0x14
    3004:	8b 8b       	std	Y+19, r24	; 0x13

	Serial.write((uint8_t*)&msg, sizeof(msg_sensor_type));
    3006:	86 ec       	ldi	r24, 0xC6	; 198
    3008:	92 e0       	ldi	r25, 0x02	; 2
    300a:	9e 01       	movw	r18, r28
    300c:	2f 5f       	subi	r18, 0xFF	; 255
    300e:	3f 4f       	sbci	r19, 0xFF	; 255
    3010:	b9 01       	movw	r22, r18
    3012:	44 e1       	ldi	r20, 0x14	; 20
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN5Print5writeEPKhj>
}
    301a:	64 96       	adiw	r28, 0x14	; 20
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <_Z23send_msg_ADC12b_samplesv>:
	uint32_t 	sys_time;
	int16_t	adc_data[8];
};


void send_msg_ADC12b_samples(void)
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	68 97       	sbiw	r28, 0x18	; 24
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
{
	
	struct msg_ADC12b_type msg = {0xAB, 0xCD, MSG_ADC12B_ID}; 
    3040:	88 e1       	ldi	r24, 0x18	; 24
    3042:	fe 01       	movw	r30, r28
    3044:	31 96       	adiw	r30, 0x01	; 1
    3046:	df 01       	movw	r26, r30
    3048:	98 2f       	mov	r25, r24
    304a:	1d 92       	st	X+, r1
    304c:	9a 95       	dec	r25
    304e:	e9 f7       	brne	.-6      	; 0x304a <_Z23send_msg_ADC12b_samplesv+0x1e>
    3050:	8b ea       	ldi	r24, 0xAB	; 171
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	8d ec       	ldi	r24, 0xCD	; 205
    3056:	8a 83       	std	Y+2, r24	; 0x02
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	8b 83       	std	Y+3, r24	; 0x03
	
	msg.length = sizeof(msg_ADC12b_type) - 4;
    305c:	84 e1       	ldi	r24, 0x14	; 20
    305e:	8c 83       	std	Y+4, r24	; 0x04
	msg.sys_time = adc_get_sample_time();
    3060:	0e 94 54 10 	call	0x20a8	; 0x20a8 <adc_get_sample_time>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	9e 83       	std	Y+6, r25	; 0x06
    306c:	af 83       	std	Y+7, r26	; 0x07
    306e:	b8 87       	std	Y+8, r27	; 0x08
	
	msg.adc_data[0] = gADC_output[0];
    3070:	80 91 2e 03 	lds	r24, 0x032E
    3074:	90 91 2f 03 	lds	r25, 0x032F
    3078:	9a 87       	std	Y+10, r25	; 0x0a
    307a:	89 87       	std	Y+9, r24	; 0x09
	msg.adc_data[1] = gADC_output[1];
    307c:	80 91 30 03 	lds	r24, 0x0330
    3080:	90 91 31 03 	lds	r25, 0x0331
    3084:	9c 87       	std	Y+12, r25	; 0x0c
    3086:	8b 87       	std	Y+11, r24	; 0x0b
	msg.adc_data[2] = gADC_output[2];
    3088:	80 91 32 03 	lds	r24, 0x0332
    308c:	90 91 33 03 	lds	r25, 0x0333
    3090:	9e 87       	std	Y+14, r25	; 0x0e
    3092:	8d 87       	std	Y+13, r24	; 0x0d
	msg.adc_data[3] = gADC_output[3];
    3094:	80 91 34 03 	lds	r24, 0x0334
    3098:	90 91 35 03 	lds	r25, 0x0335
    309c:	98 8b       	std	Y+16, r25	; 0x10
    309e:	8f 87       	std	Y+15, r24	; 0x0f
	msg.adc_data[4] = gADC_output[4];
    30a0:	80 91 36 03 	lds	r24, 0x0336
    30a4:	90 91 37 03 	lds	r25, 0x0337
    30a8:	9a 8b       	std	Y+18, r25	; 0x12
    30aa:	89 8b       	std	Y+17, r24	; 0x11
	msg.adc_data[5] = gADC_output[5];
    30ac:	80 91 38 03 	lds	r24, 0x0338
    30b0:	90 91 39 03 	lds	r25, 0x0339
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
	msg.adc_data[6] = gADC_output[6];
    30b8:	80 91 3a 03 	lds	r24, 0x033A
    30bc:	90 91 3b 03 	lds	r25, 0x033B
    30c0:	9e 8b       	std	Y+22, r25	; 0x16
    30c2:	8d 8b       	std	Y+21, r24	; 0x15
	msg.adc_data[7] = gADC_output[7];
    30c4:	80 91 3c 03 	lds	r24, 0x033C
    30c8:	90 91 3d 03 	lds	r25, 0x033D
    30cc:	98 8f       	std	Y+24, r25	; 0x18
    30ce:	8f 8b       	std	Y+23, r24	; 0x17

	Serial.write((uint8_t*)&msg, sizeof(msg_ADC12b_type));
    30d0:	86 ec       	ldi	r24, 0xC6	; 198
    30d2:	92 e0       	ldi	r25, 0x02	; 2
    30d4:	9e 01       	movw	r18, r28
    30d6:	2f 5f       	subi	r18, 0xFF	; 255
    30d8:	3f 4f       	sbci	r19, 0xFF	; 255
    30da:	b9 01       	movw	r22, r18
    30dc:	48 e1       	ldi	r20, 0x18	; 24
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN5Print5writeEPKhj>

}
    30e4:	68 96       	adiw	r28, 0x18	; 24
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <_ZN13AccelerometerC2Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "Accelerometer.h"

Accelerometer::Accelerometer()
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <_ZN13AccelerometerC2Ev+0x6>
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	m_zerog_x = 1234;
    3104:	e9 81       	ldd	r30, Y+1	; 0x01
    3106:	fa 81       	ldd	r31, Y+2	; 0x02
    3108:	82 ed       	ldi	r24, 0xD2	; 210
    310a:	94 e0       	ldi	r25, 0x04	; 4
    310c:	97 83       	std	Z+7, r25	; 0x07
    310e:	86 83       	std	Z+6, r24	; 0x06
	m_zerog_y = 1234;
    3110:	e9 81       	ldd	r30, Y+1	; 0x01
    3112:	fa 81       	ldd	r31, Y+2	; 0x02
    3114:	82 ed       	ldi	r24, 0xD2	; 210
    3116:	94 e0       	ldi	r25, 0x04	; 4
    3118:	91 87       	std	Z+9, r25	; 0x09
    311a:	80 87       	std	Z+8, r24	; 0x08
	m_zerog_z = 1234;
    311c:	e9 81       	ldd	r30, Y+1	; 0x01
    311e:	fa 81       	ldd	r31, Y+2	; 0x02
    3120:	82 ed       	ldi	r24, 0xD2	; 210
    3122:	94 e0       	ldi	r25, 0x04	; 4
    3124:	93 87       	std	Z+11, r25	; 0x0b
    3126:	82 87       	std	Z+10, r24	; 0x0a

	m_x = 0;
    3128:	e9 81       	ldd	r30, Y+1	; 0x01
    312a:	fa 81       	ldd	r31, Y+2	; 0x02
    312c:	11 82       	std	Z+1, r1	; 0x01
    312e:	10 82       	st	Z, r1
	m_y = 0;
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	13 82       	std	Z+3, r1	; 0x03
    3136:	12 82       	std	Z+2, r1	; 0x02
	m_z = 0;
    3138:	e9 81       	ldd	r30, Y+1	; 0x01
    313a:	fa 81       	ldd	r31, Y+2	; 0x02
    313c:	15 82       	std	Z+5, r1	; 0x05
    313e:	14 82       	std	Z+4, r1	; 0x04
}
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <_ZN13AccelerometerC1Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "Accelerometer.h"

Accelerometer::Accelerometer()
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	00 d0       	rcall	.+0      	; 0x3150 <_ZN13AccelerometerC1Ev+0x6>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	m_zerog_x = 1234;
    3158:	e9 81       	ldd	r30, Y+1	; 0x01
    315a:	fa 81       	ldd	r31, Y+2	; 0x02
    315c:	82 ed       	ldi	r24, 0xD2	; 210
    315e:	94 e0       	ldi	r25, 0x04	; 4
    3160:	97 83       	std	Z+7, r25	; 0x07
    3162:	86 83       	std	Z+6, r24	; 0x06
	m_zerog_y = 1234;
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	82 ed       	ldi	r24, 0xD2	; 210
    316a:	94 e0       	ldi	r25, 0x04	; 4
    316c:	91 87       	std	Z+9, r25	; 0x09
    316e:	80 87       	std	Z+8, r24	; 0x08
	m_zerog_z = 1234;
    3170:	e9 81       	ldd	r30, Y+1	; 0x01
    3172:	fa 81       	ldd	r31, Y+2	; 0x02
    3174:	82 ed       	ldi	r24, 0xD2	; 210
    3176:	94 e0       	ldi	r25, 0x04	; 4
    3178:	93 87       	std	Z+11, r25	; 0x0b
    317a:	82 87       	std	Z+10, r24	; 0x0a

	m_x = 0;
    317c:	e9 81       	ldd	r30, Y+1	; 0x01
    317e:	fa 81       	ldd	r31, Y+2	; 0x02
    3180:	11 82       	std	Z+1, r1	; 0x01
    3182:	10 82       	st	Z, r1
	m_y = 0;
    3184:	e9 81       	ldd	r30, Y+1	; 0x01
    3186:	fa 81       	ldd	r31, Y+2	; 0x02
    3188:	13 82       	std	Z+3, r1	; 0x03
    318a:	12 82       	std	Z+2, r1	; 0x02
	m_z = 0;
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	15 82       	std	Z+5, r1	; 0x05
    3192:	14 82       	std	Z+4, r1	; 0x04
}
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <_ZN13Accelerometer16set_zerog_valuesEjjj>:


/// Sets ADC values corresponding to stable stationary zero g value. Note that it uses raw ADC values and not 
/// voltage levels. 
void Accelerometer::set_zerog_values(uint16_t x, uint16_t y, uint16_t z)
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	28 97       	sbiw	r28, 0x08	; 8
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	7c 83       	std	Y+4, r23	; 0x04
    31b8:	6b 83       	std	Y+3, r22	; 0x03
    31ba:	5e 83       	std	Y+6, r21	; 0x06
    31bc:	4d 83       	std	Y+5, r20	; 0x05
    31be:	38 87       	std	Y+8, r19	; 0x08
    31c0:	2f 83       	std	Y+7, r18	; 0x07
{
	m_zerog_x = x;
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	e9 81       	ldd	r30, Y+1	; 0x01
    31c8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ca:	97 83       	std	Z+7, r25	; 0x07
    31cc:	86 83       	std	Z+6, r24	; 0x06
	m_zerog_y = y;
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	e9 81       	ldd	r30, Y+1	; 0x01
    31d4:	fa 81       	ldd	r31, Y+2	; 0x02
    31d6:	91 87       	std	Z+9, r25	; 0x09
    31d8:	80 87       	std	Z+8, r24	; 0x08
	m_zerog_z = z;
    31da:	8f 81       	ldd	r24, Y+7	; 0x07
    31dc:	98 85       	ldd	r25, Y+8	; 0x08
    31de:	e9 81       	ldd	r30, Y+1	; 0x01
    31e0:	fa 81       	ldd	r31, Y+2	; 0x02
    31e2:	93 87       	std	Z+11, r25	; 0x0b
    31e4:	82 87       	std	Z+10, r24	; 0x0a
}
    31e6:	28 96       	adiw	r28, 0x08	; 8
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <_ZN13Accelerometer18process_ADC_sampleEjjj>:

void Accelerometer::process_ADC_sample(uint16_t adc_x, uint16_t adc_y, uint16_t adc_z)
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	64 97       	sbiw	r28, 0x14	; 20
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	9e 87       	std	Y+14, r25	; 0x0e
    3216:	8d 87       	std	Y+13, r24	; 0x0d
    3218:	78 8b       	std	Y+16, r23	; 0x10
    321a:	6f 87       	std	Y+15, r22	; 0x0f
    321c:	5a 8b       	std	Y+18, r21	; 0x12
    321e:	49 8b       	std	Y+17, r20	; 0x11
    3220:	3c 8b       	std	Y+20, r19	; 0x14
    3222:	2b 8b       	std	Y+19, r18	; 0x13
{
	int32_t xx, yy, zz; //stores intemediate vaules in mV centered around zero


	xx = adc_x - (int32_t)m_zerog_x;
    3224:	8f 85       	ldd	r24, Y+15	; 0x0f
    3226:	98 89       	ldd	r25, Y+16	; 0x10
    3228:	9c 01       	movw	r18, r24
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3230:	fe 85       	ldd	r31, Y+14	; 0x0e
    3232:	86 81       	ldd	r24, Z+6	; 0x06
    3234:	97 81       	ldd	r25, Z+7	; 0x07
    3236:	aa 27       	eor	r26, r26
    3238:	97 fd       	sbrc	r25, 7
    323a:	a0 95       	com	r26
    323c:	ba 2f       	mov	r27, r26
    323e:	79 01       	movw	r14, r18
    3240:	8a 01       	movw	r16, r20
    3242:	e8 1a       	sub	r14, r24
    3244:	f9 0a       	sbc	r15, r25
    3246:	0a 0b       	sbc	r16, r26
    3248:	1b 0b       	sbc	r17, r27
    324a:	d8 01       	movw	r26, r16
    324c:	c7 01       	movw	r24, r14
    324e:	89 87       	std	Y+9, r24	; 0x09
    3250:	9a 87       	std	Y+10, r25	; 0x0a
    3252:	ab 87       	std	Y+11, r26	; 0x0b
    3254:	bc 87       	std	Y+12, r27	; 0x0c
	yy = adc_y - (int32_t)m_zerog_y;
    3256:	89 89       	ldd	r24, Y+17	; 0x11
    3258:	9a 89       	ldd	r25, Y+18	; 0x12
    325a:	9c 01       	movw	r18, r24
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	ed 85       	ldd	r30, Y+13	; 0x0d
    3262:	fe 85       	ldd	r31, Y+14	; 0x0e
    3264:	80 85       	ldd	r24, Z+8	; 0x08
    3266:	91 85       	ldd	r25, Z+9	; 0x09
    3268:	aa 27       	eor	r26, r26
    326a:	97 fd       	sbrc	r25, 7
    326c:	a0 95       	com	r26
    326e:	ba 2f       	mov	r27, r26
    3270:	79 01       	movw	r14, r18
    3272:	8a 01       	movw	r16, r20
    3274:	e8 1a       	sub	r14, r24
    3276:	f9 0a       	sbc	r15, r25
    3278:	0a 0b       	sbc	r16, r26
    327a:	1b 0b       	sbc	r17, r27
    327c:	d8 01       	movw	r26, r16
    327e:	c7 01       	movw	r24, r14
    3280:	8d 83       	std	Y+5, r24	; 0x05
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	af 83       	std	Y+7, r26	; 0x07
    3286:	b8 87       	std	Y+8, r27	; 0x08
	zz = adc_z - (int32_t)m_zerog_z;
    3288:	8b 89       	ldd	r24, Y+19	; 0x13
    328a:	9c 89       	ldd	r25, Y+20	; 0x14
    328c:	9c 01       	movw	r18, r24
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	ed 85       	ldd	r30, Y+13	; 0x0d
    3294:	fe 85       	ldd	r31, Y+14	; 0x0e
    3296:	82 85       	ldd	r24, Z+10	; 0x0a
    3298:	93 85       	ldd	r25, Z+11	; 0x0b
    329a:	aa 27       	eor	r26, r26
    329c:	97 fd       	sbrc	r25, 7
    329e:	a0 95       	com	r26
    32a0:	ba 2f       	mov	r27, r26
    32a2:	79 01       	movw	r14, r18
    32a4:	8a 01       	movw	r16, r20
    32a6:	e8 1a       	sub	r14, r24
    32a8:	f9 0a       	sbc	r15, r25
    32aa:	0a 0b       	sbc	r16, r26
    32ac:	1b 0b       	sbc	r17, r27
    32ae:	d8 01       	movw	r26, r16
    32b0:	c7 01       	movw	r24, r14
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	ab 83       	std	Y+3, r26	; 0x03
    32b8:	bc 83       	std	Y+4, r27	; 0x04
	
	//Convert from milli Volts to milli g units.
	xx = (xx * m_mV2mg) >> 10;
    32ba:	89 85       	ldd	r24, Y+9	; 0x09
    32bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32be:	ab 85       	ldd	r26, Y+11	; 0x0b
    32c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	35 e0       	ldi	r19, 0x05	; 5
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	bc 01       	movw	r22, r24
    32cc:	cd 01       	movw	r24, r26
    32ce:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__mulsi3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	07 2e       	mov	r0, r23
    32d8:	7a e0       	ldi	r23, 0x0A	; 10
    32da:	b5 95       	asr	r27
    32dc:	a7 95       	ror	r26
    32de:	97 95       	ror	r25
    32e0:	87 95       	ror	r24
    32e2:	7a 95       	dec	r23
    32e4:	d1 f7       	brne	.-12     	; 0x32da <_ZN13Accelerometer18process_ADC_sampleEjjj+0xe2>
    32e6:	70 2d       	mov	r23, r0
    32e8:	89 87       	std	Y+9, r24	; 0x09
    32ea:	9a 87       	std	Y+10, r25	; 0x0a
    32ec:	ab 87       	std	Y+11, r26	; 0x0b
    32ee:	bc 87       	std	Y+12, r27	; 0x0c
	yy = (yy * m_mV2mg) >> 10;
    32f0:	8d 81       	ldd	r24, Y+5	; 0x05
    32f2:	9e 81       	ldd	r25, Y+6	; 0x06
    32f4:	af 81       	ldd	r26, Y+7	; 0x07
    32f6:	b8 85       	ldd	r27, Y+8	; 0x08
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	35 e0       	ldi	r19, 0x05	; 5
    32fc:	40 e0       	ldi	r20, 0x00	; 0
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__mulsi3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	07 2e       	mov	r0, r23
    330e:	7a e0       	ldi	r23, 0x0A	; 10
    3310:	b5 95       	asr	r27
    3312:	a7 95       	ror	r26
    3314:	97 95       	ror	r25
    3316:	87 95       	ror	r24
    3318:	7a 95       	dec	r23
    331a:	d1 f7       	brne	.-12     	; 0x3310 <_ZN13Accelerometer18process_ADC_sampleEjjj+0x118>
    331c:	70 2d       	mov	r23, r0
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	af 83       	std	Y+7, r26	; 0x07
    3324:	b8 87       	std	Y+8, r27	; 0x08
	zz = (zz * m_mV2mg) >> 10;
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	ab 81       	ldd	r26, Y+3	; 0x03
    332c:	bc 81       	ldd	r27, Y+4	; 0x04
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	35 e0       	ldi	r19, 0x05	; 5
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__mulsi3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	07 2e       	mov	r0, r23
    3344:	7a e0       	ldi	r23, 0x0A	; 10
    3346:	b5 95       	asr	r27
    3348:	a7 95       	ror	r26
    334a:	97 95       	ror	r25
    334c:	87 95       	ror	r24
    334e:	7a 95       	dec	r23
    3350:	d1 f7       	brne	.-12     	; 0x3346 <_ZN13Accelerometer18process_ADC_sampleEjjj+0x14e>
    3352:	70 2d       	mov	r23, r0
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	ab 83       	std	Y+3, r26	; 0x03
    335a:	bc 83       	std	Y+4, r27	; 0x04

	//divide value by 1024, since the conversion factor was multiplied by 1024 to reduce round off errors.
	m_x = (int16_t) xx;
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	ed 85       	ldd	r30, Y+13	; 0x0d
    3362:	fe 85       	ldd	r31, Y+14	; 0x0e
    3364:	91 83       	std	Z+1, r25	; 0x01
    3366:	80 83       	st	Z, r24
	m_y = (int16_t) yy;
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	ed 85       	ldd	r30, Y+13	; 0x0d
    336e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3370:	93 83       	std	Z+3, r25	; 0x03
    3372:	82 83       	std	Z+2, r24	; 0x02
	m_z = (int16_t) zz;
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	ed 85       	ldd	r30, Y+13	; 0x0d
    337a:	fe 85       	ldd	r31, Y+14	; 0x0e
    337c:	95 83       	std	Z+5, r25	; 0x05
    337e:	84 83       	std	Z+4, r24	; 0x04

}  
    3380:	64 96       	adiw	r28, 0x14	; 20
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	08 95       	ret

0000339a <_ZN13Accelerometer5get_xEv>:

int16_t	Accelerometer::get_x()
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <_ZN13Accelerometer5get_xEv+0x6>
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
{
	return m_x;
    33a8:	e9 81       	ldd	r30, Y+1	; 0x01
    33aa:	fa 81       	ldd	r31, Y+2	; 0x02
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
}
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <_ZN13Accelerometer5get_yEv>:

int16_t	Accelerometer::get_y()
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <_ZN13Accelerometer5get_yEv+0x6>
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	89 83       	std	Y+1, r24	; 0x01
{
	return m_y;
    33c8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ca:	fa 81       	ldd	r31, Y+2	; 0x02
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
}
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <_ZN13Accelerometer5get_zEv>:

int16_t	Accelerometer::get_z()
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <_ZN13Accelerometer5get_zEv+0x6>
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
{
	return m_z;
    33e8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ea:	fa 81       	ldd	r31, Y+2	; 0x02
    33ec:	84 81       	ldd	r24, Z+4	; 0x04
    33ee:	95 81       	ldd	r25, Z+5	; 0x05
}
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////
Accelerometer Acclmtr;
    33fa:	df 93       	push	r29
    33fc:	cf 93       	push	r28
    33fe:	00 d0       	rcall	.+0      	; 0x3400 <_Z41__static_initialization_and_destruction_0ii+0x6>
    3400:	00 d0       	rcall	.+0      	; 0x3402 <_Z41__static_initialization_and_destruction_0ii+0x8>
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	7c 83       	std	Y+4, r23	; 0x04
    340c:	6b 83       	std	Y+3, r22	; 0x03
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	81 30       	cpi	r24, 0x01	; 1
    3414:	91 05       	cpc	r25, r1
    3416:	51 f4       	brne	.+20     	; 0x342c <_Z41__static_initialization_and_destruction_0ii+0x32>
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	9c 81       	ldd	r25, Y+4	; 0x04
    341c:	2f ef       	ldi	r18, 0xFF	; 255
    341e:	8f 3f       	cpi	r24, 0xFF	; 255
    3420:	92 07       	cpc	r25, r18
    3422:	21 f4       	brne	.+8      	; 0x342c <_Z41__static_initialization_and_destruction_0ii+0x32>
    3424:	84 e1       	ldi	r24, 0x14	; 20
    3426:	93 e0       	ldi	r25, 0x03	; 3
    3428:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN13AccelerometerC1Ev>
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	08 95       	ret

0000343a <_GLOBAL__I__ZN13AccelerometerC2Ev>:
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	6f ef       	ldi	r22, 0xFF	; 255
    3448:	7f ef       	ldi	r23, 0xFF	; 255
    344a:	0e 94 fd 19 	call	0x33fa	; 0x33fa <_Z41__static_initialization_and_destruction_0ii>
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <_ZN10GyroSensorC2Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "GyroSensor.h"

GyroSensor::GyroSensor()
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	00 d0       	rcall	.+0      	; 0x345a <_ZN10GyroSensorC2Ev+0x6>
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	9a 83       	std	Y+2, r25	; 0x02
    3460:	89 83       	std	Y+1, r24	; 0x01
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	82 ed       	ldi	r24, 0xD2	; 210
    3468:	94 e0       	ldi	r25, 0x04	; 4
    346a:	97 83       	std	Z+7, r25	; 0x07
    346c:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = 1234;
    346e:	e9 81       	ldd	r30, Y+1	; 0x01
    3470:	fa 81       	ldd	r31, Y+2	; 0x02
    3472:	82 ed       	ldi	r24, 0xD2	; 210
    3474:	94 e0       	ldi	r25, 0x04	; 4
    3476:	91 87       	std	Z+9, r25	; 0x09
    3478:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = 1234;
    347a:	e9 81       	ldd	r30, Y+1	; 0x01
    347c:	fa 81       	ldd	r31, Y+2	; 0x02
    347e:	82 ed       	ldi	r24, 0xD2	; 210
    3480:	94 e0       	ldi	r25, 0x04	; 4
    3482:	93 87       	std	Z+11, r25	; 0x0b
    3484:	82 87       	std	Z+10, r24	; 0x0a
	
	mX = 0;
    3486:	e9 81       	ldd	r30, Y+1	; 0x01
    3488:	fa 81       	ldd	r31, Y+2	; 0x02
    348a:	11 82       	std	Z+1, r1	; 0x01
    348c:	10 82       	st	Z, r1
	mY = 0;
    348e:	e9 81       	ldd	r30, Y+1	; 0x01
    3490:	fa 81       	ldd	r31, Y+2	; 0x02
    3492:	13 82       	std	Z+3, r1	; 0x03
    3494:	12 82       	std	Z+2, r1	; 0x02
	mZ = 0;
    3496:	e9 81       	ldd	r30, Y+1	; 0x01
    3498:	fa 81       	ldd	r31, Y+2	; 0x02
    349a:	15 82       	std	Z+5, r1	; 0x05
    349c:	14 82       	std	Z+4, r1	; 0x04
}
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <_ZN10GyroSensorC1Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "GyroSensor.h"

GyroSensor::GyroSensor()
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	00 d0       	rcall	.+0      	; 0x34ae <_ZN10GyroSensorC1Ev+0x6>
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	9a 83       	std	Y+2, r25	; 0x02
    34b4:	89 83       	std	Y+1, r24	; 0x01
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    34b6:	e9 81       	ldd	r30, Y+1	; 0x01
    34b8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ba:	82 ed       	ldi	r24, 0xD2	; 210
    34bc:	94 e0       	ldi	r25, 0x04	; 4
    34be:	97 83       	std	Z+7, r25	; 0x07
    34c0:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = 1234;
    34c2:	e9 81       	ldd	r30, Y+1	; 0x01
    34c4:	fa 81       	ldd	r31, Y+2	; 0x02
    34c6:	82 ed       	ldi	r24, 0xD2	; 210
    34c8:	94 e0       	ldi	r25, 0x04	; 4
    34ca:	91 87       	std	Z+9, r25	; 0x09
    34cc:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = 1234;
    34ce:	e9 81       	ldd	r30, Y+1	; 0x01
    34d0:	fa 81       	ldd	r31, Y+2	; 0x02
    34d2:	82 ed       	ldi	r24, 0xD2	; 210
    34d4:	94 e0       	ldi	r25, 0x04	; 4
    34d6:	93 87       	std	Z+11, r25	; 0x0b
    34d8:	82 87       	std	Z+10, r24	; 0x0a
	
	mX = 0;
    34da:	e9 81       	ldd	r30, Y+1	; 0x01
    34dc:	fa 81       	ldd	r31, Y+2	; 0x02
    34de:	11 82       	std	Z+1, r1	; 0x01
    34e0:	10 82       	st	Z, r1
	mY = 0;
    34e2:	e9 81       	ldd	r30, Y+1	; 0x01
    34e4:	fa 81       	ldd	r31, Y+2	; 0x02
    34e6:	13 82       	std	Z+3, r1	; 0x03
    34e8:	12 82       	std	Z+2, r1	; 0x02
	mZ = 0;
    34ea:	e9 81       	ldd	r30, Y+1	; 0x01
    34ec:	fa 81       	ldd	r31, Y+2	; 0x02
    34ee:	15 82       	std	Z+5, r1	; 0x05
    34f0:	14 82       	std	Z+4, r1	; 0x04
}
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <_ZN10GyroSensor15set_zero_valuesEjjj>:

void GyroSensor::set_zero_values(uint16_t x, uint16_t y, uint16_t z)
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	28 97       	sbiw	r28, 0x08	; 8
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 83       	std	Y+1, r24	; 0x01
    3514:	7c 83       	std	Y+4, r23	; 0x04
    3516:	6b 83       	std	Y+3, r22	; 0x03
    3518:	5e 83       	std	Y+6, r21	; 0x06
    351a:	4d 83       	std	Y+5, r20	; 0x05
    351c:	38 87       	std	Y+8, r19	; 0x08
    351e:	2f 83       	std	Y+7, r18	; 0x07
{
	mX_zero = x;
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	e9 81       	ldd	r30, Y+1	; 0x01
    3526:	fa 81       	ldd	r31, Y+2	; 0x02
    3528:	97 83       	std	Z+7, r25	; 0x07
    352a:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = y;
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	e9 81       	ldd	r30, Y+1	; 0x01
    3532:	fa 81       	ldd	r31, Y+2	; 0x02
    3534:	91 87       	std	Z+9, r25	; 0x09
    3536:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = z;
    3538:	8f 81       	ldd	r24, Y+7	; 0x07
    353a:	98 85       	ldd	r25, Y+8	; 0x08
    353c:	e9 81       	ldd	r30, Y+1	; 0x01
    353e:	fa 81       	ldd	r31, Y+2	; 0x02
    3540:	93 87       	std	Z+11, r25	; 0x0b
    3542:	82 87       	std	Z+10, r24	; 0x0a
}
    3544:	28 96       	adiw	r28, 0x08	; 8
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <_ZN10GyroSensor18process_ADC_sampleEjjj>:

void GyroSensor::process_ADC_sample(uint16_t a, uint16_t b, uint16_t c)
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	28 97       	sbiw	r28, 0x08	; 8
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	9a 83       	std	Y+2, r25	; 0x02
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	7c 83       	std	Y+4, r23	; 0x04
    3570:	6b 83       	std	Y+3, r22	; 0x03
    3572:	5e 83       	std	Y+6, r21	; 0x06
    3574:	4d 83       	std	Y+5, r20	; 0x05
    3576:	38 87       	std	Y+8, r19	; 0x08
    3578:	2f 83       	std	Y+7, r18	; 0x07
{
	mX = a - mX_zero;
    357a:	e9 81       	ldd	r30, Y+1	; 0x01
    357c:	fa 81       	ldd	r31, Y+2	; 0x02
    357e:	86 81       	ldd	r24, Z+6	; 0x06
    3580:	97 81       	ldd	r25, Z+7	; 0x07
    3582:	9c 01       	movw	r18, r24
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	9c 81       	ldd	r25, Y+4	; 0x04
    3588:	82 1b       	sub	r24, r18
    358a:	93 0b       	sbc	r25, r19
    358c:	e9 81       	ldd	r30, Y+1	; 0x01
    358e:	fa 81       	ldd	r31, Y+2	; 0x02
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
	mY = b - mY_zero;
    3594:	e9 81       	ldd	r30, Y+1	; 0x01
    3596:	fa 81       	ldd	r31, Y+2	; 0x02
    3598:	80 85       	ldd	r24, Z+8	; 0x08
    359a:	91 85       	ldd	r25, Z+9	; 0x09
    359c:	9c 01       	movw	r18, r24
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	9e 81       	ldd	r25, Y+6	; 0x06
    35a2:	82 1b       	sub	r24, r18
    35a4:	93 0b       	sbc	r25, r19
    35a6:	e9 81       	ldd	r30, Y+1	; 0x01
    35a8:	fa 81       	ldd	r31, Y+2	; 0x02
    35aa:	93 83       	std	Z+3, r25	; 0x03
    35ac:	82 83       	std	Z+2, r24	; 0x02
	mZ = c - mZ_zero;
    35ae:	e9 81       	ldd	r30, Y+1	; 0x01
    35b0:	fa 81       	ldd	r31, Y+2	; 0x02
    35b2:	82 85       	ldd	r24, Z+10	; 0x0a
    35b4:	93 85       	ldd	r25, Z+11	; 0x0b
    35b6:	9c 01       	movw	r18, r24
    35b8:	8f 81       	ldd	r24, Y+7	; 0x07
    35ba:	98 85       	ldd	r25, Y+8	; 0x08
    35bc:	82 1b       	sub	r24, r18
    35be:	93 0b       	sbc	r25, r19
    35c0:	e9 81       	ldd	r30, Y+1	; 0x01
    35c2:	fa 81       	ldd	r31, Y+2	; 0x02
    35c4:	95 83       	std	Z+5, r25	; 0x05
    35c6:	84 83       	std	Z+4, r24	; 0x04
}  
    35c8:	28 96       	adiw	r28, 0x08	; 8
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <_Z41__static_initialization_and_destruction_0ii>:


// Preinstantiate Objects //////////////////////////////////////////////////////

GyroSensor Gyro;
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <_Z41__static_initialization_and_destruction_0ii+0x6>
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <_Z41__static_initialization_and_destruction_0ii+0x8>
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	9a 83       	std	Y+2, r25	; 0x02
    35e8:	89 83       	std	Y+1, r24	; 0x01
    35ea:	7c 83       	std	Y+4, r23	; 0x04
    35ec:	6b 83       	std	Y+3, r22	; 0x03
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	91 05       	cpc	r25, r1
    35f6:	51 f4       	brne	.+20     	; 0x360c <_Z41__static_initialization_and_destruction_0ii+0x32>
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	9c 81       	ldd	r25, Y+4	; 0x04
    35fc:	2f ef       	ldi	r18, 0xFF	; 255
    35fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3600:	92 07       	cpc	r25, r18
    3602:	21 f4       	brne	.+8      	; 0x360c <_Z41__static_initialization_and_destruction_0ii+0x32>
    3604:	80 e2       	ldi	r24, 0x20	; 32
    3606:	93 e0       	ldi	r25, 0x03	; 3
    3608:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <_ZN10GyroSensorC1Ev>
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <_GLOBAL__I__ZN10GyroSensorC2Ev>:
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	6f ef       	ldi	r22, 0xFF	; 255
    3628:	7f ef       	ldi	r23, 0xFF	; 255
    362a:	0e 94 ed 1a 	call	0x35da	; 0x35da <_Z41__static_initialization_and_destruction_0ii>
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <__mulsi3>:
    3634:	62 9f       	mul	r22, r18
    3636:	d0 01       	movw	r26, r0
    3638:	73 9f       	mul	r23, r19
    363a:	f0 01       	movw	r30, r0
    363c:	82 9f       	mul	r24, r18
    363e:	e0 0d       	add	r30, r0
    3640:	f1 1d       	adc	r31, r1
    3642:	64 9f       	mul	r22, r20
    3644:	e0 0d       	add	r30, r0
    3646:	f1 1d       	adc	r31, r1
    3648:	92 9f       	mul	r25, r18
    364a:	f0 0d       	add	r31, r0
    364c:	83 9f       	mul	r24, r19
    364e:	f0 0d       	add	r31, r0
    3650:	74 9f       	mul	r23, r20
    3652:	f0 0d       	add	r31, r0
    3654:	65 9f       	mul	r22, r21
    3656:	f0 0d       	add	r31, r0
    3658:	99 27       	eor	r25, r25
    365a:	72 9f       	mul	r23, r18
    365c:	b0 0d       	add	r27, r0
    365e:	e1 1d       	adc	r30, r1
    3660:	f9 1f       	adc	r31, r25
    3662:	63 9f       	mul	r22, r19
    3664:	b0 0d       	add	r27, r0
    3666:	e1 1d       	adc	r30, r1
    3668:	f9 1f       	adc	r31, r25
    366a:	bd 01       	movw	r22, r26
    366c:	cf 01       	movw	r24, r30
    366e:	11 24       	eor	r1, r1
    3670:	08 95       	ret

00003672 <__divmodhi4>:
    3672:	97 fb       	bst	r25, 7
    3674:	09 2e       	mov	r0, r25
    3676:	07 26       	eor	r0, r23
    3678:	0a d0       	rcall	.+20     	; 0x368e <__divmodhi4_neg1>
    367a:	77 fd       	sbrc	r23, 7
    367c:	04 d0       	rcall	.+8      	; 0x3686 <__divmodhi4_neg2>
    367e:	2e d0       	rcall	.+92     	; 0x36dc <__udivmodhi4>
    3680:	06 d0       	rcall	.+12     	; 0x368e <__divmodhi4_neg1>
    3682:	00 20       	and	r0, r0
    3684:	1a f4       	brpl	.+6      	; 0x368c <__divmodhi4_exit>

00003686 <__divmodhi4_neg2>:
    3686:	70 95       	com	r23
    3688:	61 95       	neg	r22
    368a:	7f 4f       	sbci	r23, 0xFF	; 255

0000368c <__divmodhi4_exit>:
    368c:	08 95       	ret

0000368e <__divmodhi4_neg1>:
    368e:	f6 f7       	brtc	.-4      	; 0x368c <__divmodhi4_exit>
    3690:	90 95       	com	r25
    3692:	81 95       	neg	r24
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	08 95       	ret

00003698 <__udivmodsi4>:
    3698:	a1 e2       	ldi	r26, 0x21	; 33
    369a:	1a 2e       	mov	r1, r26
    369c:	aa 1b       	sub	r26, r26
    369e:	bb 1b       	sub	r27, r27
    36a0:	fd 01       	movw	r30, r26
    36a2:	0d c0       	rjmp	.+26     	; 0x36be <__udivmodsi4_ep>

000036a4 <__udivmodsi4_loop>:
    36a4:	aa 1f       	adc	r26, r26
    36a6:	bb 1f       	adc	r27, r27
    36a8:	ee 1f       	adc	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	a2 17       	cp	r26, r18
    36ae:	b3 07       	cpc	r27, r19
    36b0:	e4 07       	cpc	r30, r20
    36b2:	f5 07       	cpc	r31, r21
    36b4:	20 f0       	brcs	.+8      	; 0x36be <__udivmodsi4_ep>
    36b6:	a2 1b       	sub	r26, r18
    36b8:	b3 0b       	sbc	r27, r19
    36ba:	e4 0b       	sbc	r30, r20
    36bc:	f5 0b       	sbc	r31, r21

000036be <__udivmodsi4_ep>:
    36be:	66 1f       	adc	r22, r22
    36c0:	77 1f       	adc	r23, r23
    36c2:	88 1f       	adc	r24, r24
    36c4:	99 1f       	adc	r25, r25
    36c6:	1a 94       	dec	r1
    36c8:	69 f7       	brne	.-38     	; 0x36a4 <__udivmodsi4_loop>
    36ca:	60 95       	com	r22
    36cc:	70 95       	com	r23
    36ce:	80 95       	com	r24
    36d0:	90 95       	com	r25
    36d2:	9b 01       	movw	r18, r22
    36d4:	ac 01       	movw	r20, r24
    36d6:	bd 01       	movw	r22, r26
    36d8:	cf 01       	movw	r24, r30
    36da:	08 95       	ret

000036dc <__udivmodhi4>:
    36dc:	aa 1b       	sub	r26, r26
    36de:	bb 1b       	sub	r27, r27
    36e0:	51 e1       	ldi	r21, 0x11	; 17
    36e2:	07 c0       	rjmp	.+14     	; 0x36f2 <__udivmodhi4_ep>

000036e4 <__udivmodhi4_loop>:
    36e4:	aa 1f       	adc	r26, r26
    36e6:	bb 1f       	adc	r27, r27
    36e8:	a6 17       	cp	r26, r22
    36ea:	b7 07       	cpc	r27, r23
    36ec:	10 f0       	brcs	.+4      	; 0x36f2 <__udivmodhi4_ep>
    36ee:	a6 1b       	sub	r26, r22
    36f0:	b7 0b       	sbc	r27, r23

000036f2 <__udivmodhi4_ep>:
    36f2:	88 1f       	adc	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	5a 95       	dec	r21
    36f8:	a9 f7       	brne	.-22     	; 0x36e4 <__udivmodhi4_loop>
    36fa:	80 95       	com	r24
    36fc:	90 95       	com	r25
    36fe:	bc 01       	movw	r22, r24
    3700:	cd 01       	movw	r24, r26
    3702:	08 95       	ret

00003704 <__prologue_saves__>:
    3704:	2f 92       	push	r2
    3706:	3f 92       	push	r3
    3708:	4f 92       	push	r4
    370a:	5f 92       	push	r5
    370c:	6f 92       	push	r6
    370e:	7f 92       	push	r7
    3710:	8f 92       	push	r8
    3712:	9f 92       	push	r9
    3714:	af 92       	push	r10
    3716:	bf 92       	push	r11
    3718:	cf 92       	push	r12
    371a:	df 92       	push	r13
    371c:	ef 92       	push	r14
    371e:	ff 92       	push	r15
    3720:	0f 93       	push	r16
    3722:	1f 93       	push	r17
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	ca 1b       	sub	r28, r26
    372e:	db 0b       	sbc	r29, r27
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	09 94       	ijmp

0000373c <__epilogue_restores__>:
    373c:	2a 88       	ldd	r2, Y+18	; 0x12
    373e:	39 88       	ldd	r3, Y+17	; 0x11
    3740:	48 88       	ldd	r4, Y+16	; 0x10
    3742:	5f 84       	ldd	r5, Y+15	; 0x0f
    3744:	6e 84       	ldd	r6, Y+14	; 0x0e
    3746:	7d 84       	ldd	r7, Y+13	; 0x0d
    3748:	8c 84       	ldd	r8, Y+12	; 0x0c
    374a:	9b 84       	ldd	r9, Y+11	; 0x0b
    374c:	aa 84       	ldd	r10, Y+10	; 0x0a
    374e:	b9 84       	ldd	r11, Y+9	; 0x09
    3750:	c8 84       	ldd	r12, Y+8	; 0x08
    3752:	df 80       	ldd	r13, Y+7	; 0x07
    3754:	ee 80       	ldd	r14, Y+6	; 0x06
    3756:	fd 80       	ldd	r15, Y+5	; 0x05
    3758:	0c 81       	ldd	r16, Y+4	; 0x04
    375a:	1b 81       	ldd	r17, Y+3	; 0x03
    375c:	aa 81       	ldd	r26, Y+2	; 0x02
    375e:	b9 81       	ldd	r27, Y+1	; 0x01
    3760:	ce 0f       	add	r28, r30
    3762:	d1 1d       	adc	r29, r1
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	ed 01       	movw	r28, r26
    3770:	08 95       	ret

00003772 <__tablejump2__>:
    3772:	ee 0f       	add	r30, r30
    3774:	ff 1f       	adc	r31, r31

00003776 <__tablejump__>:
    3776:	05 90       	lpm	r0, Z+
    3778:	f4 91       	lpm	r31, Z+
    377a:	e0 2d       	mov	r30, r0
    377c:	09 94       	ijmp

0000377e <_exit>:
    377e:	f8 94       	cli

00003780 <__stop_program>:
    3780:	ff cf       	rjmp	.-2      	; 0x3780 <__stop_program>
